co.aikar.commands.ACFBukkitHelpTopic
co.aikar.commands.ACFBukkitHelpTopic: ACFBukkitHelpTopic(co.aikar.commands.BukkitCommandManager,co.aikar.commands.BukkitRootCommand)
co.aikar.commands.ACFBukkitListener
co.aikar.commands.ACFBukkitListener: void onPluginDisable(org.bukkit.event.server.PluginDisableEvent)
co.aikar.commands.ACFBukkitListener: void onPlayerJoin(org.bukkit.event.player.PlayerJoinEvent)
co.aikar.commands.ACFBukkitListener: void onPlayerQuit(org.bukkit.event.player.PlayerQuitEvent)
co.aikar.commands.ACFBukkitScheduler
co.aikar.commands.ACFBukkitScheduler: ACFBukkitScheduler()
co.aikar.commands.ACFBukkitScheduler: void registerSchedulerDependencies(co.aikar.commands.BukkitCommandManager)
co.aikar.commands.ACFBukkitScheduler: void createDelayedTask(org.bukkit.plugin.Plugin,java.lang.Runnable,long)
co.aikar.commands.ACFBukkitScheduler: void createLocaleTask(org.bukkit.plugin.Plugin,java.lang.Runnable,long,long)
co.aikar.commands.ACFBukkitScheduler: void cancelLocaleTask()
co.aikar.commands.ACFBukkitUtil
co.aikar.commands.ACFBukkitUtil: ACFBukkitUtil()
co.aikar.commands.ACFBukkitUtil: java.lang.String formatLocation(org.bukkit.Location)
co.aikar.commands.ACFBukkitUtil: java.lang.String color(java.lang.String)
co.aikar.commands.ACFBukkitUtil: void sendMsg(org.bukkit.command.CommandSender,java.lang.String)
co.aikar.commands.ACFBukkitUtil: org.bukkit.Location stringToLocation(java.lang.String)
co.aikar.commands.ACFBukkitUtil: org.bukkit.Location stringToLocation(java.lang.String,org.bukkit.World)
co.aikar.commands.ACFBukkitUtil: java.lang.String fullLocationToString(org.bukkit.Location)
co.aikar.commands.ACFBukkitUtil: java.lang.String fullBlockLocationToString(org.bukkit.Location)
co.aikar.commands.ACFBukkitUtil: java.lang.String blockLocationToString(org.bukkit.Location)
co.aikar.commands.ACFBukkitUtil: double distance(org.bukkit.entity.Entity,org.bukkit.entity.Entity)
co.aikar.commands.ACFBukkitUtil: double distance2d(org.bukkit.entity.Entity,org.bukkit.entity.Entity)
co.aikar.commands.ACFBukkitUtil: double distance2d(org.bukkit.Location,org.bukkit.Location)
co.aikar.commands.ACFBukkitUtil: double distance(org.bukkit.Location,org.bukkit.Location)
co.aikar.commands.ACFBukkitUtil: org.bukkit.Location getTargetLoc(org.bukkit.entity.Player)
co.aikar.commands.ACFBukkitUtil: org.bukkit.Location getTargetLoc(org.bukkit.entity.Player,int)
co.aikar.commands.ACFBukkitUtil: org.bukkit.Location getTargetLoc(org.bukkit.entity.Player,int,double)
co.aikar.commands.ACFBukkitUtil: org.bukkit.Location getRandLoc(org.bukkit.Location,int)
co.aikar.commands.ACFBukkitUtil: org.bukkit.Location getRandLoc(org.bukkit.Location,int,int)
co.aikar.commands.ACFBukkitUtil: org.bukkit.Location getRandLoc(org.bukkit.Location,int,int,int)
co.aikar.commands.ACFBukkitUtil: java.lang.String removeColors(java.lang.String)
co.aikar.commands.ACFBukkitUtil: java.lang.String replaceChatString(java.lang.String,java.lang.String,java.lang.String)
co.aikar.commands.ACFBukkitUtil: java.lang.String replaceChatString(java.lang.String,java.util.regex.Pattern,java.lang.String)
co.aikar.commands.ACFBukkitUtil: boolean isWithinDistance(org.bukkit.entity.Player,org.bukkit.entity.Player,int)
co.aikar.commands.ACFBukkitUtil: boolean isWithinDistance(org.bukkit.Location,org.bukkit.Location,int)
co.aikar.commands.ACFBukkitUtil: org.bukkit.entity.Player findPlayerSmart(org.bukkit.command.CommandSender,java.lang.String)
co.aikar.commands.ACFBukkitUtil: org.bukkit.entity.Player findPlayerSmart(co.aikar.commands.CommandIssuer,java.lang.String)
co.aikar.commands.ACFBukkitUtil: boolean isValidName(java.lang.String)
co.aikar.commands.ACFFoliaScheduler
co.aikar.commands.ACFFoliaScheduler: ACFFoliaScheduler()
co.aikar.commands.ACFFoliaScheduler: void registerSchedulerDependencies(co.aikar.commands.BukkitCommandManager)
co.aikar.commands.ACFFoliaScheduler: void createDelayedTask(org.bukkit.plugin.Plugin,java.lang.Runnable,long)
co.aikar.commands.ACFFoliaScheduler: void createLocaleTask(org.bukkit.plugin.Plugin,java.lang.Runnable,long,long)
co.aikar.commands.ACFFoliaScheduler: void cancelLocaleTask()
co.aikar.commands.ACFUtil
co.aikar.commands.ACFUtil: java.util.Random RANDOM
co.aikar.commands.ACFUtil: java.lang.String padRight(java.lang.String,int)
co.aikar.commands.ACFUtil: java.lang.String padLeft(java.lang.String,int)
co.aikar.commands.ACFUtil: java.lang.String formatNumber(java.lang.Integer)
co.aikar.commands.ACFUtil: java.lang.Enum getEnumFromName(java.lang.Enum[],java.lang.String)
co.aikar.commands.ACFUtil: java.lang.Enum getEnumFromName(java.lang.Enum[],java.lang.String,java.lang.Enum)
co.aikar.commands.ACFUtil: java.lang.Enum getEnumFromOrdinal(java.lang.Enum[],int)
co.aikar.commands.ACFUtil: java.lang.String ucfirst(java.lang.String)
co.aikar.commands.ACFUtil: java.lang.Double parseDouble(java.lang.String)
co.aikar.commands.ACFUtil: java.lang.Double parseDouble(java.lang.String,java.lang.Double)
co.aikar.commands.ACFUtil: java.lang.Float parseFloat(java.lang.String)
co.aikar.commands.ACFUtil: java.lang.Float parseFloat(java.lang.String,java.lang.Float)
co.aikar.commands.ACFUtil: java.lang.Long parseLong(java.lang.String)
co.aikar.commands.ACFUtil: java.lang.Long parseLong(java.lang.String,java.lang.Long)
co.aikar.commands.ACFUtil: java.lang.Integer parseInt(java.lang.String)
co.aikar.commands.ACFUtil: java.lang.Integer parseInt(java.lang.String,java.lang.Integer)
co.aikar.commands.ACFUtil: boolean randBool()
co.aikar.commands.ACFUtil: java.lang.Object nullDefault(java.lang.Object,java.lang.Object)
co.aikar.commands.ACFUtil: java.lang.String join(java.util.Collection)
co.aikar.commands.ACFUtil: java.lang.String join(java.util.Collection,java.lang.String)
co.aikar.commands.ACFUtil: java.lang.String join(java.lang.String[])
co.aikar.commands.ACFUtil: java.lang.String join(java.lang.String[],java.lang.String)
co.aikar.commands.ACFUtil: java.lang.String join(java.lang.String[],char)
co.aikar.commands.ACFUtil: java.lang.String join(java.lang.String[],int)
co.aikar.commands.ACFUtil: java.lang.String join(java.lang.String[],int,char)
co.aikar.commands.ACFUtil: java.lang.String simplifyString(java.lang.String)
co.aikar.commands.ACFUtil: double round(double,int)
co.aikar.commands.ACFUtil: int roundUp(int,int)
co.aikar.commands.ACFUtil: java.lang.String limit(java.lang.String,int)
co.aikar.commands.ACFUtil: java.lang.String replace(java.lang.String,java.util.regex.Pattern,java.lang.String)
co.aikar.commands.ACFUtil: java.lang.String replacePattern(java.lang.String,java.util.regex.Pattern,java.lang.String)
co.aikar.commands.ACFUtil: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)
co.aikar.commands.ACFUtil: java.lang.String replacePattern(java.lang.String,java.lang.String,java.lang.String)
co.aikar.commands.ACFUtil: java.lang.String replacePatternMatch(java.lang.String,java.util.regex.Pattern,java.lang.String)
co.aikar.commands.ACFUtil: java.lang.String replacePatternMatch(java.lang.String,java.lang.String,java.lang.String)
co.aikar.commands.ACFUtil: java.lang.String replaceStrings(java.lang.String,java.lang.String[])
co.aikar.commands.ACFUtil: java.lang.String replacePatterns(java.lang.String,java.lang.String[])
co.aikar.commands.ACFUtil: java.lang.String capitalize(java.lang.String,char[])
co.aikar.commands.ACFUtil: java.lang.Object random(java.util.List)
co.aikar.commands.ACFUtil: java.lang.Object random(java.lang.Object[])
co.aikar.commands.ACFUtil: java.lang.Enum random(java.lang.Class)
co.aikar.commands.ACFUtil: java.lang.String normalize(java.lang.String)
co.aikar.commands.ACFUtil: int indexOf(java.lang.String,java.lang.String[])
co.aikar.commands.ACFUtil: java.lang.String capitalizeFirst(java.lang.String)
co.aikar.commands.ACFUtil: java.lang.String capitalizeFirst(java.lang.String,char)
co.aikar.commands.ACFUtil: java.lang.String ltrim(java.lang.String)
co.aikar.commands.ACFUtil: java.lang.String rtrim(java.lang.String)
co.aikar.commands.ACFUtil: java.util.List enumNames(java.lang.Enum[])
co.aikar.commands.ACFUtil: java.util.List enumNames(java.lang.Class)
co.aikar.commands.ACFUtil: java.lang.String combine(java.lang.String[])
co.aikar.commands.ACFUtil: java.lang.String combine(java.lang.String[],int)
co.aikar.commands.ACFUtil: java.lang.Enum simpleMatch(java.lang.Class,java.lang.String)
co.aikar.commands.ACFUtil: boolean isTruthy(java.lang.String)
co.aikar.commands.ACFUtil: java.lang.Number parseNumber(java.lang.String,boolean)
co.aikar.commands.ACFUtil: java.math.BigDecimal parseBigNumber(java.lang.String,boolean)
co.aikar.commands.ACFUtil: boolean hasIntersection(java.util.Collection,java.util.Collection)
co.aikar.commands.ACFUtil: java.util.Collection intersection(java.util.Collection,java.util.Collection)
co.aikar.commands.ACFUtil: int rand(int,int)
co.aikar.commands.ACFUtil: int rand(int,int,int,int)
co.aikar.commands.ACFUtil: double rand(double,double)
co.aikar.commands.ACFUtil: boolean isNumber(java.lang.String)
co.aikar.commands.ACFUtil: java.lang.String intToRoman(int)
co.aikar.commands.ACFUtil: boolean isInteger(java.lang.String)
co.aikar.commands.ACFUtil: boolean isFloat(java.lang.String)
co.aikar.commands.ACFUtil: boolean isDouble(java.lang.String)
co.aikar.commands.ACFUtil: boolean isBetween(float,double,double)
co.aikar.commands.ACFUtil: double precision(double,int)
co.aikar.commands.ACFUtil: void sneaky(java.lang.Throwable)
co.aikar.commands.ACFUtil: java.util.List preformOnImmutable(java.util.List,java.util.function.Consumer)
co.aikar.commands.ACFUtil: java.lang.Object getFirstElement(java.lang.Iterable)
co.aikar.commands.AnnotationProcessor
co.aikar.commands.AnnotationProcessor: java.util.Set getApplicableParameters()
co.aikar.commands.AnnotationProcessor: void onBaseCommandRegister(co.aikar.commands.BaseCommand,java.lang.annotation.Annotation)
co.aikar.commands.AnnotationProcessor: void onCommandRegistered(co.aikar.commands.RegisteredCommand,java.lang.annotation.Annotation)
co.aikar.commands.AnnotationProcessor: void onParameterRegistered(co.aikar.commands.RegisteredCommand,int,java.lang.reflect.Parameter,java.lang.annotation.Annotation)
co.aikar.commands.AnnotationProcessor: void onPreComand(co.aikar.commands.CommandOperationContext)
co.aikar.commands.AnnotationProcessor: void onPostComand(co.aikar.commands.CommandOperationContext)
co.aikar.commands.AnnotationProcessor: void onPreContextResolution(co.aikar.commands.CommandExecutionContext)
co.aikar.commands.AnnotationProcessor: void onPostContextResolution(co.aikar.commands.CommandExecutionContext,java.lang.Object)
co.aikar.commands.BaseCommand
co.aikar.commands.BaseCommand: java.lang.String CATCHUNKNOWN
co.aikar.commands.BaseCommand: java.lang.String DEFAULT
co.aikar.commands.BaseCommand: com.google.common.collect.SetMultimap subCommands
co.aikar.commands.BaseCommand: java.util.Set subScopes
co.aikar.commands.BaseCommand: java.util.Map contextFlags
co.aikar.commands.BaseCommand: java.lang.reflect.Method preCommandHandler
co.aikar.commands.BaseCommand: java.lang.String execLabel
co.aikar.commands.BaseCommand: java.lang.String execSubcommand
co.aikar.commands.BaseCommand: java.lang.String[] origArgs
co.aikar.commands.BaseCommand: co.aikar.commands.CommandManager manager
co.aikar.commands.BaseCommand: co.aikar.commands.BaseCommand parentCommand
co.aikar.commands.BaseCommand: java.util.Map registeredCommands
co.aikar.commands.BaseCommand: java.lang.String description
co.aikar.commands.BaseCommand: java.lang.String commandName
co.aikar.commands.BaseCommand: java.lang.String permission
co.aikar.commands.BaseCommand: java.lang.String conditions
co.aikar.commands.BaseCommand: boolean hasHelpCommand
co.aikar.commands.BaseCommand: co.aikar.commands.ExceptionHandler exceptionHandler
co.aikar.commands.BaseCommand: java.lang.ThreadLocal lastCommandOperationContext
co.aikar.commands.BaseCommand: java.lang.String parentSubcommand
co.aikar.commands.BaseCommand: java.util.Set permissions
co.aikar.commands.BaseCommand: BaseCommand()
co.aikar.commands.BaseCommand: BaseCommand(java.lang.String)
co.aikar.commands.BaseCommand: co.aikar.commands.CommandOperationContext getLastCommandOperationContext()
co.aikar.commands.BaseCommand: java.lang.String getExecCommandLabel()
co.aikar.commands.BaseCommand: java.lang.String getExecSubcommand()
co.aikar.commands.BaseCommand: java.lang.String[] getOrigArgs()
co.aikar.commands.BaseCommand: void onRegister(co.aikar.commands.CommandManager)
co.aikar.commands.BaseCommand: void onRegister(co.aikar.commands.CommandManager,java.lang.String)
co.aikar.commands.BaseCommand: void registerSubclasses(java.lang.String)
co.aikar.commands.BaseCommand: void registerSubcommands()
co.aikar.commands.BaseCommand: void computePermissions()
co.aikar.commands.BaseCommand: java.lang.String getSubcommandValue(java.lang.reflect.Method)
co.aikar.commands.BaseCommand: java.lang.String getParentSubcommand(java.lang.Class)
co.aikar.commands.BaseCommand: void register(java.lang.String,co.aikar.commands.BaseCommand)
co.aikar.commands.BaseCommand: void registerSubcommand(java.lang.reflect.Method,java.lang.String)
co.aikar.commands.BaseCommand: java.util.Set getSubCommandPossibilityList(java.lang.String[])
co.aikar.commands.BaseCommand: void execute(co.aikar.commands.CommandIssuer,co.aikar.commands.CommandRouter$CommandRouteResult)
co.aikar.commands.BaseCommand: void postCommandOperation()
co.aikar.commands.BaseCommand: co.aikar.commands.CommandOperationContext preCommandOperation(co.aikar.commands.CommandIssuer,java.lang.String,java.lang.String[],boolean)
co.aikar.commands.BaseCommand: co.aikar.commands.CommandIssuer getCurrentCommandIssuer()
co.aikar.commands.BaseCommand: co.aikar.commands.CommandManager getCurrentCommandManager()
co.aikar.commands.BaseCommand: void executeCommand(co.aikar.commands.CommandOperationContext,co.aikar.commands.CommandIssuer,java.lang.String[],co.aikar.commands.RegisteredCommand)
co.aikar.commands.BaseCommand: boolean canExecute(co.aikar.commands.CommandIssuer,co.aikar.commands.RegisteredCommand)
co.aikar.commands.BaseCommand: java.util.List tabComplete(co.aikar.commands.CommandIssuer,java.lang.String,java.lang.String[])
co.aikar.commands.BaseCommand: java.util.List tabComplete(co.aikar.commands.CommandIssuer,java.lang.String,java.lang.String[],boolean)
co.aikar.commands.BaseCommand: java.util.List tabComplete(co.aikar.commands.CommandIssuer,co.aikar.commands.RootCommand,java.lang.String[],boolean)
co.aikar.commands.BaseCommand: java.util.List getCommandsForCompletion(co.aikar.commands.CommandIssuer,java.lang.String[])
co.aikar.commands.BaseCommand: boolean isSpecialSubcommand(java.lang.String)
co.aikar.commands.BaseCommand: java.util.List completeCommand(co.aikar.commands.CommandIssuer,co.aikar.commands.RegisteredCommand,java.lang.String[],java.lang.String,boolean)
co.aikar.commands.BaseCommand: java.util.List filterTabComplete(java.lang.String,java.util.List)
co.aikar.commands.BaseCommand: boolean checkPrecommand(co.aikar.commands.CommandOperationContext,co.aikar.commands.RegisteredCommand,co.aikar.commands.CommandIssuer,java.lang.String[])
co.aikar.commands.BaseCommand: co.aikar.commands.CommandHelp getCommandHelp()
co.aikar.commands.BaseCommand: void showCommandHelp()
co.aikar.commands.BaseCommand: void help(java.lang.Object,java.lang.String[])
co.aikar.commands.BaseCommand: void help(co.aikar.commands.CommandIssuer,java.lang.String[])
co.aikar.commands.BaseCommand: void doHelp(java.lang.Object,java.lang.String[])
co.aikar.commands.BaseCommand: void doHelp(co.aikar.commands.CommandIssuer,java.lang.String[])
co.aikar.commands.BaseCommand: void showSyntax(co.aikar.commands.CommandIssuer,co.aikar.commands.RegisteredCommand)
co.aikar.commands.BaseCommand: boolean hasPermission(java.lang.Object)
co.aikar.commands.BaseCommand: boolean hasPermission(co.aikar.commands.CommandIssuer)
co.aikar.commands.BaseCommand: java.util.Set getRequiredPermissions()
co.aikar.commands.BaseCommand: boolean requiresPermission(java.lang.String)
co.aikar.commands.BaseCommand: java.lang.String getName()
co.aikar.commands.BaseCommand: co.aikar.commands.ExceptionHandler getExceptionHandler()
co.aikar.commands.BaseCommand: co.aikar.commands.BaseCommand setExceptionHandler(co.aikar.commands.ExceptionHandler)
co.aikar.commands.BaseCommand: co.aikar.commands.RegisteredCommand getDefaultRegisteredCommand()
co.aikar.commands.BaseCommand: java.lang.String setContextFlags(java.lang.Class,java.lang.String)
co.aikar.commands.BaseCommand: java.lang.String getContextFlags(java.lang.Class)
co.aikar.commands.BaseCommand: java.util.List getRegisteredCommands()
co.aikar.commands.BaseCommand: com.google.common.collect.SetMultimap getSubCommands()
co.aikar.commands.BaseCommand: boolean lambda$filterTabComplete$2(java.lang.String,java.lang.String)
co.aikar.commands.BaseCommand: java.lang.String lambda$getSubCommandPossibilityList$1(java.lang.String,java.lang.String)
co.aikar.commands.BaseCommand: java.lang.String lambda$registerSubclasses$0(java.lang.reflect.Parameter)
co.aikar.commands.BukkitCommandCompletionContext
co.aikar.commands.BukkitCommandCompletionContext: org.bukkit.command.CommandSender getSender()
co.aikar.commands.BukkitCommandCompletionContext: org.bukkit.entity.Player getPlayer()
co.aikar.commands.BukkitCommandCompletions
co.aikar.commands.BukkitCommandCompletions: BukkitCommandCompletions(co.aikar.commands.BukkitCommandManager)
co.aikar.commands.BukkitCommandContexts
co.aikar.commands.BukkitCommandContexts: BukkitCommandContexts(co.aikar.commands.BukkitCommandManager)
co.aikar.commands.BukkitCommandExecutionContext
co.aikar.commands.BukkitCommandExecutionContext: org.bukkit.command.CommandSender getSender()
co.aikar.commands.BukkitCommandExecutionContext: org.bukkit.entity.Player getPlayer()
co.aikar.commands.BukkitCommandIssuer
co.aikar.commands.BukkitCommandIssuer: boolean isPlayer()
co.aikar.commands.BukkitCommandIssuer: org.bukkit.command.CommandSender getIssuer()
co.aikar.commands.BukkitCommandIssuer: org.bukkit.entity.Player getPlayer()
co.aikar.commands.BukkitCommandIssuer: java.util.UUID getUniqueId()
co.aikar.commands.BukkitCommandIssuer: co.aikar.commands.CommandManager getManager()
co.aikar.commands.BukkitCommandIssuer: void sendMessageInternal(java.lang.String)
co.aikar.commands.BukkitCommandIssuer: boolean hasPermission(java.lang.String)
co.aikar.commands.BukkitCommandIssuer: boolean equals(java.lang.Object)
co.aikar.commands.BukkitCommandIssuer: int hashCode()
co.aikar.commands.BukkitCommandIssuer: java.lang.Object getIssuer()
co.aikar.commands.BukkitCommandManager
co.aikar.commands.BukkitCommandManager: java.lang.Integer mcMinorVersion
co.aikar.commands.BukkitCommandManager: java.lang.Integer mcPatchVersion
co.aikar.commands.BukkitCommandManager: BukkitCommandManager(org.bukkit.plugin.Plugin)
co.aikar.commands.BukkitCommandManager: org.bukkit.plugin.Plugin getPlugin()
co.aikar.commands.BukkitCommandManager: boolean isCommandIssuer(java.lang.Class)
co.aikar.commands.BukkitCommandManager: co.aikar.commands.CommandContexts getCommandContexts()
co.aikar.commands.BukkitCommandManager: co.aikar.commands.CommandCompletions getCommandCompletions()
co.aikar.commands.BukkitCommandManager: co.aikar.commands.BukkitLocales getLocales()
co.aikar.commands.BukkitCommandManager: boolean hasRegisteredCommands()
co.aikar.commands.BukkitCommandManager: void registerCommand(co.aikar.commands.BaseCommand,boolean)
co.aikar.commands.BukkitCommandManager: void registerCommand(co.aikar.commands.BaseCommand)
co.aikar.commands.BukkitCommandManager: void unregisterCommand(co.aikar.commands.BaseCommand)
co.aikar.commands.BukkitCommandManager: void unregisterCommand(co.aikar.commands.BukkitRootCommand)
co.aikar.commands.BukkitCommandManager: void unregisterCommands()
co.aikar.commands.BukkitCommandManager: java.util.Locale setPlayerLocale(org.bukkit.entity.Player,java.util.Locale)
co.aikar.commands.BukkitCommandManager: co.aikar.commands.lib.timings.TimingManager getTimings()
co.aikar.commands.BukkitCommandManager: co.aikar.commands.ACFBukkitScheduler getScheduler()
co.aikar.commands.BukkitCommandManager: co.aikar.commands.RootCommand createRootCommand(java.lang.String)
co.aikar.commands.BukkitCommandManager: java.util.Collection getRegisteredRootCommands()
co.aikar.commands.BukkitCommandManager: co.aikar.commands.BukkitCommandIssuer getCommandIssuer(java.lang.Object)
co.aikar.commands.BukkitCommandManager: co.aikar.commands.BukkitCommandExecutionContext createCommandContext(co.aikar.commands.RegisteredCommand,co.aikar.commands.CommandParameter,co.aikar.commands.CommandIssuer,java.util.List,int,java.util.Map)
co.aikar.commands.BukkitCommandManager: co.aikar.commands.BukkitCommandCompletionContext createCompletionContext(co.aikar.commands.RegisteredCommand,co.aikar.commands.CommandIssuer,java.lang.String,java.lang.String,java.lang.String[])
co.aikar.commands.BukkitCommandManager: co.aikar.commands.RegisteredCommand createRegisteredCommand(co.aikar.commands.BaseCommand,java.lang.String,java.lang.reflect.Method,java.lang.String)
co.aikar.commands.BukkitCommandManager: co.aikar.commands.BukkitConditionContext createConditionContext(co.aikar.commands.CommandIssuer,java.lang.String)
co.aikar.commands.BukkitCommandManager: void log(co.aikar.commands.LogLevel,java.lang.String,java.lang.Throwable)
co.aikar.commands.BukkitCommandManager: boolean usePerIssuerLocale(boolean,boolean)
co.aikar.commands.BukkitCommandManager: java.lang.String getCommandPrefix(co.aikar.commands.CommandIssuer)
co.aikar.commands.BukkitCommandManager: co.aikar.commands.CommandCompletionContext createCompletionContext(co.aikar.commands.RegisteredCommand,co.aikar.commands.CommandIssuer,java.lang.String,java.lang.String,java.lang.String[])
co.aikar.commands.BukkitCommandManager: co.aikar.commands.CommandExecutionContext createCommandContext(co.aikar.commands.RegisteredCommand,co.aikar.commands.CommandParameter,co.aikar.commands.CommandIssuer,java.util.List,int,java.util.Map)
co.aikar.commands.BukkitCommandManager: co.aikar.commands.ConditionContext createConditionContext(co.aikar.commands.CommandIssuer,java.lang.String)
co.aikar.commands.BukkitCommandManager: co.aikar.commands.Locales getLocales()
co.aikar.commands.BukkitCommandManager: co.aikar.commands.CommandIssuer getCommandIssuer(java.lang.Object)
co.aikar.commands.BukkitConditionContext
co.aikar.commands.BukkitConditionContext: org.bukkit.command.CommandSender getSender()
co.aikar.commands.BukkitConditionContext: org.bukkit.entity.Player getPlayer()
co.aikar.commands.BukkitLocales
co.aikar.commands.BukkitLocales: BukkitLocales(co.aikar.commands.BukkitCommandManager)
co.aikar.commands.BukkitLocales: void loadLanguages()
co.aikar.commands.BukkitLocales: boolean loadYamlLanguageFile(java.io.File,java.util.Locale)
co.aikar.commands.BukkitLocales: boolean loadYamlLanguageFile(java.lang.String,java.util.Locale)
co.aikar.commands.BukkitLocales: boolean loadLanguage(org.bukkit.configuration.file.FileConfiguration,java.util.Locale)
co.aikar.commands.BukkitMessageFormatter
co.aikar.commands.BukkitMessageFormatter: BukkitMessageFormatter(org.bukkit.ChatColor[])
co.aikar.commands.BukkitRegisteredCommand
co.aikar.commands.BukkitRootCommand
co.aikar.commands.BukkitRootCommand: java.lang.String getDescription()
co.aikar.commands.BukkitRootCommand: java.lang.String getCommandName()
co.aikar.commands.BukkitRootCommand: java.util.List tabComplete(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])
co.aikar.commands.BukkitRootCommand: boolean execute(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])
co.aikar.commands.BukkitRootCommand: boolean testPermissionSilent(org.bukkit.command.CommandSender)
co.aikar.commands.BukkitRootCommand: void addChild(co.aikar.commands.BaseCommand)
co.aikar.commands.BukkitRootCommand: co.aikar.commands.CommandManager getManager()
co.aikar.commands.BukkitRootCommand: com.google.common.collect.SetMultimap getSubCommands()
co.aikar.commands.BukkitRootCommand: java.util.List getChildren()
co.aikar.commands.BukkitRootCommand: co.aikar.commands.BaseCommand getDefCommand()
co.aikar.commands.BukkitRootCommand: org.bukkit.plugin.Plugin getPlugin()
co.aikar.commands.CommandCompletionContext
co.aikar.commands.CommandCompletionContext: java.util.Map getConfigs()
co.aikar.commands.CommandCompletionContext: java.lang.String getConfig(java.lang.String)
co.aikar.commands.CommandCompletionContext: java.lang.String getConfig(java.lang.String,java.lang.String)
co.aikar.commands.CommandCompletionContext: boolean hasConfig(java.lang.String)
co.aikar.commands.CommandCompletionContext: java.lang.Object getContextValue(java.lang.Class)
co.aikar.commands.CommandCompletionContext: java.lang.Object getContextValue(java.lang.Class,java.lang.Integer)
co.aikar.commands.CommandCompletionContext: java.lang.Object getContextValueByName(java.lang.Class,java.lang.String)
co.aikar.commands.CommandCompletionContext: co.aikar.commands.CommandIssuer getIssuer()
co.aikar.commands.CommandCompletionContext: java.lang.String getInput()
co.aikar.commands.CommandCompletionContext: java.lang.String getConfig()
co.aikar.commands.CommandCompletionContext: boolean isAsync()
co.aikar.commands.CommandCompletions
co.aikar.commands.CommandCompletions: CommandCompletions(co.aikar.commands.CommandManager)
co.aikar.commands.CommandCompletions: co.aikar.commands.CommandCompletions$CommandCompletionHandler registerCompletion(java.lang.String,co.aikar.commands.CommandCompletions$CommandCompletionHandler)
co.aikar.commands.CommandCompletions: co.aikar.commands.CommandCompletions$CommandCompletionHandler unregisterCompletion(java.lang.String)
co.aikar.commands.CommandCompletions: co.aikar.commands.CommandCompletions$CommandCompletionHandler registerAsyncCompletion(java.lang.String,co.aikar.commands.CommandCompletions$AsyncCommandCompletionHandler)
co.aikar.commands.CommandCompletions: co.aikar.commands.CommandCompletions$CommandCompletionHandler registerStaticCompletion(java.lang.String,java.lang.String)
co.aikar.commands.CommandCompletions: co.aikar.commands.CommandCompletions$CommandCompletionHandler registerStaticCompletion(java.lang.String,java.lang.String[])
co.aikar.commands.CommandCompletions: co.aikar.commands.CommandCompletions$CommandCompletionHandler registerStaticCompletion(java.lang.String,java.util.function.Supplier)
co.aikar.commands.CommandCompletions: co.aikar.commands.CommandCompletions$CommandCompletionHandler registerStaticCompletion(java.lang.String,java.util.Collection)
co.aikar.commands.CommandCompletions: void setDefaultCompletion(java.lang.String,java.lang.Class[])
co.aikar.commands.CommandCompletions$AsyncCommandCompletionHandler
co.aikar.commands.CommandCompletions$CommandCompletionHandler
co.aikar.commands.CommandCompletions$CommandCompletionHandler: java.util.Collection getCompletions(co.aikar.commands.CommandCompletionContext)
co.aikar.commands.CommandCompletions$SyncCompletionRequired
co.aikar.commands.CommandCompletions$SyncCompletionRequired: CommandCompletions$SyncCompletionRequired()
co.aikar.commands.CommandConditions
co.aikar.commands.CommandConditions: co.aikar.commands.CommandConditions$Condition addCondition(java.lang.String,co.aikar.commands.CommandConditions$Condition)
co.aikar.commands.CommandConditions: co.aikar.commands.CommandConditions$ParameterCondition addCondition(java.lang.Class,java.lang.String,co.aikar.commands.CommandConditions$ParameterCondition)
co.aikar.commands.CommandConditions$Condition
co.aikar.commands.CommandConditions$Condition: void validateCondition(co.aikar.commands.ConditionContext)
co.aikar.commands.CommandConditions$ParameterCondition
co.aikar.commands.CommandConditions$ParameterCondition: void validateCondition(co.aikar.commands.ConditionContext,co.aikar.commands.CommandExecutionContext,java.lang.Object)
co.aikar.commands.CommandContexts
co.aikar.commands.CommandContexts: void registerSenderAwareContext(java.lang.Class,co.aikar.commands.contexts.IssuerAwareContextResolver)
co.aikar.commands.CommandContexts: void registerIssuerAwareContext(java.lang.Class,co.aikar.commands.contexts.IssuerAwareContextResolver)
co.aikar.commands.CommandContexts: void registerIssuerOnlyContext(java.lang.Class,co.aikar.commands.contexts.IssuerOnlyContextResolver)
co.aikar.commands.CommandContexts: void registerOptionalContext(java.lang.Class,co.aikar.commands.contexts.OptionalContextResolver)
co.aikar.commands.CommandContexts: void registerContext(java.lang.Class,co.aikar.commands.contexts.ContextResolver)
co.aikar.commands.CommandContexts: co.aikar.commands.contexts.ContextResolver getResolver(java.lang.Class)
co.aikar.commands.CommandExecutionContext
co.aikar.commands.CommandExecutionContext: java.lang.String popFirstArg()
co.aikar.commands.CommandExecutionContext: java.lang.String popLastArg()
co.aikar.commands.CommandExecutionContext: java.lang.String getFirstArg()
co.aikar.commands.CommandExecutionContext: java.lang.String getLastArg()
co.aikar.commands.CommandExecutionContext: boolean isLastArg()
co.aikar.commands.CommandExecutionContext: int getNumParams()
co.aikar.commands.CommandExecutionContext: boolean canOverridePlayerContext()
co.aikar.commands.CommandExecutionContext: java.lang.Object getResolvedArg(java.lang.String)
co.aikar.commands.CommandExecutionContext: java.lang.Object getResolvedArg(java.lang.Class[])
co.aikar.commands.CommandExecutionContext: java.lang.Object getResolvedArg(java.lang.String,java.lang.Class[])
co.aikar.commands.CommandExecutionContext: java.util.Set getParameterPermissions()
co.aikar.commands.CommandExecutionContext: boolean isOptional()
co.aikar.commands.CommandExecutionContext: boolean hasFlag(java.lang.String)
co.aikar.commands.CommandExecutionContext: java.lang.String getFlagValue(java.lang.String,java.lang.String)
co.aikar.commands.CommandExecutionContext: java.lang.Integer getFlagValue(java.lang.String,java.lang.Integer)
co.aikar.commands.CommandExecutionContext: java.lang.Long getFlagValue(java.lang.String,java.lang.Long)
co.aikar.commands.CommandExecutionContext: java.lang.Float getFlagValue(java.lang.String,java.lang.Float)
co.aikar.commands.CommandExecutionContext: java.lang.Double getFlagValue(java.lang.String,java.lang.Double)
co.aikar.commands.CommandExecutionContext: java.lang.Integer getIntFlagValue(java.lang.String,java.lang.Number)
co.aikar.commands.CommandExecutionContext: java.lang.Long getLongFlagValue(java.lang.String,java.lang.Number)
co.aikar.commands.CommandExecutionContext: java.lang.Float getFloatFlagValue(java.lang.String,java.lang.Number)
co.aikar.commands.CommandExecutionContext: java.lang.Double getDoubleFlagValue(java.lang.String,java.lang.Number)
co.aikar.commands.CommandExecutionContext: java.lang.Boolean getBooleanFlagValue(java.lang.String)
co.aikar.commands.CommandExecutionContext: java.lang.Boolean getBooleanFlagValue(java.lang.String,java.lang.Boolean)
co.aikar.commands.CommandExecutionContext: java.lang.Double getFlagValue(java.lang.String,java.lang.Number)
co.aikar.commands.CommandExecutionContext: java.lang.annotation.Annotation getAnnotation(java.lang.Class)
co.aikar.commands.CommandExecutionContext: java.lang.String getAnnotationValue(java.lang.Class)
co.aikar.commands.CommandExecutionContext: java.lang.String getAnnotationValue(java.lang.Class,int)
co.aikar.commands.CommandExecutionContext: boolean hasAnnotation(java.lang.Class)
co.aikar.commands.CommandExecutionContext: co.aikar.commands.RegisteredCommand getCmd()
co.aikar.commands.CommandExecutionContext: java.lang.reflect.Parameter getParam()
co.aikar.commands.CommandExecutionContext: co.aikar.commands.CommandIssuer getIssuer()
co.aikar.commands.CommandExecutionContext: java.util.List getArgs()
co.aikar.commands.CommandExecutionContext: int getIndex()
co.aikar.commands.CommandExecutionContext: java.util.Map getPassedArgs()
co.aikar.commands.CommandExecutionContext: java.util.Map getFlags()
co.aikar.commands.CommandExecutionContext: java.lang.String joinArgs()
co.aikar.commands.CommandExecutionContext: java.lang.String joinArgs(java.lang.String)
co.aikar.commands.CommandHelp
co.aikar.commands.CommandHelp: CommandHelp(co.aikar.commands.CommandManager,co.aikar.commands.RootCommand,co.aikar.commands.CommandIssuer)
co.aikar.commands.CommandHelp: co.aikar.commands.CommandManager getManager()
co.aikar.commands.CommandHelp: boolean testExactMatch(java.lang.String)
co.aikar.commands.CommandHelp: void showHelp()
co.aikar.commands.CommandHelp: void showHelp(co.aikar.commands.CommandIssuer)
co.aikar.commands.CommandHelp: java.util.List getHelpEntries()
co.aikar.commands.CommandHelp: void setPerPage(int)
co.aikar.commands.CommandHelp: void setPage(int)
co.aikar.commands.CommandHelp: void setPage(int,int)
co.aikar.commands.CommandHelp: void setSearch(java.util.List)
co.aikar.commands.CommandHelp: co.aikar.commands.CommandIssuer getIssuer()
co.aikar.commands.CommandHelp: java.lang.String getCommandName()
co.aikar.commands.CommandHelp: java.lang.String getCommandPrefix()
co.aikar.commands.CommandHelp: int getPage()
co.aikar.commands.CommandHelp: int getPerPage()
co.aikar.commands.CommandHelp: java.util.List getSearch()
co.aikar.commands.CommandHelp: java.util.Set getSelectedEntry()
co.aikar.commands.CommandHelp: int getTotalResults()
co.aikar.commands.CommandHelp: int getTotalPages()
co.aikar.commands.CommandHelp: boolean isOnlyPage()
co.aikar.commands.CommandHelp: boolean isLastPage()
co.aikar.commands.CommandHelpFormatter
co.aikar.commands.CommandHelpFormatter: CommandHelpFormatter(co.aikar.commands.CommandManager)
co.aikar.commands.CommandHelpFormatter: void showAllResults(co.aikar.commands.CommandHelp,java.util.List)
co.aikar.commands.CommandHelpFormatter: void showSearchResults(co.aikar.commands.CommandHelp,java.util.List)
co.aikar.commands.CommandHelpFormatter: void showDetailedHelp(co.aikar.commands.CommandHelp,co.aikar.commands.HelpEntry)
co.aikar.commands.CommandHelpFormatter: void printHelpHeader(co.aikar.commands.CommandHelp,co.aikar.commands.CommandIssuer)
co.aikar.commands.CommandHelpFormatter: void printHelpCommand(co.aikar.commands.CommandHelp,co.aikar.commands.CommandIssuer,co.aikar.commands.HelpEntry)
co.aikar.commands.CommandHelpFormatter: void printHelpFooter(co.aikar.commands.CommandHelp,co.aikar.commands.CommandIssuer)
co.aikar.commands.CommandHelpFormatter: void printSearchHeader(co.aikar.commands.CommandHelp,co.aikar.commands.CommandIssuer)
co.aikar.commands.CommandHelpFormatter: void printSearchEntry(co.aikar.commands.CommandHelp,co.aikar.commands.CommandIssuer,co.aikar.commands.HelpEntry)
co.aikar.commands.CommandHelpFormatter: void printSearchFooter(co.aikar.commands.CommandHelp,co.aikar.commands.CommandIssuer)
co.aikar.commands.CommandHelpFormatter: void printDetailedHelpHeader(co.aikar.commands.CommandHelp,co.aikar.commands.CommandIssuer,co.aikar.commands.HelpEntry)
co.aikar.commands.CommandHelpFormatter: void printDetailedHelpCommand(co.aikar.commands.CommandHelp,co.aikar.commands.CommandIssuer,co.aikar.commands.HelpEntry)
co.aikar.commands.CommandHelpFormatter: void printDetailedParameter(co.aikar.commands.CommandHelp,co.aikar.commands.CommandIssuer,co.aikar.commands.HelpEntry,co.aikar.commands.CommandParameter)
co.aikar.commands.CommandHelpFormatter: void printDetailedHelpFooter(co.aikar.commands.CommandHelp,co.aikar.commands.CommandIssuer,co.aikar.commands.HelpEntry)
co.aikar.commands.CommandHelpFormatter: java.lang.String[] getHeaderFooterFormatReplacements(co.aikar.commands.CommandHelp)
co.aikar.commands.CommandHelpFormatter: java.lang.String[] getEntryFormatReplacements(co.aikar.commands.CommandHelp,co.aikar.commands.HelpEntry)
co.aikar.commands.CommandHelpFormatter: java.lang.String[] getParameterFormatReplacements(co.aikar.commands.CommandHelp,co.aikar.commands.CommandParameter,co.aikar.commands.HelpEntry)
co.aikar.commands.CommandIssuer
co.aikar.commands.CommandIssuer: java.lang.Object getIssuer()
co.aikar.commands.CommandIssuer: co.aikar.commands.CommandManager getManager()
co.aikar.commands.CommandIssuer: boolean isPlayer()
co.aikar.commands.CommandIssuer: void sendMessage(java.lang.String)
co.aikar.commands.CommandIssuer: java.util.UUID getUniqueId()
co.aikar.commands.CommandIssuer: boolean hasPermission(java.lang.String)
co.aikar.commands.CommandIssuer: void sendError(co.aikar.locales.MessageKeyProvider,java.lang.String[])
co.aikar.commands.CommandIssuer: void sendSyntax(co.aikar.locales.MessageKeyProvider,java.lang.String[])
co.aikar.commands.CommandIssuer: void sendInfo(co.aikar.locales.MessageKeyProvider,java.lang.String[])
co.aikar.commands.CommandIssuer: void sendError(co.aikar.locales.MessageKey,java.lang.String[])
co.aikar.commands.CommandIssuer: void sendSyntax(co.aikar.locales.MessageKey,java.lang.String[])
co.aikar.commands.CommandIssuer: void sendInfo(co.aikar.locales.MessageKey,java.lang.String[])
co.aikar.commands.CommandIssuer: void sendMessage(co.aikar.commands.MessageType,co.aikar.locales.MessageKeyProvider,java.lang.String[])
co.aikar.commands.CommandIssuer: void sendMessage(co.aikar.commands.MessageType,co.aikar.locales.MessageKey,java.lang.String[])
co.aikar.commands.CommandIssuer: void sendMessageInternal(java.lang.String)
co.aikar.commands.CommandManager
co.aikar.commands.CommandManager: CommandManager()
co.aikar.commands.CommandManager: co.aikar.commands.CommandOperationContext getCurrentCommandOperationContext()
co.aikar.commands.CommandManager: co.aikar.commands.CommandIssuer getCurrentCommandIssuer()
co.aikar.commands.CommandManager: co.aikar.commands.CommandManager getCurrentCommandManager()
co.aikar.commands.CommandManager: co.aikar.commands.MessageFormatter setFormat(co.aikar.commands.MessageType,co.aikar.commands.MessageFormatter)
co.aikar.commands.CommandManager: co.aikar.commands.MessageFormatter getFormat(co.aikar.commands.MessageType)
co.aikar.commands.CommandManager: void setFormat(co.aikar.commands.MessageType,java.lang.Object[])
co.aikar.commands.CommandManager: void setFormat(co.aikar.commands.MessageType,int,java.lang.Object)
co.aikar.commands.CommandManager: co.aikar.commands.MessageFormatter getDefaultFormatter()
co.aikar.commands.CommandManager: void setDefaultFormatter(co.aikar.commands.MessageFormatter)
co.aikar.commands.CommandManager: co.aikar.commands.CommandConditions getCommandConditions()
co.aikar.commands.CommandManager: co.aikar.commands.CommandContexts getCommandContexts()
co.aikar.commands.CommandManager: co.aikar.commands.CommandCompletions getCommandCompletions()
co.aikar.commands.CommandManager: co.aikar.commands.CommandHelp generateCommandHelp(java.lang.String)
co.aikar.commands.CommandManager: co.aikar.commands.CommandHelp generateCommandHelp(co.aikar.commands.CommandIssuer,java.lang.String)
co.aikar.commands.CommandManager: co.aikar.commands.CommandHelp generateCommandHelp()
co.aikar.commands.CommandManager: co.aikar.commands.CommandHelp generateCommandHelp(co.aikar.commands.CommandIssuer,co.aikar.commands.RootCommand)
co.aikar.commands.CommandManager: int getDefaultHelpPerPage()
co.aikar.commands.CommandManager: void setDefaultHelpPerPage(int)
co.aikar.commands.CommandManager: void setHelpFormatter(co.aikar.commands.CommandHelpFormatter)
co.aikar.commands.CommandManager: co.aikar.commands.CommandHelpFormatter getHelpFormatter()
co.aikar.commands.CommandManager: void registerCommand(co.aikar.commands.BaseCommand)
co.aikar.commands.CommandManager: boolean hasRegisteredCommands()
co.aikar.commands.CommandManager: boolean isCommandIssuer(java.lang.Class)
co.aikar.commands.CommandManager: co.aikar.commands.CommandIssuer getCommandIssuer(java.lang.Object)
co.aikar.commands.CommandManager: co.aikar.commands.RootCommand createRootCommand(java.lang.String)
co.aikar.commands.CommandManager: co.aikar.commands.Locales getLocales()
co.aikar.commands.CommandManager: boolean usingPerIssuerLocale()
co.aikar.commands.CommandManager: boolean usePerIssuerLocale(boolean)
co.aikar.commands.CommandManager: boolean isValidName(java.lang.String)
co.aikar.commands.CommandManager: java.util.function.Predicate getValidNamePredicate()
co.aikar.commands.CommandManager: void setValidNamePredicate(java.util.function.Predicate)
co.aikar.commands.CommandManager: co.aikar.commands.ConditionContext createConditionContext(co.aikar.commands.CommandIssuer,java.lang.String)
co.aikar.commands.CommandManager: co.aikar.commands.CommandExecutionContext createCommandContext(co.aikar.commands.RegisteredCommand,co.aikar.commands.CommandParameter,co.aikar.commands.CommandIssuer,java.util.List,int,java.util.Map)
co.aikar.commands.CommandManager: co.aikar.commands.CommandCompletionContext createCompletionContext(co.aikar.commands.RegisteredCommand,co.aikar.commands.CommandIssuer,java.lang.String,java.lang.String,java.lang.String[])
co.aikar.commands.CommandManager: void log(co.aikar.commands.LogLevel,java.lang.String,java.lang.Throwable)
co.aikar.commands.CommandManager: void log(co.aikar.commands.LogLevel,java.lang.String)
co.aikar.commands.CommandManager: co.aikar.commands.CommandReplacements getCommandReplacements()
co.aikar.commands.CommandManager: boolean hasPermission(co.aikar.commands.CommandIssuer,java.util.Set)
co.aikar.commands.CommandManager: boolean hasPermission(co.aikar.commands.CommandIssuer,java.lang.String)
co.aikar.commands.CommandManager: co.aikar.commands.RootCommand getRootCommand(java.lang.String)
co.aikar.commands.CommandManager: co.aikar.commands.RootCommand obtainRootCommand(java.lang.String)
co.aikar.commands.CommandManager: java.util.Collection getRegisteredRootCommands()
co.aikar.commands.CommandManager: co.aikar.commands.RegisteredCommand createRegisteredCommand(co.aikar.commands.BaseCommand,java.lang.String,java.lang.reflect.Method,java.lang.String)
co.aikar.commands.CommandManager: void setDefaultExceptionHandler(co.aikar.commands.ExceptionHandler)
co.aikar.commands.CommandManager: void setDefaultExceptionHandler(co.aikar.commands.ExceptionHandler,boolean)
co.aikar.commands.CommandManager: boolean isLoggingUnhandledExceptions()
co.aikar.commands.CommandManager: co.aikar.commands.ExceptionHandler getDefaultExceptionHandler()
co.aikar.commands.CommandManager: void sendMessage(java.lang.Object,co.aikar.commands.MessageType,co.aikar.locales.MessageKeyProvider,java.lang.String[])
co.aikar.commands.CommandManager: void sendMessage(co.aikar.commands.CommandIssuer,co.aikar.commands.MessageType,co.aikar.locales.MessageKeyProvider,java.lang.String[])
co.aikar.commands.CommandManager: java.lang.String formatMessage(co.aikar.commands.CommandIssuer,co.aikar.commands.MessageType,co.aikar.locales.MessageKeyProvider,java.lang.String[])
co.aikar.commands.CommandManager: void onLocaleChange(co.aikar.commands.IssuerLocaleChangedCallback)
co.aikar.commands.CommandManager: void notifyLocaleChange(co.aikar.commands.CommandIssuer,java.util.Locale,java.util.Locale)
co.aikar.commands.CommandManager: java.util.Locale setIssuerLocale(java.lang.Object,java.util.Locale)
co.aikar.commands.CommandManager: java.util.Locale getIssuerLocale(co.aikar.commands.CommandIssuer)
co.aikar.commands.CommandManager: java.util.Set getSupportedLanguages()
co.aikar.commands.CommandManager: void addSupportedLanguage(java.util.Locale)
co.aikar.commands.CommandManager: void registerDependency(java.lang.Class,java.lang.Object)
co.aikar.commands.CommandManager: void registerDependency(java.lang.Class,java.lang.String,java.lang.Object)
co.aikar.commands.CommandManager: void unregisterDependency(java.lang.Class)
co.aikar.commands.CommandManager: void unregisterDependency(java.lang.Class,java.lang.String)
co.aikar.commands.CommandManager: void enableUnstableAPI(java.lang.String)
co.aikar.commands.CommandManager: java.lang.String getCommandPrefix(co.aikar.commands.CommandIssuer)
co.aikar.commands.CommandOperationContext
co.aikar.commands.CommandOperationContext: co.aikar.commands.CommandManager getCommandManager()
co.aikar.commands.CommandOperationContext: co.aikar.commands.CommandIssuer getCommandIssuer()
co.aikar.commands.CommandOperationContext: co.aikar.commands.BaseCommand getCommand()
co.aikar.commands.CommandOperationContext: java.lang.String getCommandLabel()
co.aikar.commands.CommandOperationContext: java.lang.String[] getArgs()
co.aikar.commands.CommandOperationContext: boolean isAsync()
co.aikar.commands.CommandOperationContext: void setRegisteredCommand(co.aikar.commands.RegisteredCommand)
co.aikar.commands.CommandOperationContext: co.aikar.commands.RegisteredCommand getRegisteredCommand()
co.aikar.commands.CommandOperationContext: java.lang.annotation.Annotation getAnnotation(java.lang.Class)
co.aikar.commands.CommandOperationContext: java.lang.String getAnnotationValue(java.lang.Class)
co.aikar.commands.CommandOperationContext: java.lang.String getAnnotationValue(java.lang.Class,int)
co.aikar.commands.CommandOperationContext: boolean hasAnnotation(java.lang.Class)
co.aikar.commands.CommandParameter
co.aikar.commands.CommandParameter: CommandParameter(co.aikar.commands.RegisteredCommand,java.lang.reflect.Parameter,int,boolean)
co.aikar.commands.CommandParameter: java.lang.reflect.Parameter getParameter()
co.aikar.commands.CommandParameter: java.lang.Class getType()
co.aikar.commands.CommandParameter: java.lang.String getName()
co.aikar.commands.CommandParameter: java.lang.String getDisplayName(co.aikar.commands.CommandIssuer)
co.aikar.commands.CommandParameter: co.aikar.commands.CommandManager getManager()
co.aikar.commands.CommandParameter: int getParamIndex()
co.aikar.commands.CommandParameter: co.aikar.commands.contexts.ContextResolver getResolver()
co.aikar.commands.CommandParameter: void setResolver(co.aikar.commands.contexts.ContextResolver)
co.aikar.commands.CommandParameter: boolean isOptionalInput()
co.aikar.commands.CommandParameter: boolean isOptional()
co.aikar.commands.CommandParameter: void setOptional(boolean)
co.aikar.commands.CommandParameter: java.lang.String getDescription()
co.aikar.commands.CommandParameter: void setDescription(java.lang.String)
co.aikar.commands.CommandParameter: java.lang.String getDefaultValue()
co.aikar.commands.CommandParameter: void setDefaultValue(java.lang.String)
co.aikar.commands.CommandParameter: boolean isCommandIssuer()
co.aikar.commands.CommandParameter: void setCommandIssuer(boolean)
co.aikar.commands.CommandParameter: java.lang.String[] getValues()
co.aikar.commands.CommandParameter: void setValues(java.lang.String[])
co.aikar.commands.CommandParameter: java.util.Map getFlags()
co.aikar.commands.CommandParameter: void setFlags(java.util.Map)
co.aikar.commands.CommandParameter: boolean canConsumeInput()
co.aikar.commands.CommandParameter: void setCanConsumeInput(boolean)
co.aikar.commands.CommandParameter: void setOptionalResolver(boolean)
co.aikar.commands.CommandParameter: boolean isOptionalResolver()
co.aikar.commands.CommandParameter: boolean requiresInput()
co.aikar.commands.CommandParameter: void setRequiresInput(boolean)
co.aikar.commands.CommandParameter: java.lang.String getSyntax()
co.aikar.commands.CommandParameter: java.lang.String getSyntax(co.aikar.commands.CommandIssuer)
co.aikar.commands.CommandParameter: void setSyntax(java.lang.String)
co.aikar.commands.CommandParameter: java.lang.String getConditions()
co.aikar.commands.CommandParameter: void setConditions(java.lang.String)
co.aikar.commands.CommandParameter: java.util.Set getRequiredPermissions()
co.aikar.commands.CommandParameter: void setNextParam(co.aikar.commands.CommandParameter)
co.aikar.commands.CommandParameter: co.aikar.commands.CommandParameter getNextParam()
co.aikar.commands.CommandParameter: boolean canExecuteWithoutInput()
co.aikar.commands.CommandParameter: boolean isLast()
co.aikar.commands.CommandReplacements
co.aikar.commands.CommandReplacements: void addReplacements(java.lang.String[])
co.aikar.commands.CommandReplacements: java.lang.String addReplacement(java.lang.String,java.lang.String)
co.aikar.commands.CommandReplacements: java.lang.String replace(java.lang.String)
co.aikar.commands.ConditionContext
co.aikar.commands.ConditionContext: co.aikar.commands.CommandIssuer getIssuer()
co.aikar.commands.ConditionContext: java.lang.String getConfig()
co.aikar.commands.ConditionContext: boolean hasConfig(java.lang.String)
co.aikar.commands.ConditionContext: java.lang.String getConfigValue(java.lang.String,java.lang.String)
co.aikar.commands.ConditionContext: java.lang.Integer getConfigValue(java.lang.String,java.lang.Integer)
co.aikar.commands.ConditionFailedException
co.aikar.commands.ConditionFailedException: ConditionFailedException()
co.aikar.commands.ConditionFailedException: ConditionFailedException(co.aikar.locales.MessageKeyProvider,java.lang.String[])
co.aikar.commands.ConditionFailedException: ConditionFailedException(co.aikar.locales.MessageKey,java.lang.String[])
co.aikar.commands.ConditionFailedException: ConditionFailedException(java.lang.String)
co.aikar.commands.ExceptionHandler
co.aikar.commands.ExceptionHandler: boolean execute(co.aikar.commands.BaseCommand,co.aikar.commands.RegisteredCommand,co.aikar.commands.CommandIssuer,java.util.List,java.lang.Throwable)
co.aikar.commands.ForwardingCommand
co.aikar.commands.ForwardingCommand: java.util.List getRegisteredCommands()
co.aikar.commands.ForwardingCommand: co.aikar.commands.CommandOperationContext getLastCommandOperationContext()
co.aikar.commands.ForwardingCommand: java.util.Set getRequiredPermissions()
co.aikar.commands.ForwardingCommand: boolean hasPermission(java.lang.Object)
co.aikar.commands.ForwardingCommand: boolean requiresPermission(java.lang.String)
co.aikar.commands.ForwardingCommand: boolean hasPermission(co.aikar.commands.CommandIssuer)
co.aikar.commands.ForwardingCommand: java.util.List tabComplete(co.aikar.commands.CommandIssuer,co.aikar.commands.RootCommand,java.lang.String[],boolean)
co.aikar.commands.ForwardingCommand: void execute(co.aikar.commands.CommandIssuer,co.aikar.commands.CommandRouter$CommandRouteResult)
co.aikar.commands.HelpEntry
co.aikar.commands.HelpEntry: java.lang.String getCommand()
co.aikar.commands.HelpEntry: java.lang.String getCommandPrefix()
co.aikar.commands.HelpEntry: java.lang.String getParameterSyntax()
co.aikar.commands.HelpEntry: java.lang.String getParameterSyntax(co.aikar.commands.CommandIssuer)
co.aikar.commands.HelpEntry: java.lang.String getDescription()
co.aikar.commands.HelpEntry: void setSearchScore(int)
co.aikar.commands.HelpEntry: boolean shouldShow()
co.aikar.commands.HelpEntry: int getSearchScore()
co.aikar.commands.HelpEntry: java.lang.String getSearchTags()
co.aikar.commands.HelpEntry: co.aikar.commands.CommandParameter[] getParameters()
co.aikar.commands.InvalidCommandArgument
co.aikar.commands.InvalidCommandArgument: InvalidCommandArgument()
co.aikar.commands.InvalidCommandArgument: InvalidCommandArgument(boolean)
co.aikar.commands.InvalidCommandArgument: InvalidCommandArgument(co.aikar.locales.MessageKeyProvider,java.lang.String[])
co.aikar.commands.InvalidCommandArgument: InvalidCommandArgument(co.aikar.locales.MessageKey,java.lang.String[])
co.aikar.commands.InvalidCommandArgument: InvalidCommandArgument(co.aikar.locales.MessageKeyProvider,boolean,java.lang.String[])
co.aikar.commands.InvalidCommandArgument: InvalidCommandArgument(co.aikar.locales.MessageKey,boolean,java.lang.String[])
co.aikar.commands.InvalidCommandArgument: InvalidCommandArgument(java.lang.String)
co.aikar.commands.InvalidCommandArgument: InvalidCommandArgument(java.lang.String,boolean)
co.aikar.commands.InvalidCommandContextException
co.aikar.commands.IssuerLocaleChangedCallback
co.aikar.commands.IssuerLocaleChangedCallback: void onIssuerLocaleChange(co.aikar.commands.CommandIssuer,java.util.Locale,java.util.Locale)
co.aikar.commands.Locales
co.aikar.commands.Locales: java.util.Locale ENGLISH
co.aikar.commands.Locales: java.util.Locale GERMAN
co.aikar.commands.Locales: java.util.Locale FRENCH
co.aikar.commands.Locales: java.util.Locale JAPANESE
co.aikar.commands.Locales: java.util.Locale ITALIAN
co.aikar.commands.Locales: java.util.Locale KOREAN
co.aikar.commands.Locales: java.util.Locale CHINESE
co.aikar.commands.Locales: java.util.Locale SIMPLIFIED_CHINESE
co.aikar.commands.Locales: java.util.Locale TRADITIONAL_CHINESE
co.aikar.commands.Locales: java.util.Locale SPANISH
co.aikar.commands.Locales: java.util.Locale DUTCH
co.aikar.commands.Locales: java.util.Locale DANISH
co.aikar.commands.Locales: java.util.Locale CZECH
co.aikar.commands.Locales: java.util.Locale GREEK
co.aikar.commands.Locales: java.util.Locale LATIN
co.aikar.commands.Locales: java.util.Locale BULGARIAN
co.aikar.commands.Locales: java.util.Locale AFRIKAANS
co.aikar.commands.Locales: java.util.Locale HINDI
co.aikar.commands.Locales: java.util.Locale HEBREW
co.aikar.commands.Locales: java.util.Locale POLISH
co.aikar.commands.Locales: java.util.Locale PORTUGUESE
co.aikar.commands.Locales: java.util.Locale FINNISH
co.aikar.commands.Locales: java.util.Locale SWEDISH
co.aikar.commands.Locales: java.util.Locale RUSSIAN
co.aikar.commands.Locales: java.util.Locale ROMANIAN
co.aikar.commands.Locales: java.util.Locale VIETNAMESE
co.aikar.commands.Locales: java.util.Locale THAI
co.aikar.commands.Locales: java.util.Locale TURKISH
co.aikar.commands.Locales: java.util.Locale UKRANIAN
co.aikar.commands.Locales: java.util.Locale ARABIC
co.aikar.commands.Locales: java.util.Locale WELSH
co.aikar.commands.Locales: java.util.Locale NORWEGIAN_BOKMAAL
co.aikar.commands.Locales: java.util.Locale NORWEGIAN_NYNORSK
co.aikar.commands.Locales: java.util.Locale HUNGARIAN
co.aikar.commands.Locales: Locales(co.aikar.commands.CommandManager)
co.aikar.commands.Locales: void loadLanguages()
co.aikar.commands.Locales: java.util.Locale getDefaultLocale()
co.aikar.commands.Locales: java.util.Locale setDefaultLocale(java.util.Locale)
co.aikar.commands.Locales: void loadMissingBundles()
co.aikar.commands.Locales: void addMessageBundles(java.lang.String[])
co.aikar.commands.Locales: boolean addMessageBundle(java.lang.String,java.util.Locale)
co.aikar.commands.Locales: boolean addMessageBundle(java.lang.ClassLoader,java.lang.String,java.util.Locale)
co.aikar.commands.Locales: void addMessageStrings(java.util.Locale,java.util.Map)
co.aikar.commands.Locales: void addMessages(java.util.Locale,java.util.Map)
co.aikar.commands.Locales: java.lang.String addMessage(java.util.Locale,co.aikar.locales.MessageKeyProvider,java.lang.String)
co.aikar.commands.Locales: java.lang.String getMessage(co.aikar.commands.CommandIssuer,co.aikar.locales.MessageKeyProvider)
co.aikar.commands.Locales: java.lang.String getOptionalMessage(co.aikar.commands.CommandIssuer,co.aikar.locales.MessageKey)
co.aikar.commands.Locales: java.lang.String replaceI18NStrings(java.lang.String)
co.aikar.commands.Locales: boolean addBundleClassLoader(java.lang.ClassLoader)
co.aikar.commands.LogLevel: co.aikar.commands.LogLevel[] values()
co.aikar.commands.LogLevel: co.aikar.commands.LogLevel valueOf(java.lang.String)
co.aikar.commands.MessageFormatter
co.aikar.commands.MessageFormatter: MessageFormatter(java.lang.Object[])
co.aikar.commands.MessageFormatter: java.lang.Object setColor(int,java.lang.Object)
co.aikar.commands.MessageFormatter: java.lang.Object getColor(int)
co.aikar.commands.MessageFormatter: java.lang.Object getDefaultColor()
co.aikar.commands.MessageFormatter: java.lang.String format(int,java.lang.String)
co.aikar.commands.MessageFormatter: java.lang.String format(java.lang.String)
co.aikar.commands.MessageKeys
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys PERMISSION_DENIED
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys PERMISSION_DENIED_PARAMETER
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys ERROR_GENERIC_LOGGED
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys UNKNOWN_COMMAND
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys INVALID_SYNTAX
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys ERROR_PREFIX
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys ERROR_PERFORMING_COMMAND
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys INFO_MESSAGE
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys PLEASE_SPECIFY_ONE_OF
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys MUST_BE_A_NUMBER
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys MUST_BE_MIN_LENGTH
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys MUST_BE_MAX_LENGTH
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys PLEASE_SPECIFY_AT_LEAST
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys PLEASE_SPECIFY_AT_MOST
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys NOT_ALLOWED_ON_CONSOLE
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys COULD_NOT_FIND_PLAYER
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys NO_COMMAND_MATCHED_SEARCH
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys HELP_PAGE_INFORMATION
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys HELP_NO_RESULTS
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys HELP_HEADER
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys HELP_FORMAT
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys HELP_DETAILED_HEADER
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys HELP_DETAILED_COMMAND_FORMAT
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys HELP_DETAILED_PARAMETER_FORMAT
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys HELP_SEARCH_HEADER
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys[] values()
co.aikar.commands.MessageKeys: co.aikar.commands.MessageKeys valueOf(java.lang.String)
co.aikar.commands.MessageKeys: co.aikar.locales.MessageKey getMessageKey()
co.aikar.commands.MessageType
co.aikar.commands.MessageType: co.aikar.commands.MessageType INFO
co.aikar.commands.MessageType: co.aikar.commands.MessageType SYNTAX
co.aikar.commands.MessageType: co.aikar.commands.MessageType ERROR
co.aikar.commands.MessageType: co.aikar.commands.MessageType HELP
co.aikar.commands.MessageType: MessageType()
co.aikar.commands.MessageType: int hashCode()
co.aikar.commands.MessageType: boolean equals(java.lang.Object)
co.aikar.commands.MinecraftMessageKeys
co.aikar.commands.MinecraftMessageKeys: co.aikar.commands.MinecraftMessageKeys INVALID_WORLD
co.aikar.commands.MinecraftMessageKeys: co.aikar.commands.MinecraftMessageKeys YOU_MUST_BE_HOLDING_ITEM
co.aikar.commands.MinecraftMessageKeys: co.aikar.commands.MinecraftMessageKeys PLAYER_IS_VANISHED_CONFIRM
co.aikar.commands.MinecraftMessageKeys: co.aikar.commands.MinecraftMessageKeys USERNAME_TOO_SHORT
co.aikar.commands.MinecraftMessageKeys: co.aikar.commands.MinecraftMessageKeys IS_NOT_A_VALID_NAME
co.aikar.commands.MinecraftMessageKeys: co.aikar.commands.MinecraftMessageKeys MULTIPLE_PLAYERS_MATCH
co.aikar.commands.MinecraftMessageKeys: co.aikar.commands.MinecraftMessageKeys NO_PLAYER_FOUND_SERVER
co.aikar.commands.MinecraftMessageKeys: co.aikar.commands.MinecraftMessageKeys NO_PLAYER_FOUND_OFFLINE
co.aikar.commands.MinecraftMessageKeys: co.aikar.commands.MinecraftMessageKeys NO_PLAYER_FOUND
co.aikar.commands.MinecraftMessageKeys: co.aikar.commands.MinecraftMessageKeys LOCATION_PLEASE_SPECIFY_WORLD
co.aikar.commands.MinecraftMessageKeys: co.aikar.commands.MinecraftMessageKeys LOCATION_PLEASE_SPECIFY_XYZ
co.aikar.commands.MinecraftMessageKeys: co.aikar.commands.MinecraftMessageKeys LOCATION_CONSOLE_NOT_RELATIVE
co.aikar.commands.MinecraftMessageKeys: co.aikar.commands.MinecraftMessageKeys[] values()
co.aikar.commands.MinecraftMessageKeys: co.aikar.commands.MinecraftMessageKeys valueOf(java.lang.String)
co.aikar.commands.MinecraftMessageKeys: co.aikar.locales.MessageKey getMessageKey()
co.aikar.commands.RegisteredCommand
co.aikar.commands.RegisteredCommand: java.lang.String helpSearchTags
co.aikar.commands.RegisteredCommand: void preCommand()
co.aikar.commands.RegisteredCommand: void postCommand()
co.aikar.commands.RegisteredCommand: java.lang.String getPermission()
co.aikar.commands.RegisteredCommand: java.util.Set getRequiredPermissions()
co.aikar.commands.RegisteredCommand: boolean requiresPermission(java.lang.String)
co.aikar.commands.RegisteredCommand: java.lang.String getPrefSubCommand()
co.aikar.commands.RegisteredCommand: java.lang.String getSyntaxText()
co.aikar.commands.RegisteredCommand: java.lang.String getSyntaxText(co.aikar.commands.CommandIssuer)
co.aikar.commands.RegisteredCommand: java.lang.String getHelpText()
co.aikar.commands.RegisteredCommand: boolean isPrivate()
co.aikar.commands.RegisteredCommand: java.lang.String getCommand()
co.aikar.commands.RegisteredCommand: void addSubcommand(java.lang.String)
co.aikar.commands.RegisteredCommand: void addSubcommands(java.util.Collection)
co.aikar.commands.RegisteredCommand: java.lang.annotation.Annotation getAnnotation(java.lang.Class)
co.aikar.commands.RootCommand
co.aikar.commands.RootCommand: void addChild(co.aikar.commands.BaseCommand)
co.aikar.commands.RootCommand: co.aikar.commands.CommandManager getManager()
co.aikar.commands.RootCommand: com.google.common.collect.SetMultimap getSubCommands()
co.aikar.commands.RootCommand: java.util.List getChildren()
co.aikar.commands.RootCommand: java.lang.String getCommandName()
co.aikar.commands.RootCommand: void addChildShared(java.util.List,com.google.common.collect.SetMultimap,co.aikar.commands.BaseCommand)
co.aikar.commands.RootCommand: java.lang.String getUniquePermission()
co.aikar.commands.RootCommand: boolean hasAnyPermission(co.aikar.commands.CommandIssuer)
co.aikar.commands.RootCommand: co.aikar.commands.BaseCommand execute(co.aikar.commands.CommandIssuer,java.lang.String,java.lang.String[])
co.aikar.commands.RootCommand: java.util.List getTabCompletions(co.aikar.commands.CommandIssuer,java.lang.String,java.lang.String[])
co.aikar.commands.RootCommand: java.util.List getTabCompletions(co.aikar.commands.CommandIssuer,java.lang.String,java.lang.String[],boolean)
co.aikar.commands.RootCommand: java.util.List getTabCompletions(co.aikar.commands.CommandIssuer,java.lang.String,java.lang.String[],boolean,boolean)
co.aikar.commands.RootCommand: co.aikar.commands.RegisteredCommand getDefaultRegisteredCommand()
co.aikar.commands.RootCommand: co.aikar.commands.BaseCommand getDefCommand()
co.aikar.commands.RootCommand: java.lang.String getDescription()
co.aikar.commands.RootCommand: java.lang.String getUsage()
co.aikar.commands.ShowCommandHelp
co.aikar.commands.ShowCommandHelp: ShowCommandHelp()
co.aikar.commands.ShowCommandHelp: ShowCommandHelp(boolean)
co.aikar.commands.ShowCommandHelp: ShowCommandHelp(java.util.List)
co.aikar.commands.UnresolvedDependencyException
co.aikar.commands.UnstableAPI
co.aikar.commands.annotation.CatchAll
co.aikar.commands.annotation.CatchUnknown
co.aikar.commands.annotation.CommandAlias
co.aikar.commands.annotation.CommandAlias: java.lang.String value()
co.aikar.commands.annotation.CommandCompletion
co.aikar.commands.annotation.CommandCompletion: java.lang.String value()
co.aikar.commands.annotation.CommandPermission
co.aikar.commands.annotation.CommandPermission: java.lang.String value()
co.aikar.commands.annotation.Conditions
co.aikar.commands.annotation.Conditions: java.lang.String value()
co.aikar.commands.annotation.Default
co.aikar.commands.annotation.Default: java.lang.String value()
co.aikar.commands.annotation.Dependency
co.aikar.commands.annotation.Dependency: java.lang.String value()
co.aikar.commands.annotation.Description
co.aikar.commands.annotation.Description: java.lang.String value()
co.aikar.commands.annotation.Flags
co.aikar.commands.annotation.Flags: java.lang.String value()
co.aikar.commands.annotation.HelpCommand
co.aikar.commands.annotation.HelpCommand: java.lang.String value()
co.aikar.commands.annotation.HelpSearchTags
co.aikar.commands.annotation.HelpSearchTags: java.lang.String value()
co.aikar.commands.annotation.Name
co.aikar.commands.annotation.Name: java.lang.String value()
co.aikar.commands.annotation.Optional
co.aikar.commands.annotation.PreCommand
co.aikar.commands.annotation.Private
co.aikar.commands.annotation.Single
co.aikar.commands.annotation.Split
co.aikar.commands.annotation.Split: java.lang.String value()
co.aikar.commands.annotation.Subcommand
co.aikar.commands.annotation.Subcommand: java.lang.String value()
co.aikar.commands.annotation.Syntax
co.aikar.commands.annotation.Syntax: java.lang.String value()
co.aikar.commands.annotation.UnknownHandler
co.aikar.commands.annotation.Values
co.aikar.commands.annotation.Values: java.lang.String value()
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: ApacheCommonsExceptionUtil()
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: void addCauseMethodName(java.lang.String)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: void removeCauseMethodName(java.lang.String)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: boolean setCause(java.lang.Throwable,java.lang.Throwable)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: boolean isCauseMethodName(java.lang.String)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: java.lang.Throwable getCause(java.lang.Throwable)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: java.lang.Throwable getCause(java.lang.Throwable,java.lang.String[])
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: java.lang.Throwable getRootCause(java.lang.Throwable)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: boolean isThrowableNested()
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: boolean isNestedThrowable(java.lang.Throwable)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: int getThrowableCount(java.lang.Throwable)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: java.lang.Throwable[] getThrowables(java.lang.Throwable)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: java.util.List getThrowableList(java.lang.Throwable)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: int indexOfThrowable(java.lang.Throwable,java.lang.Class)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: int indexOfThrowable(java.lang.Throwable,java.lang.Class,int)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: int indexOfType(java.lang.Throwable,java.lang.Class)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: int indexOfType(java.lang.Throwable,java.lang.Class,int)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: void removeCommonFrames(java.util.List,java.util.List)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: java.lang.String getFullStackTrace(java.lang.Throwable)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil: java.lang.String getStackTrace(java.lang.Throwable)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil$Nestable
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil$Nestable: java.lang.Throwable getCause()
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil$Nestable: java.lang.String getMessage()
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil$Nestable: java.lang.String getMessage(int)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil$Nestable: java.lang.String[] getMessages()
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil$Nestable: java.lang.Throwable getThrowable(int)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil$Nestable: int getThrowableCount()
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil$Nestable: java.lang.Throwable[] getThrowables()
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil$Nestable: int indexOfThrowable(java.lang.Class)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil$Nestable: int indexOfThrowable(java.lang.Class,int)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil$Nestable: void printStackTrace(java.io.PrintWriter)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil$Nestable: void printStackTrace(java.io.PrintStream)
co.aikar.commands.apachecommonslang.ApacheCommonsExceptionUtil$Nestable: void printPartialStackTrace(java.io.PrintWriter)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String EMPTY
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: int INDEX_NOT_FOUND
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: ApacheCommonsLangUtil()
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.Object[] clone(java.lang.Object[])
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.Object[] addAll(java.lang.Object[],java.lang.Object[])
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String capitalizeFully(java.lang.String)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String capitalizeFully(java.lang.String,char[])
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String capitalize(java.lang.String)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String capitalize(java.lang.String,char[])
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: boolean isDelimiter(char,char[])
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(java.lang.Object[])
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(java.lang.Object[],char)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(long[],char)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(int[],char)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(short[],char)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(byte[],char)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(char[],char)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(float[],char)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(double[],char)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(java.lang.Object[],char,int,int)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(long[],char,int,int)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(int[],char,int,int)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(byte[],char,int,int)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(short[],char,int,int)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(char[],char,int,int)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(double[],char,int,int)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(float[],char,int,int)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(java.lang.Object[],java.lang.String)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(java.lang.Object[],java.lang.String,int,int)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(java.util.Iterator,char)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(java.util.Iterator,java.lang.String)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(java.lang.Iterable,char)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: java.lang.String join(java.lang.Iterable,java.lang.String)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: boolean isNumeric(java.lang.CharSequence)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: int indexOf(java.lang.Object[],java.lang.Object)
co.aikar.commands.apachecommonslang.ApacheCommonsLangUtil: int indexOf(java.lang.Object[],java.lang.Object,int)
co.aikar.commands.bukkit.contexts.OnlinePlayer
co.aikar.commands.bukkit.contexts.OnlinePlayer: org.bukkit.entity.Player player
co.aikar.commands.bukkit.contexts.OnlinePlayer: OnlinePlayer(org.bukkit.entity.Player)
co.aikar.commands.bukkit.contexts.OnlinePlayer: org.bukkit.entity.Player getPlayer()
co.aikar.commands.bukkit.contexts.OnlinePlayer: boolean equals(java.lang.Object)
co.aikar.commands.bukkit.contexts.OnlinePlayer: int hashCode()
co.aikar.commands.bukkit.contexts.OnlinePlayer: java.lang.String toString()
co.aikar.commands.contexts.ContextResolver
co.aikar.commands.contexts.ContextResolver: java.lang.Object getContext(co.aikar.commands.CommandExecutionContext)
co.aikar.commands.contexts.IssuerAwareContextResolver
co.aikar.commands.contexts.IssuerOnlyContextResolver
co.aikar.commands.contexts.OnlinePlayer
co.aikar.commands.contexts.OnlinePlayer: OnlinePlayer(org.bukkit.entity.Player)
co.aikar.commands.contexts.OptionalContextResolver
co.aikar.commands.contexts.SenderAwareContextResolver
co.aikar.commands.lib.expiringmap.EntryLoader
co.aikar.commands.lib.expiringmap.EntryLoader: java.lang.Object load(java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpirationListener
co.aikar.commands.lib.expiringmap.ExpirationListener: void expired(java.lang.Object,java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpirationPolicy
co.aikar.commands.lib.expiringmap.ExpirationPolicy: co.aikar.commands.lib.expiringmap.ExpirationPolicy ACCESSED
co.aikar.commands.lib.expiringmap.ExpirationPolicy: co.aikar.commands.lib.expiringmap.ExpirationPolicy CREATED
co.aikar.commands.lib.expiringmap.ExpirationPolicy: co.aikar.commands.lib.expiringmap.ExpirationPolicy[] values()
co.aikar.commands.lib.expiringmap.ExpirationPolicy: co.aikar.commands.lib.expiringmap.ExpirationPolicy valueOf(java.lang.String)
co.aikar.commands.lib.expiringmap.ExpiringEntryLoader
co.aikar.commands.lib.expiringmap.ExpiringEntryLoader: co.aikar.commands.lib.expiringmap.ExpiringValue load(java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringMap
co.aikar.commands.lib.expiringmap.ExpiringMap: void setThreadFactory(java.util.concurrent.ThreadFactory)
co.aikar.commands.lib.expiringmap.ExpiringMap: co.aikar.commands.lib.expiringmap.ExpiringMap$Builder builder()
co.aikar.commands.lib.expiringmap.ExpiringMap: co.aikar.commands.lib.expiringmap.ExpiringMap create()
co.aikar.commands.lib.expiringmap.ExpiringMap: void addExpirationListener(co.aikar.commands.lib.expiringmap.ExpirationListener)
co.aikar.commands.lib.expiringmap.ExpiringMap: void addAsyncExpirationListener(co.aikar.commands.lib.expiringmap.ExpirationListener)
co.aikar.commands.lib.expiringmap.ExpiringMap: void clear()
co.aikar.commands.lib.expiringmap.ExpiringMap: boolean containsKey(java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringMap: boolean containsValue(java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringMap: java.util.Set entrySet()
co.aikar.commands.lib.expiringmap.ExpiringMap: boolean equals(java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringMap: java.lang.Object get(java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringMap: long getExpiration()
co.aikar.commands.lib.expiringmap.ExpiringMap: long getExpiration(java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringMap: co.aikar.commands.lib.expiringmap.ExpirationPolicy getExpirationPolicy(java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringMap: long getExpectedExpiration(java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringMap: int getMaxSize()
co.aikar.commands.lib.expiringmap.ExpiringMap: int hashCode()
co.aikar.commands.lib.expiringmap.ExpiringMap: boolean isEmpty()
co.aikar.commands.lib.expiringmap.ExpiringMap: java.util.Set keySet()
co.aikar.commands.lib.expiringmap.ExpiringMap: java.lang.Object put(java.lang.Object,java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringMap: java.lang.Object put(java.lang.Object,java.lang.Object,co.aikar.commands.lib.expiringmap.ExpirationPolicy)
co.aikar.commands.lib.expiringmap.ExpiringMap: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)
co.aikar.commands.lib.expiringmap.ExpiringMap: java.lang.Object put(java.lang.Object,java.lang.Object,co.aikar.commands.lib.expiringmap.ExpirationPolicy,long,java.util.concurrent.TimeUnit)
co.aikar.commands.lib.expiringmap.ExpiringMap: void putAll(java.util.Map)
co.aikar.commands.lib.expiringmap.ExpiringMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringMap: java.lang.Object remove(java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringMap: boolean remove(java.lang.Object,java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringMap: java.lang.Object replace(java.lang.Object,java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringMap: void removeExpirationListener(co.aikar.commands.lib.expiringmap.ExpirationListener)
co.aikar.commands.lib.expiringmap.ExpiringMap: void removeAsyncExpirationListener(co.aikar.commands.lib.expiringmap.ExpirationListener)
co.aikar.commands.lib.expiringmap.ExpiringMap: void resetExpiration(java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringMap: void setExpiration(java.lang.Object,long,java.util.concurrent.TimeUnit)
co.aikar.commands.lib.expiringmap.ExpiringMap: void setExpiration(long,java.util.concurrent.TimeUnit)
co.aikar.commands.lib.expiringmap.ExpiringMap: void setExpirationPolicy(co.aikar.commands.lib.expiringmap.ExpirationPolicy)
co.aikar.commands.lib.expiringmap.ExpiringMap: void setExpirationPolicy(java.lang.Object,co.aikar.commands.lib.expiringmap.ExpirationPolicy)
co.aikar.commands.lib.expiringmap.ExpiringMap: void setMaxSize(int)
co.aikar.commands.lib.expiringmap.ExpiringMap: int size()
co.aikar.commands.lib.expiringmap.ExpiringMap: java.lang.String toString()
co.aikar.commands.lib.expiringmap.ExpiringMap: java.util.Collection values()
co.aikar.commands.lib.expiringmap.ExpiringMap$Builder
co.aikar.commands.lib.expiringmap.ExpiringMap$Builder: co.aikar.commands.lib.expiringmap.ExpiringMap build()
co.aikar.commands.lib.expiringmap.ExpiringMap$Builder: co.aikar.commands.lib.expiringmap.ExpiringMap$Builder expiration(long,java.util.concurrent.TimeUnit)
co.aikar.commands.lib.expiringmap.ExpiringMap$Builder: co.aikar.commands.lib.expiringmap.ExpiringMap$Builder maxSize(int)
co.aikar.commands.lib.expiringmap.ExpiringMap$Builder: co.aikar.commands.lib.expiringmap.ExpiringMap$Builder entryLoader(co.aikar.commands.lib.expiringmap.EntryLoader)
co.aikar.commands.lib.expiringmap.ExpiringMap$Builder: co.aikar.commands.lib.expiringmap.ExpiringMap$Builder expiringEntryLoader(co.aikar.commands.lib.expiringmap.ExpiringEntryLoader)
co.aikar.commands.lib.expiringmap.ExpiringMap$Builder: co.aikar.commands.lib.expiringmap.ExpiringMap$Builder expirationListener(co.aikar.commands.lib.expiringmap.ExpirationListener)
co.aikar.commands.lib.expiringmap.ExpiringMap$Builder: co.aikar.commands.lib.expiringmap.ExpiringMap$Builder expirationListeners(java.util.List)
co.aikar.commands.lib.expiringmap.ExpiringMap$Builder: co.aikar.commands.lib.expiringmap.ExpiringMap$Builder asyncExpirationListener(co.aikar.commands.lib.expiringmap.ExpirationListener)
co.aikar.commands.lib.expiringmap.ExpiringMap$Builder: co.aikar.commands.lib.expiringmap.ExpiringMap$Builder asyncExpirationListeners(java.util.List)
co.aikar.commands.lib.expiringmap.ExpiringMap$Builder: co.aikar.commands.lib.expiringmap.ExpiringMap$Builder expirationPolicy(co.aikar.commands.lib.expiringmap.ExpirationPolicy)
co.aikar.commands.lib.expiringmap.ExpiringMap$Builder: co.aikar.commands.lib.expiringmap.ExpiringMap$Builder variableExpiration()
co.aikar.commands.lib.expiringmap.ExpiringMap$EntryLinkedHashMap$AbstractHashIterator: boolean hasNext()
co.aikar.commands.lib.expiringmap.ExpiringMap$EntryLinkedHashMap$AbstractHashIterator: co.aikar.commands.lib.expiringmap.ExpiringMap$ExpiringEntry getNext()
co.aikar.commands.lib.expiringmap.ExpiringMap$EntryLinkedHashMap$AbstractHashIterator: void remove()
co.aikar.commands.lib.expiringmap.ExpiringMap$EntryLinkedHashMap$EntryIterator
co.aikar.commands.lib.expiringmap.ExpiringMap$EntryLinkedHashMap$EntryIterator: ExpiringMap$EntryLinkedHashMap$EntryIterator(co.aikar.commands.lib.expiringmap.ExpiringMap$EntryLinkedHashMap)
co.aikar.commands.lib.expiringmap.ExpiringMap$EntryLinkedHashMap$EntryIterator: java.util.Map$Entry next()
co.aikar.commands.lib.expiringmap.ExpiringMap$EntryLinkedHashMap$EntryIterator: void remove()
co.aikar.commands.lib.expiringmap.ExpiringMap$EntryLinkedHashMap$EntryIterator: co.aikar.commands.lib.expiringmap.ExpiringMap$ExpiringEntry getNext()
co.aikar.commands.lib.expiringmap.ExpiringMap$EntryLinkedHashMap$EntryIterator: boolean hasNext()
co.aikar.commands.lib.expiringmap.ExpiringMap$EntryLinkedHashMap$EntryIterator: java.lang.Object next()
co.aikar.commands.lib.expiringmap.ExpiringValue
co.aikar.commands.lib.expiringmap.ExpiringValue: ExpiringValue(java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringValue: ExpiringValue(java.lang.Object,co.aikar.commands.lib.expiringmap.ExpirationPolicy)
co.aikar.commands.lib.expiringmap.ExpiringValue: ExpiringValue(java.lang.Object,long,java.util.concurrent.TimeUnit)
co.aikar.commands.lib.expiringmap.ExpiringValue: ExpiringValue(java.lang.Object,co.aikar.commands.lib.expiringmap.ExpirationPolicy,long,java.util.concurrent.TimeUnit)
co.aikar.commands.lib.expiringmap.ExpiringValue: java.lang.Object getValue()
co.aikar.commands.lib.expiringmap.ExpiringValue: co.aikar.commands.lib.expiringmap.ExpirationPolicy getExpirationPolicy()
co.aikar.commands.lib.expiringmap.ExpiringValue: long getDuration()
co.aikar.commands.lib.expiringmap.ExpiringValue: java.util.concurrent.TimeUnit getTimeUnit()
co.aikar.commands.lib.expiringmap.ExpiringValue: int hashCode()
co.aikar.commands.lib.expiringmap.ExpiringValue: boolean equals(java.lang.Object)
co.aikar.commands.lib.expiringmap.ExpiringValue: java.lang.String toString()
co.aikar.commands.lib.expiringmap.internal.Assert
co.aikar.commands.lib.expiringmap.internal.Assert: java.lang.Object notNull(java.lang.Object,java.lang.String)
co.aikar.commands.lib.expiringmap.internal.Assert: void operation(boolean,java.lang.String)
co.aikar.commands.lib.expiringmap.internal.Assert: void state(boolean,java.lang.String,java.lang.Object[])
co.aikar.commands.lib.expiringmap.internal.Assert: void element(java.lang.Object,java.lang.Object)
co.aikar.commands.lib.expiringmap.internal.NamedThreadFactory
co.aikar.commands.lib.expiringmap.internal.NamedThreadFactory: NamedThreadFactory(java.lang.String)
co.aikar.commands.lib.expiringmap.internal.NamedThreadFactory: java.lang.Thread newThread(java.lang.Runnable)
co.aikar.commands.lib.timings.MCTiming
co.aikar.commands.lib.timings.MCTiming: MCTiming()
co.aikar.commands.lib.timings.MCTiming: co.aikar.commands.lib.timings.MCTiming startTiming()
co.aikar.commands.lib.timings.MCTiming: void stopTiming()
co.aikar.commands.lib.timings.MCTiming: void close()
co.aikar.commands.lib.timings.TimingManager
co.aikar.commands.lib.timings.TimingManager: co.aikar.commands.lib.timings.TimingManager of(org.bukkit.plugin.Plugin)
co.aikar.commands.lib.timings.TimingManager: co.aikar.commands.lib.timings.MCTiming ofStart(java.lang.String)
co.aikar.commands.lib.timings.TimingManager: co.aikar.commands.lib.timings.MCTiming ofStart(java.lang.String,co.aikar.commands.lib.timings.MCTiming)
co.aikar.commands.lib.timings.TimingManager: co.aikar.commands.lib.timings.MCTiming of(java.lang.String)
co.aikar.commands.lib.timings.TimingManager: co.aikar.commands.lib.timings.MCTiming of(java.lang.String,co.aikar.commands.lib.timings.MCTiming)
co.aikar.commands.lib.timings.TimingType: co.aikar.commands.lib.timings.TimingType[] values()
co.aikar.commands.lib.timings.TimingType: co.aikar.commands.lib.timings.TimingType valueOf(java.lang.String)
co.aikar.commands.lib.util.DelegatingMap
co.aikar.commands.lib.util.DelegatingMap: java.util.Map delegate(boolean)
co.aikar.commands.lib.util.DelegatingMap: int size()
co.aikar.commands.lib.util.DelegatingMap: boolean isEmpty()
co.aikar.commands.lib.util.DelegatingMap: boolean containsKey(java.lang.Object)
co.aikar.commands.lib.util.DelegatingMap: boolean containsValue(java.lang.Object)
co.aikar.commands.lib.util.DelegatingMap: java.lang.Object get(java.lang.Object)
co.aikar.commands.lib.util.DelegatingMap: java.lang.Object put(java.lang.Object,java.lang.Object)
co.aikar.commands.lib.util.DelegatingMap: java.lang.Object remove(java.lang.Object)
co.aikar.commands.lib.util.DelegatingMap: void putAll(java.util.Map)
co.aikar.commands.lib.util.DelegatingMap: void clear()
co.aikar.commands.lib.util.DelegatingMap: java.util.Set keySet()
co.aikar.commands.lib.util.DelegatingMap: java.util.Collection values()
co.aikar.commands.lib.util.DelegatingMap: java.util.Set entrySet()
co.aikar.commands.lib.util.DelegatingMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)
co.aikar.commands.lib.util.DelegatingMap: void forEach(java.util.function.BiConsumer)
co.aikar.commands.lib.util.DelegatingMap: void replaceAll(java.util.function.BiFunction)
co.aikar.commands.lib.util.DelegatingMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
co.aikar.commands.lib.util.DelegatingMap: boolean remove(java.lang.Object,java.lang.Object)
co.aikar.commands.lib.util.DelegatingMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)
co.aikar.commands.lib.util.DelegatingMap: java.lang.Object replace(java.lang.Object,java.lang.Object)
co.aikar.commands.lib.util.DelegatingMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)
co.aikar.commands.lib.util.DelegatingMap: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)
co.aikar.commands.lib.util.DelegatingMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)
co.aikar.commands.lib.util.DelegatingMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)
co.aikar.commands.lib.util.Table
co.aikar.commands.lib.util.Table: Table()
co.aikar.commands.lib.util.Table: Table(java.util.function.Supplier)
co.aikar.commands.lib.util.Table: Table(java.util.Map,java.util.function.Supplier)
co.aikar.commands.lib.util.Table: Table(java.util.Map,java.util.function.Function)
co.aikar.commands.lib.util.Table: java.lang.Object get(java.lang.Object,java.lang.Object)
co.aikar.commands.lib.util.Table: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)
co.aikar.commands.lib.util.Table: boolean containsKey(java.lang.Object,java.lang.Object)
co.aikar.commands.lib.util.Table: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)
co.aikar.commands.lib.util.Table: void forEach(co.aikar.commands.lib.util.Table$TableConsumer)
co.aikar.commands.lib.util.Table: void forEach(co.aikar.commands.lib.util.Table$TablePredicate)
co.aikar.commands.lib.util.Table: void removeIf(co.aikar.commands.lib.util.Table$TablePredicate)
co.aikar.commands.lib.util.Table: java.util.stream.Stream stream()
co.aikar.commands.lib.util.Table: java.util.stream.Stream stream(boolean)
co.aikar.commands.lib.util.Table: java.util.Iterator iterator()
co.aikar.commands.lib.util.Table: void replaceAll(co.aikar.commands.lib.util.Table$TableFunction)
co.aikar.commands.lib.util.Table: java.lang.Object remove(java.lang.Object,java.lang.Object)
co.aikar.commands.lib.util.Table: java.lang.Object replace(java.lang.Object,java.lang.Object,java.lang.Object)
co.aikar.commands.lib.util.Table: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
co.aikar.commands.lib.util.Table: java.lang.Object computeIfAbsent(java.lang.Object,java.lang.Object,java.util.function.BiFunction)
co.aikar.commands.lib.util.Table: java.lang.Object computeIfPresent(java.lang.Object,java.lang.Object,co.aikar.commands.lib.util.Table$TableFunction)
co.aikar.commands.lib.util.Table: java.lang.Object compute(java.lang.Object,java.lang.Object,co.aikar.commands.lib.util.Table$TableFunction)
co.aikar.commands.lib.util.Table: java.lang.Object merge(java.lang.Object,java.lang.Object,java.lang.Object,co.aikar.commands.lib.util.Table$TableFunction)
co.aikar.commands.lib.util.Table: java.util.Map row(java.lang.Object)
co.aikar.commands.lib.util.Table$Entry
co.aikar.commands.lib.util.Table$Entry: java.lang.Object getRow()
co.aikar.commands.lib.util.Table$Entry: java.lang.Object getCol()
co.aikar.commands.lib.util.Table$Entry: java.lang.Object getValue()
co.aikar.commands.lib.util.Table$Entry: java.lang.Object setValue(java.lang.Object)
co.aikar.commands.lib.util.Table$TableConsumer
co.aikar.commands.lib.util.Table$TableConsumer: void accept(java.lang.Object,java.lang.Object,java.lang.Object)
co.aikar.commands.lib.util.Table$TableFunction
co.aikar.commands.lib.util.Table$TableFunction: java.lang.Object compose(java.lang.Object,java.lang.Object,java.lang.Object)
co.aikar.commands.lib.util.Table$TablePredicate
co.aikar.commands.lib.util.Table$TablePredicate: boolean test(java.lang.Object,java.lang.Object,java.lang.Object)
co.aikar.commands.processors.ConditionsProcessor
co.aikar.commands.processors.ConditionsProcessor: ConditionsProcessor()
co.aikar.commands.processors.ConditionsProcessor: void onPreComand(co.aikar.commands.CommandOperationContext)
co.aikar.commands.processors.ConditionsProcessor: void onPostContextResolution(co.aikar.commands.CommandExecutionContext,java.lang.Object)
com.github.benmanes.caffeine.cache.AsyncCache
com.github.benmanes.caffeine.cache.AsyncCache: java.util.concurrent.CompletableFuture getIfPresent(java.lang.Object)
com.github.benmanes.caffeine.cache.AsyncCache: java.util.concurrent.CompletableFuture get(java.lang.Object,java.util.function.Function)
com.github.benmanes.caffeine.cache.AsyncCache: java.util.concurrent.CompletableFuture get(java.lang.Object,java.util.function.BiFunction)
com.github.benmanes.caffeine.cache.AsyncCache: java.util.concurrent.CompletableFuture getAll(java.lang.Iterable,java.util.function.Function)
com.github.benmanes.caffeine.cache.AsyncCache: java.util.concurrent.CompletableFuture getAll(java.lang.Iterable,java.util.function.BiFunction)
com.github.benmanes.caffeine.cache.AsyncCache: void put(java.lang.Object,java.util.concurrent.CompletableFuture)
com.github.benmanes.caffeine.cache.AsyncCache: java.util.concurrent.ConcurrentMap asMap()
com.github.benmanes.caffeine.cache.AsyncCache: com.github.benmanes.caffeine.cache.Cache synchronous()
com.github.benmanes.caffeine.cache.AsyncCacheLoader
com.github.benmanes.caffeine.cache.AsyncCacheLoader: java.util.concurrent.CompletableFuture asyncLoad(java.lang.Object,java.util.concurrent.Executor)
com.github.benmanes.caffeine.cache.AsyncCacheLoader: java.util.concurrent.CompletableFuture asyncLoadAll(java.util.Set,java.util.concurrent.Executor)
com.github.benmanes.caffeine.cache.AsyncCacheLoader: java.util.concurrent.CompletableFuture asyncReload(java.lang.Object,java.lang.Object,java.util.concurrent.Executor)
com.github.benmanes.caffeine.cache.AsyncCacheLoader: com.github.benmanes.caffeine.cache.AsyncCacheLoader bulk(java.util.function.Function)
com.github.benmanes.caffeine.cache.AsyncCacheLoader: com.github.benmanes.caffeine.cache.AsyncCacheLoader bulk(java.util.function.BiFunction)
com.github.benmanes.caffeine.cache.AsyncLoadingCache
com.github.benmanes.caffeine.cache.AsyncLoadingCache: java.util.concurrent.CompletableFuture get(java.lang.Object)
com.github.benmanes.caffeine.cache.AsyncLoadingCache: java.util.concurrent.CompletableFuture getAll(java.lang.Iterable)
com.github.benmanes.caffeine.cache.AsyncLoadingCache: com.github.benmanes.caffeine.cache.LoadingCache synchronous()
com.github.benmanes.caffeine.cache.AsyncLoadingCache: com.github.benmanes.caffeine.cache.Cache synchronous()
com.github.benmanes.caffeine.cache.Cache
com.github.benmanes.caffeine.cache.Cache: java.lang.Object getIfPresent(java.lang.Object)
com.github.benmanes.caffeine.cache.Cache: java.lang.Object get(java.lang.Object,java.util.function.Function)
com.github.benmanes.caffeine.cache.Cache: java.util.Map getAllPresent(java.lang.Iterable)
com.github.benmanes.caffeine.cache.Cache: java.util.Map getAll(java.lang.Iterable,java.util.function.Function)
com.github.benmanes.caffeine.cache.Cache: void put(java.lang.Object,java.lang.Object)
com.github.benmanes.caffeine.cache.Cache: void putAll(java.util.Map)
com.github.benmanes.caffeine.cache.Cache: void invalidate(java.lang.Object)
com.github.benmanes.caffeine.cache.Cache: void invalidateAll(java.lang.Iterable)
com.github.benmanes.caffeine.cache.Cache: void invalidateAll()
com.github.benmanes.caffeine.cache.Cache: long estimatedSize()
com.github.benmanes.caffeine.cache.Cache: com.github.benmanes.caffeine.cache.stats.CacheStats stats()
com.github.benmanes.caffeine.cache.Cache: java.util.concurrent.ConcurrentMap asMap()
com.github.benmanes.caffeine.cache.Cache: void cleanUp()
com.github.benmanes.caffeine.cache.Cache: com.github.benmanes.caffeine.cache.Policy policy()
com.github.benmanes.caffeine.cache.CacheLoader
com.github.benmanes.caffeine.cache.CacheLoader: java.lang.Object load(java.lang.Object)
com.github.benmanes.caffeine.cache.CacheLoader: java.util.Map loadAll(java.util.Set)
com.github.benmanes.caffeine.cache.CacheLoader: java.util.concurrent.CompletableFuture asyncLoad(java.lang.Object,java.util.concurrent.Executor)
com.github.benmanes.caffeine.cache.CacheLoader: java.util.concurrent.CompletableFuture asyncLoadAll(java.util.Set,java.util.concurrent.Executor)
com.github.benmanes.caffeine.cache.CacheLoader: java.lang.Object reload(java.lang.Object,java.lang.Object)
com.github.benmanes.caffeine.cache.CacheLoader: java.util.concurrent.CompletableFuture asyncReload(java.lang.Object,java.lang.Object,java.util.concurrent.Executor)
com.github.benmanes.caffeine.cache.CacheLoader: com.github.benmanes.caffeine.cache.CacheLoader bulk(java.util.function.Function)
com.github.benmanes.caffeine.cache.Caffeine
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine newBuilder()
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine from(com.github.benmanes.caffeine.cache.CaffeineSpec)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine from(java.lang.String)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine initialCapacity(int)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine executor(java.util.concurrent.Executor)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine scheduler(com.github.benmanes.caffeine.cache.Scheduler)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine maximumSize(long)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine maximumWeight(long)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine weigher(com.github.benmanes.caffeine.cache.Weigher)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine weakKeys()
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine weakValues()
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine softValues()
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine expireAfterWrite(java.time.Duration)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine expireAfterWrite(long,java.util.concurrent.TimeUnit)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine expireAfterAccess(java.time.Duration)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine expireAfterAccess(long,java.util.concurrent.TimeUnit)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine expireAfter(com.github.benmanes.caffeine.cache.Expiry)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine refreshAfterWrite(java.time.Duration)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine refreshAfterWrite(long,java.util.concurrent.TimeUnit)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine ticker(com.github.benmanes.caffeine.cache.Ticker)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine evictionListener(com.github.benmanes.caffeine.cache.RemovalListener)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine removalListener(com.github.benmanes.caffeine.cache.RemovalListener)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine recordStats()
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Caffeine recordStats(java.util.function.Supplier)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.Cache build()
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.LoadingCache build(com.github.benmanes.caffeine.cache.CacheLoader)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.AsyncCache buildAsync()
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.AsyncLoadingCache buildAsync(com.github.benmanes.caffeine.cache.CacheLoader)
com.github.benmanes.caffeine.cache.Caffeine: com.github.benmanes.caffeine.cache.AsyncLoadingCache buildAsync(com.github.benmanes.caffeine.cache.AsyncCacheLoader)
com.github.benmanes.caffeine.cache.Caffeine: java.lang.String toString()
com.github.benmanes.caffeine.cache.Caffeine$Strength: com.github.benmanes.caffeine.cache.Caffeine$Strength[] values()
com.github.benmanes.caffeine.cache.Caffeine$Strength: com.github.benmanes.caffeine.cache.Caffeine$Strength valueOf(java.lang.String)
com.github.benmanes.caffeine.cache.CaffeineSpec
com.github.benmanes.caffeine.cache.CaffeineSpec: com.github.benmanes.caffeine.cache.CaffeineSpec parse(java.lang.String)
com.github.benmanes.caffeine.cache.CaffeineSpec: boolean equals(java.lang.Object)
com.github.benmanes.caffeine.cache.CaffeineSpec: int hashCode()
com.github.benmanes.caffeine.cache.CaffeineSpec: java.lang.String toParsableString()
com.github.benmanes.caffeine.cache.CaffeineSpec: java.lang.String toString()
com.github.benmanes.caffeine.cache.DisabledBuffer: com.github.benmanes.caffeine.cache.DisabledBuffer[] values()
com.github.benmanes.caffeine.cache.DisabledBuffer: com.github.benmanes.caffeine.cache.DisabledBuffer valueOf(java.lang.String)
com.github.benmanes.caffeine.cache.DisabledFuture: com.github.benmanes.caffeine.cache.DisabledFuture[] values()
com.github.benmanes.caffeine.cache.DisabledFuture: com.github.benmanes.caffeine.cache.DisabledFuture valueOf(java.lang.String)
com.github.benmanes.caffeine.cache.DisabledScheduler: com.github.benmanes.caffeine.cache.DisabledScheduler[] values()
com.github.benmanes.caffeine.cache.DisabledScheduler: com.github.benmanes.caffeine.cache.DisabledScheduler valueOf(java.lang.String)
com.github.benmanes.caffeine.cache.DisabledTicker: com.github.benmanes.caffeine.cache.DisabledTicker[] values()
com.github.benmanes.caffeine.cache.DisabledTicker: com.github.benmanes.caffeine.cache.DisabledTicker valueOf(java.lang.String)
com.github.benmanes.caffeine.cache.Expiry
com.github.benmanes.caffeine.cache.Expiry: long expireAfterCreate(java.lang.Object,java.lang.Object,long)
com.github.benmanes.caffeine.cache.Expiry: long expireAfterUpdate(java.lang.Object,java.lang.Object,long,long)
com.github.benmanes.caffeine.cache.Expiry: long expireAfterRead(java.lang.Object,java.lang.Object,long,long)
com.github.benmanes.caffeine.cache.Interner
com.github.benmanes.caffeine.cache.Interner: java.lang.Object intern(java.lang.Object)
com.github.benmanes.caffeine.cache.Interner: com.github.benmanes.caffeine.cache.Interner newStrongInterner()
com.github.benmanes.caffeine.cache.Interner: com.github.benmanes.caffeine.cache.Interner newWeakInterner()
com.github.benmanes.caffeine.cache.LinkedDeque$PeekingIterator
com.github.benmanes.caffeine.cache.LinkedDeque$PeekingIterator: java.lang.Object peek()
com.github.benmanes.caffeine.cache.LinkedDeque$PeekingIterator: com.github.benmanes.caffeine.cache.LinkedDeque$PeekingIterator concat(com.github.benmanes.caffeine.cache.LinkedDeque$PeekingIterator,com.github.benmanes.caffeine.cache.LinkedDeque$PeekingIterator)
com.github.benmanes.caffeine.cache.LinkedDeque$PeekingIterator: com.github.benmanes.caffeine.cache.LinkedDeque$PeekingIterator comparing(com.github.benmanes.caffeine.cache.LinkedDeque$PeekingIterator,com.github.benmanes.caffeine.cache.LinkedDeque$PeekingIterator,java.util.Comparator)
com.github.benmanes.caffeine.cache.LoadingCache
com.github.benmanes.caffeine.cache.LoadingCache: java.lang.Object get(java.lang.Object)
com.github.benmanes.caffeine.cache.LoadingCache: java.util.Map getAll(java.lang.Iterable)
com.github.benmanes.caffeine.cache.LoadingCache: java.util.concurrent.CompletableFuture refresh(java.lang.Object)
com.github.benmanes.caffeine.cache.LoadingCache: java.util.concurrent.CompletableFuture refreshAll(java.lang.Iterable)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView: LocalAsyncCache$AbstractCacheView()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView: java.lang.Object getIfPresent(java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView: java.util.Map getAllPresent(java.lang.Iterable)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView: java.lang.Object get(java.lang.Object,java.util.function.Function)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView: java.util.Map getAll(java.lang.Iterable,java.util.function.Function)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView: void put(java.lang.Object,java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView: void putAll(java.util.Map)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView: void invalidate(java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView: void invalidateAll(java.lang.Iterable)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView: void invalidateAll()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView: long estimatedSize()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView: com.github.benmanes.caffeine.cache.stats.CacheStats stats()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView: void cleanUp()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView: com.github.benmanes.caffeine.cache.Policy policy()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AbstractCacheView: java.util.concurrent.ConcurrentMap asMap()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: boolean isEmpty()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: int size()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: void clear()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: boolean containsKey(java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: boolean containsValue(java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: java.lang.Object get(java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: void putAll(java.util.Map)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: java.lang.Object put(java.lang.Object,java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: java.lang.Object remove(java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: boolean remove(java.lang.Object,java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: java.lang.Object replace(java.lang.Object,java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: java.util.Set keySet()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: java.util.Collection values()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: java.util.Set entrySet()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: boolean equals(java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: int hashCode()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsMapView: java.lang.String toString()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: boolean isEmpty()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: int size()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: void clear()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: boolean containsKey(java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: boolean containsValue(java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.util.concurrent.CompletableFuture get(java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.util.concurrent.CompletableFuture putIfAbsent(java.lang.Object,java.util.concurrent.CompletableFuture)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.util.concurrent.CompletableFuture put(java.lang.Object,java.util.concurrent.CompletableFuture)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: void putAll(java.util.Map)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.util.concurrent.CompletableFuture replace(java.lang.Object,java.util.concurrent.CompletableFuture)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: boolean replace(java.lang.Object,java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.util.concurrent.CompletableFuture remove(java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: boolean remove(java.lang.Object,java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.util.concurrent.CompletableFuture computeIfAbsent(java.lang.Object,java.util.function.Function)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.util.concurrent.CompletableFuture computeIfPresent(java.lang.Object,java.util.function.BiFunction)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.util.concurrent.CompletableFuture compute(java.lang.Object,java.util.function.BiFunction)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.util.concurrent.CompletableFuture merge(java.lang.Object,java.util.concurrent.CompletableFuture,java.util.function.BiFunction)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: void forEach(java.util.function.BiConsumer)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.util.Set keySet()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.util.Collection values()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.util.Set entrySet()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: boolean equals(java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: int hashCode()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.lang.String toString()
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.lang.Object replace(java.lang.Object,java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.lang.Object remove(java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.lang.Object put(java.lang.Object,java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncAsMapView: java.lang.Object get(java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncBulkCompleter
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncBulkCompleter: void accept(java.util.Map,java.lang.Throwable)
com.github.benmanes.caffeine.cache.LocalAsyncCache$AsyncBulkCompleter: void accept(java.lang.Object,java.lang.Object)
com.github.benmanes.caffeine.cache.LocalAsyncCache$CacheView
com.github.benmanes.caffeine.cache.NodeFactory$DeadStrongKey
com.github.benmanes.caffeine.cache.NodeFactory$DeadStrongKey: NodeFactory$DeadStrongKey()
com.github.benmanes.caffeine.cache.NodeFactory$DeadWeakKey
com.github.benmanes.caffeine.cache.NodeFactory$DeadWeakKey: java.lang.String toString()
com.github.benmanes.caffeine.cache.NodeFactory$DeadWeakKey: int hashCode()
com.github.benmanes.caffeine.cache.NodeFactory$DeadWeakKey: boolean equals(java.lang.Object)
com.github.benmanes.caffeine.cache.NodeFactory$DeadWeakKey: java.lang.Object getKeyReference()
com.github.benmanes.caffeine.cache.NodeFactory$RetiredStrongKey
com.github.benmanes.caffeine.cache.NodeFactory$RetiredStrongKey: NodeFactory$RetiredStrongKey()
com.github.benmanes.caffeine.cache.NodeFactory$RetiredWeakKey
com.github.benmanes.caffeine.cache.NodeFactory$RetiredWeakKey: java.lang.String toString()
com.github.benmanes.caffeine.cache.NodeFactory$RetiredWeakKey: int hashCode()
com.github.benmanes.caffeine.cache.NodeFactory$RetiredWeakKey: boolean equals(java.lang.Object)
com.github.benmanes.caffeine.cache.NodeFactory$RetiredWeakKey: java.lang.Object getKeyReference()
com.github.benmanes.caffeine.cache.Policy
com.github.benmanes.caffeine.cache.Policy: boolean isRecordingStats()
com.github.benmanes.caffeine.cache.Policy: java.lang.Object getIfPresentQuietly(java.lang.Object)
com.github.benmanes.caffeine.cache.Policy: com.github.benmanes.caffeine.cache.Policy$CacheEntry getEntryIfPresentQuietly(java.lang.Object)
com.github.benmanes.caffeine.cache.Policy: java.util.Map refreshes()
com.github.benmanes.caffeine.cache.Policy: java.util.Optional eviction()
com.github.benmanes.caffeine.cache.Policy: java.util.Optional expireAfterAccess()
com.github.benmanes.caffeine.cache.Policy: java.util.Optional expireAfterWrite()
com.github.benmanes.caffeine.cache.Policy: java.util.Optional expireVariably()
com.github.benmanes.caffeine.cache.Policy: java.util.Optional refreshAfterWrite()
com.github.benmanes.caffeine.cache.Policy$CacheEntry
com.github.benmanes.caffeine.cache.Policy$CacheEntry: int weight()
com.github.benmanes.caffeine.cache.Policy$CacheEntry: long expiresAt()
com.github.benmanes.caffeine.cache.Policy$CacheEntry: java.time.Duration expiresAfter()
com.github.benmanes.caffeine.cache.Policy$CacheEntry: long refreshableAt()
com.github.benmanes.caffeine.cache.Policy$CacheEntry: java.time.Duration refreshableAfter()
com.github.benmanes.caffeine.cache.Policy$CacheEntry: long snapshotAt()
com.github.benmanes.caffeine.cache.Policy$Eviction
com.github.benmanes.caffeine.cache.Policy$Eviction: boolean isWeighted()
com.github.benmanes.caffeine.cache.Policy$Eviction: java.util.OptionalInt weightOf(java.lang.Object)
com.github.benmanes.caffeine.cache.Policy$Eviction: java.util.OptionalLong weightedSize()
com.github.benmanes.caffeine.cache.Policy$Eviction: long getMaximum()
com.github.benmanes.caffeine.cache.Policy$Eviction: void setMaximum(long)
com.github.benmanes.caffeine.cache.Policy$Eviction: java.util.Map coldest(int)
com.github.benmanes.caffeine.cache.Policy$Eviction: java.util.Map coldestWeighted(long)
com.github.benmanes.caffeine.cache.Policy$Eviction: java.lang.Object coldest(java.util.function.Function)
com.github.benmanes.caffeine.cache.Policy$Eviction: java.util.Map hottest(int)
com.github.benmanes.caffeine.cache.Policy$Eviction: java.util.Map hottestWeighted(long)
com.github.benmanes.caffeine.cache.Policy$Eviction: java.lang.Object hottest(java.util.function.Function)
com.github.benmanes.caffeine.cache.Policy$FixedExpiration
com.github.benmanes.caffeine.cache.Policy$FixedExpiration: java.util.OptionalLong ageOf(java.lang.Object,java.util.concurrent.TimeUnit)
com.github.benmanes.caffeine.cache.Policy$FixedExpiration: java.util.Optional ageOf(java.lang.Object)
com.github.benmanes.caffeine.cache.Policy$FixedExpiration: long getExpiresAfter(java.util.concurrent.TimeUnit)
com.github.benmanes.caffeine.cache.Policy$FixedExpiration: java.time.Duration getExpiresAfter()
com.github.benmanes.caffeine.cache.Policy$FixedExpiration: void setExpiresAfter(long,java.util.concurrent.TimeUnit)
com.github.benmanes.caffeine.cache.Policy$FixedExpiration: void setExpiresAfter(java.time.Duration)
com.github.benmanes.caffeine.cache.Policy$FixedExpiration: java.util.Map oldest(int)
com.github.benmanes.caffeine.cache.Policy$FixedExpiration: java.lang.Object oldest(java.util.function.Function)
com.github.benmanes.caffeine.cache.Policy$FixedExpiration: java.util.Map youngest(int)
com.github.benmanes.caffeine.cache.Policy$FixedExpiration: java.lang.Object youngest(java.util.function.Function)
com.github.benmanes.caffeine.cache.Policy$FixedRefresh
com.github.benmanes.caffeine.cache.Policy$FixedRefresh: java.util.OptionalLong ageOf(java.lang.Object,java.util.concurrent.TimeUnit)
com.github.benmanes.caffeine.cache.Policy$FixedRefresh: java.util.Optional ageOf(java.lang.Object)
com.github.benmanes.caffeine.cache.Policy$FixedRefresh: long getRefreshesAfter(java.util.concurrent.TimeUnit)
com.github.benmanes.caffeine.cache.Policy$FixedRefresh: java.time.Duration getRefreshesAfter()
com.github.benmanes.caffeine.cache.Policy$FixedRefresh: void setRefreshesAfter(long,java.util.concurrent.TimeUnit)
com.github.benmanes.caffeine.cache.Policy$FixedRefresh: void setRefreshesAfter(java.time.Duration)
com.github.benmanes.caffeine.cache.Policy$VarExpiration
com.github.benmanes.caffeine.cache.Policy$VarExpiration: java.util.OptionalLong getExpiresAfter(java.lang.Object,java.util.concurrent.TimeUnit)
com.github.benmanes.caffeine.cache.Policy$VarExpiration: java.util.Optional getExpiresAfter(java.lang.Object)
com.github.benmanes.caffeine.cache.Policy$VarExpiration: void setExpiresAfter(java.lang.Object,long,java.util.concurrent.TimeUnit)
com.github.benmanes.caffeine.cache.Policy$VarExpiration: void setExpiresAfter(java.lang.Object,java.time.Duration)
com.github.benmanes.caffeine.cache.Policy$VarExpiration: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)
com.github.benmanes.caffeine.cache.Policy$VarExpiration: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object,java.time.Duration)
com.github.benmanes.caffeine.cache.Policy$VarExpiration: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)
com.github.benmanes.caffeine.cache.Policy$VarExpiration: java.lang.Object put(java.lang.Object,java.lang.Object,java.time.Duration)
com.github.benmanes.caffeine.cache.Policy$VarExpiration: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction,java.time.Duration)
com.github.benmanes.caffeine.cache.Policy$VarExpiration: java.util.Map oldest(int)
com.github.benmanes.caffeine.cache.Policy$VarExpiration: java.lang.Object oldest(java.util.function.Function)
com.github.benmanes.caffeine.cache.Policy$VarExpiration: java.util.Map youngest(int)
com.github.benmanes.caffeine.cache.Policy$VarExpiration: java.lang.Object youngest(java.util.function.Function)
com.github.benmanes.caffeine.cache.References$WeakKeyReference: References$WeakKeyReference(java.lang.Object,java.lang.ref.ReferenceQueue)
com.github.benmanes.caffeine.cache.References$WeakKeyReference: java.lang.Object getKeyReference()
com.github.benmanes.caffeine.cache.References$WeakKeyReference: boolean equals(java.lang.Object)
com.github.benmanes.caffeine.cache.References$WeakKeyReference: int hashCode()
com.github.benmanes.caffeine.cache.References$WeakKeyReference: java.lang.String toString()
com.github.benmanes.caffeine.cache.RemovalCause
com.github.benmanes.caffeine.cache.RemovalCause: com.github.benmanes.caffeine.cache.RemovalCause EXPLICIT
com.github.benmanes.caffeine.cache.RemovalCause: com.github.benmanes.caffeine.cache.RemovalCause REPLACED
com.github.benmanes.caffeine.cache.RemovalCause: com.github.benmanes.caffeine.cache.RemovalCause COLLECTED
com.github.benmanes.caffeine.cache.RemovalCause: com.github.benmanes.caffeine.cache.RemovalCause EXPIRED
com.github.benmanes.caffeine.cache.RemovalCause: com.github.benmanes.caffeine.cache.RemovalCause SIZE
com.github.benmanes.caffeine.cache.RemovalCause: com.github.benmanes.caffeine.cache.RemovalCause[] values()
com.github.benmanes.caffeine.cache.RemovalCause: com.github.benmanes.caffeine.cache.RemovalCause valueOf(java.lang.String)
com.github.benmanes.caffeine.cache.RemovalCause: boolean wasEvicted()
com.github.benmanes.caffeine.cache.RemovalListener
com.github.benmanes.caffeine.cache.RemovalListener: void onRemoval(java.lang.Object,java.lang.Object,com.github.benmanes.caffeine.cache.RemovalCause)
com.github.benmanes.caffeine.cache.Scheduler
com.github.benmanes.caffeine.cache.Scheduler: java.util.concurrent.Future schedule(java.util.concurrent.Executor,java.lang.Runnable,long,java.util.concurrent.TimeUnit)
com.github.benmanes.caffeine.cache.Scheduler: com.github.benmanes.caffeine.cache.Scheduler disabledScheduler()
com.github.benmanes.caffeine.cache.Scheduler: com.github.benmanes.caffeine.cache.Scheduler systemScheduler()
com.github.benmanes.caffeine.cache.Scheduler: com.github.benmanes.caffeine.cache.Scheduler forScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)
com.github.benmanes.caffeine.cache.Scheduler: com.github.benmanes.caffeine.cache.Scheduler guardedScheduler(com.github.benmanes.caffeine.cache.Scheduler)
com.github.benmanes.caffeine.cache.SingletonWeigher: com.github.benmanes.caffeine.cache.SingletonWeigher[] values()
com.github.benmanes.caffeine.cache.SingletonWeigher: com.github.benmanes.caffeine.cache.SingletonWeigher valueOf(java.lang.String)
com.github.benmanes.caffeine.cache.SystemScheduler: com.github.benmanes.caffeine.cache.SystemScheduler[] values()
com.github.benmanes.caffeine.cache.SystemScheduler: com.github.benmanes.caffeine.cache.SystemScheduler valueOf(java.lang.String)
com.github.benmanes.caffeine.cache.SystemTicker: com.github.benmanes.caffeine.cache.SystemTicker[] values()
com.github.benmanes.caffeine.cache.SystemTicker: com.github.benmanes.caffeine.cache.SystemTicker valueOf(java.lang.String)
com.github.benmanes.caffeine.cache.Ticker
com.github.benmanes.caffeine.cache.Ticker: long read()
com.github.benmanes.caffeine.cache.Ticker: com.github.benmanes.caffeine.cache.Ticker systemTicker()
com.github.benmanes.caffeine.cache.Ticker: com.github.benmanes.caffeine.cache.Ticker disabledTicker()
com.github.benmanes.caffeine.cache.Weigher
com.github.benmanes.caffeine.cache.Weigher: int weigh(java.lang.Object,java.lang.Object)
com.github.benmanes.caffeine.cache.Weigher: com.github.benmanes.caffeine.cache.Weigher singletonWeigher()
com.github.benmanes.caffeine.cache.Weigher: com.github.benmanes.caffeine.cache.Weigher boundedWeigher(com.github.benmanes.caffeine.cache.Weigher)
com.github.benmanes.caffeine.cache.stats.CacheStats
com.github.benmanes.caffeine.cache.stats.CacheStats: com.github.benmanes.caffeine.cache.stats.CacheStats of(long,long,long,long,long,long,long)
com.github.benmanes.caffeine.cache.stats.CacheStats: com.github.benmanes.caffeine.cache.stats.CacheStats empty()
com.github.benmanes.caffeine.cache.stats.CacheStats: long requestCount()
com.github.benmanes.caffeine.cache.stats.CacheStats: long hitCount()
com.github.benmanes.caffeine.cache.stats.CacheStats: double hitRate()
com.github.benmanes.caffeine.cache.stats.CacheStats: long missCount()
com.github.benmanes.caffeine.cache.stats.CacheStats: double missRate()
com.github.benmanes.caffeine.cache.stats.CacheStats: long loadCount()
com.github.benmanes.caffeine.cache.stats.CacheStats: long loadSuccessCount()
com.github.benmanes.caffeine.cache.stats.CacheStats: long loadFailureCount()
com.github.benmanes.caffeine.cache.stats.CacheStats: double loadFailureRate()
com.github.benmanes.caffeine.cache.stats.CacheStats: long totalLoadTime()
com.github.benmanes.caffeine.cache.stats.CacheStats: double averageLoadPenalty()
com.github.benmanes.caffeine.cache.stats.CacheStats: long evictionCount()
com.github.benmanes.caffeine.cache.stats.CacheStats: long evictionWeight()
com.github.benmanes.caffeine.cache.stats.CacheStats: com.github.benmanes.caffeine.cache.stats.CacheStats minus(com.github.benmanes.caffeine.cache.stats.CacheStats)
com.github.benmanes.caffeine.cache.stats.CacheStats: com.github.benmanes.caffeine.cache.stats.CacheStats plus(com.github.benmanes.caffeine.cache.stats.CacheStats)
com.github.benmanes.caffeine.cache.stats.CacheStats: int hashCode()
com.github.benmanes.caffeine.cache.stats.CacheStats: boolean equals(java.lang.Object)
com.github.benmanes.caffeine.cache.stats.CacheStats: java.lang.String toString()
com.github.benmanes.caffeine.cache.stats.ConcurrentStatsCounter
com.github.benmanes.caffeine.cache.stats.ConcurrentStatsCounter: ConcurrentStatsCounter()
com.github.benmanes.caffeine.cache.stats.ConcurrentStatsCounter: void recordHits(int)
com.github.benmanes.caffeine.cache.stats.ConcurrentStatsCounter: void recordMisses(int)
com.github.benmanes.caffeine.cache.stats.ConcurrentStatsCounter: void recordLoadSuccess(long)
com.github.benmanes.caffeine.cache.stats.ConcurrentStatsCounter: void recordLoadFailure(long)
com.github.benmanes.caffeine.cache.stats.ConcurrentStatsCounter: void recordEviction(int,com.github.benmanes.caffeine.cache.RemovalCause)
com.github.benmanes.caffeine.cache.stats.ConcurrentStatsCounter: com.github.benmanes.caffeine.cache.stats.CacheStats snapshot()
com.github.benmanes.caffeine.cache.stats.ConcurrentStatsCounter: void incrementBy(com.github.benmanes.caffeine.cache.stats.StatsCounter)
com.github.benmanes.caffeine.cache.stats.ConcurrentStatsCounter: java.lang.String toString()
com.github.benmanes.caffeine.cache.stats.DisabledStatsCounter: com.github.benmanes.caffeine.cache.stats.DisabledStatsCounter[] values()
com.github.benmanes.caffeine.cache.stats.DisabledStatsCounter: com.github.benmanes.caffeine.cache.stats.DisabledStatsCounter valueOf(java.lang.String)
com.github.benmanes.caffeine.cache.stats.StatsCounter
com.github.benmanes.caffeine.cache.stats.StatsCounter: void recordHits(int)
com.github.benmanes.caffeine.cache.stats.StatsCounter: void recordMisses(int)
com.github.benmanes.caffeine.cache.stats.StatsCounter: void recordLoadSuccess(long)
com.github.benmanes.caffeine.cache.stats.StatsCounter: void recordLoadFailure(long)
com.github.benmanes.caffeine.cache.stats.StatsCounter: void recordEviction(int,com.github.benmanes.caffeine.cache.RemovalCause)
com.github.benmanes.caffeine.cache.stats.StatsCounter: com.github.benmanes.caffeine.cache.stats.CacheStats snapshot()
com.github.benmanes.caffeine.cache.stats.StatsCounter: com.github.benmanes.caffeine.cache.stats.StatsCounter disabledStatsCounter()
com.github.benmanes.caffeine.cache.stats.StatsCounter: com.github.benmanes.caffeine.cache.stats.StatsCounter guardedStatsCounter(com.github.benmanes.caffeine.cache.stats.StatsCounter)
com.google.errorprone.annotations.Modifier: com.google.errorprone.annotations.Modifier[] values()
com.google.errorprone.annotations.Modifier: com.google.errorprone.annotations.Modifier valueOf(java.lang.String)
com.google.gson.ExclusionStrategy
com.google.gson.ExclusionStrategy: boolean shouldSkipField(com.google.gson.FieldAttributes)
com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)
com.google.gson.FieldAttributes
com.google.gson.FieldAttributes: FieldAttributes(java.lang.reflect.Field)
com.google.gson.FieldAttributes: java.lang.Class getDeclaringClass()
com.google.gson.FieldAttributes: java.lang.String getName()
com.google.gson.FieldAttributes: java.lang.reflect.Type getDeclaredType()
com.google.gson.FieldAttributes: java.lang.Class getDeclaredClass()
com.google.gson.FieldAttributes: java.lang.annotation.Annotation getAnnotation(java.lang.Class)
com.google.gson.FieldAttributes: java.util.Collection getAnnotations()
com.google.gson.FieldAttributes: boolean hasModifier(int)
com.google.gson.FieldAttributes: java.lang.String toString()
com.google.gson.FieldNamingPolicy
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy IDENTITY
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE_WITH_SPACES
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy UPPER_CASE_WITH_UNDERSCORES
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_UNDERSCORES
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_DASHES
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_DOTS
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy[] values()
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy valueOf(java.lang.String)
com.google.gson.FieldNamingStrategy
com.google.gson.FieldNamingStrategy: java.lang.String translateName(java.lang.reflect.Field)
com.google.gson.Gson
com.google.gson.Gson: Gson()
com.google.gson.Gson: com.google.gson.GsonBuilder newBuilder()
com.google.gson.Gson: com.google.gson.internal.Excluder excluder()
com.google.gson.Gson: com.google.gson.FieldNamingStrategy fieldNamingStrategy()
com.google.gson.Gson: boolean serializeNulls()
com.google.gson.Gson: boolean htmlSafe()
com.google.gson.Gson: com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)
com.google.gson.Gson: com.google.gson.TypeAdapter getDelegateAdapter(com.google.gson.TypeAdapterFactory,com.google.gson.reflect.TypeToken)
com.google.gson.Gson: com.google.gson.TypeAdapter getAdapter(java.lang.Class)
com.google.gson.Gson: com.google.gson.JsonElement toJsonTree(java.lang.Object)
com.google.gson.Gson: com.google.gson.JsonElement toJsonTree(java.lang.Object,java.lang.reflect.Type)
com.google.gson.Gson: java.lang.String toJson(java.lang.Object)
com.google.gson.Gson: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)
com.google.gson.Gson: void toJson(java.lang.Object,java.lang.Appendable)
com.google.gson.Gson: void toJson(java.lang.Object,java.lang.reflect.Type,java.lang.Appendable)
com.google.gson.Gson: void toJson(java.lang.Object,java.lang.reflect.Type,com.google.gson.stream.JsonWriter)
com.google.gson.Gson: java.lang.String toJson(com.google.gson.JsonElement)
com.google.gson.Gson: void toJson(com.google.gson.JsonElement,java.lang.Appendable)
com.google.gson.Gson: com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer)
com.google.gson.Gson: com.google.gson.stream.JsonReader newJsonReader(java.io.Reader)
com.google.gson.Gson: void toJson(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter)
com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)
com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)
com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,com.google.gson.reflect.TypeToken)
com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.Class)
com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type)
com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,com.google.gson.reflect.TypeToken)
com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type)
com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.stream.JsonReader,com.google.gson.reflect.TypeToken)
com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.Class)
com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type)
com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,com.google.gson.reflect.TypeToken)
com.google.gson.Gson: java.lang.String toString()
com.google.gson.GsonBuilder
com.google.gson.GsonBuilder: GsonBuilder()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setVersion(double)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder excludeFieldsWithModifiers(int[])
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder generateNonExecutableJson()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder excludeFieldsWithoutExposeAnnotation()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder serializeNulls()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder enableComplexMapKeySerialization()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder disableInnerClassSerialization()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setFieldNamingPolicy(com.google.gson.FieldNamingPolicy)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setFieldNamingStrategy(com.google.gson.FieldNamingStrategy)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setObjectToNumberStrategy(com.google.gson.ToNumberStrategy)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setNumberToNumberStrategy(com.google.gson.ToNumberStrategy)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setExclusionStrategies(com.google.gson.ExclusionStrategy[])
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder addSerializationExclusionStrategy(com.google.gson.ExclusionStrategy)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder addDeserializationExclusionStrategy(com.google.gson.ExclusionStrategy)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setPrettyPrinting()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setLenient()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder disableHtmlEscaping()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setDateFormat(java.lang.String)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setDateFormat(int)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setDateFormat(int,int)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type,java.lang.Object)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class,java.lang.Object)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder serializeSpecialFloatingPointValues()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder disableJdkUnsafe()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter)
com.google.gson.GsonBuilder: com.google.gson.Gson create()
com.google.gson.InstanceCreator
com.google.gson.InstanceCreator: java.lang.Object createInstance(java.lang.reflect.Type)
com.google.gson.JsonArray
com.google.gson.JsonArray: JsonArray()
com.google.gson.JsonArray: JsonArray(int)
com.google.gson.JsonArray: com.google.gson.JsonArray deepCopy()
com.google.gson.JsonArray: void add(java.lang.Boolean)
com.google.gson.JsonArray: void add(java.lang.Character)
com.google.gson.JsonArray: void add(java.lang.Number)
com.google.gson.JsonArray: void add(java.lang.String)
com.google.gson.JsonArray: void add(com.google.gson.JsonElement)
com.google.gson.JsonArray: void addAll(com.google.gson.JsonArray)
com.google.gson.JsonArray: com.google.gson.JsonElement set(int,com.google.gson.JsonElement)
com.google.gson.JsonArray: boolean remove(com.google.gson.JsonElement)
com.google.gson.JsonArray: com.google.gson.JsonElement remove(int)
com.google.gson.JsonArray: boolean contains(com.google.gson.JsonElement)
com.google.gson.JsonArray: int size()
com.google.gson.JsonArray: boolean isEmpty()
com.google.gson.JsonArray: java.util.Iterator iterator()
com.google.gson.JsonArray: com.google.gson.JsonElement get(int)
com.google.gson.JsonArray: java.lang.Number getAsNumber()
com.google.gson.JsonArray: java.lang.String getAsString()
com.google.gson.JsonArray: double getAsDouble()
com.google.gson.JsonArray: java.math.BigDecimal getAsBigDecimal()
com.google.gson.JsonArray: java.math.BigInteger getAsBigInteger()
com.google.gson.JsonArray: float getAsFloat()
com.google.gson.JsonArray: long getAsLong()
com.google.gson.JsonArray: int getAsInt()
com.google.gson.JsonArray: byte getAsByte()
com.google.gson.JsonArray: char getAsCharacter()
com.google.gson.JsonArray: short getAsShort()
com.google.gson.JsonArray: boolean getAsBoolean()
com.google.gson.JsonArray: java.util.List asList()
com.google.gson.JsonArray: boolean equals(java.lang.Object)
com.google.gson.JsonArray: int hashCode()
com.google.gson.JsonArray: com.google.gson.JsonElement deepCopy()
com.google.gson.JsonDeserializationContext
com.google.gson.JsonDeserializationContext: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)
com.google.gson.JsonDeserializer
com.google.gson.JsonDeserializer: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
com.google.gson.JsonElement
com.google.gson.JsonElement: JsonElement()
com.google.gson.JsonElement: com.google.gson.JsonElement deepCopy()
com.google.gson.JsonElement: boolean isJsonArray()
com.google.gson.JsonElement: boolean isJsonObject()
com.google.gson.JsonElement: boolean isJsonPrimitive()
com.google.gson.JsonElement: boolean isJsonNull()
com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()
com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()
com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()
com.google.gson.JsonElement: com.google.gson.JsonNull getAsJsonNull()
com.google.gson.JsonElement: boolean getAsBoolean()
com.google.gson.JsonElement: java.lang.Number getAsNumber()
com.google.gson.JsonElement: java.lang.String getAsString()
com.google.gson.JsonElement: double getAsDouble()
com.google.gson.JsonElement: float getAsFloat()
com.google.gson.JsonElement: long getAsLong()
com.google.gson.JsonElement: int getAsInt()
com.google.gson.JsonElement: byte getAsByte()
com.google.gson.JsonElement: char getAsCharacter()
com.google.gson.JsonElement: java.math.BigDecimal getAsBigDecimal()
com.google.gson.JsonElement: java.math.BigInteger getAsBigInteger()
com.google.gson.JsonElement: short getAsShort()
com.google.gson.JsonElement: java.lang.String toString()
com.google.gson.JsonIOException
com.google.gson.JsonIOException: JsonIOException(java.lang.String)
com.google.gson.JsonIOException: JsonIOException(java.lang.String,java.lang.Throwable)
com.google.gson.JsonIOException: JsonIOException(java.lang.Throwable)
com.google.gson.JsonNull
com.google.gson.JsonNull: com.google.gson.JsonNull INSTANCE
com.google.gson.JsonNull: JsonNull()
com.google.gson.JsonNull: com.google.gson.JsonNull deepCopy()
com.google.gson.JsonNull: int hashCode()
com.google.gson.JsonNull: boolean equals(java.lang.Object)
com.google.gson.JsonNull: com.google.gson.JsonElement deepCopy()
com.google.gson.JsonObject
com.google.gson.JsonObject: JsonObject()
com.google.gson.JsonObject: com.google.gson.JsonObject deepCopy()
com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)
com.google.gson.JsonObject: com.google.gson.JsonElement remove(java.lang.String)
com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.String)
com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.Number)
com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.Boolean)
com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.Character)
com.google.gson.JsonObject: java.util.Set entrySet()
com.google.gson.JsonObject: java.util.Set keySet()
com.google.gson.JsonObject: int size()
com.google.gson.JsonObject: boolean isEmpty()
com.google.gson.JsonObject: boolean has(java.lang.String)
com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)
com.google.gson.JsonObject: com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String)
com.google.gson.JsonObject: com.google.gson.JsonArray getAsJsonArray(java.lang.String)
com.google.gson.JsonObject: com.google.gson.JsonObject getAsJsonObject(java.lang.String)
com.google.gson.JsonObject: java.util.Map asMap()
com.google.gson.JsonObject: boolean equals(java.lang.Object)
com.google.gson.JsonObject: int hashCode()
com.google.gson.JsonObject: com.google.gson.JsonElement deepCopy()
com.google.gson.JsonParseException
com.google.gson.JsonParseException: JsonParseException(java.lang.String)
com.google.gson.JsonParseException: JsonParseException(java.lang.String,java.lang.Throwable)
com.google.gson.JsonParseException: JsonParseException(java.lang.Throwable)
com.google.gson.JsonParser
com.google.gson.JsonParser: JsonParser()
com.google.gson.JsonParser: com.google.gson.JsonElement parseString(java.lang.String)
com.google.gson.JsonParser: com.google.gson.JsonElement parseReader(java.io.Reader)
com.google.gson.JsonParser: com.google.gson.JsonElement parseReader(com.google.gson.stream.JsonReader)
com.google.gson.JsonParser: com.google.gson.JsonElement parse(java.lang.String)
com.google.gson.JsonParser: com.google.gson.JsonElement parse(java.io.Reader)
com.google.gson.JsonParser: com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader)
com.google.gson.JsonPrimitive
com.google.gson.JsonPrimitive: JsonPrimitive(java.lang.Boolean)
com.google.gson.JsonPrimitive: JsonPrimitive(java.lang.Number)
com.google.gson.JsonPrimitive: JsonPrimitive(java.lang.String)
com.google.gson.JsonPrimitive: JsonPrimitive(java.lang.Character)
com.google.gson.JsonPrimitive: com.google.gson.JsonPrimitive deepCopy()
com.google.gson.JsonPrimitive: boolean isBoolean()
com.google.gson.JsonPrimitive: boolean getAsBoolean()
com.google.gson.JsonPrimitive: boolean isNumber()
com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()
com.google.gson.JsonPrimitive: boolean isString()
com.google.gson.JsonPrimitive: java.lang.String getAsString()
com.google.gson.JsonPrimitive: double getAsDouble()
com.google.gson.JsonPrimitive: java.math.BigDecimal getAsBigDecimal()
com.google.gson.JsonPrimitive: java.math.BigInteger getAsBigInteger()
com.google.gson.JsonPrimitive: float getAsFloat()
com.google.gson.JsonPrimitive: long getAsLong()
com.google.gson.JsonPrimitive: short getAsShort()
com.google.gson.JsonPrimitive: int getAsInt()
com.google.gson.JsonPrimitive: byte getAsByte()
com.google.gson.JsonPrimitive: char getAsCharacter()
com.google.gson.JsonPrimitive: int hashCode()
com.google.gson.JsonPrimitive: boolean equals(java.lang.Object)
com.google.gson.JsonPrimitive: com.google.gson.JsonElement deepCopy()
com.google.gson.JsonSerializationContext
com.google.gson.JsonSerializationContext: com.google.gson.JsonElement serialize(java.lang.Object)
com.google.gson.JsonSerializationContext: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type)
com.google.gson.JsonSerializer
com.google.gson.JsonSerializer: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
com.google.gson.JsonStreamParser
com.google.gson.JsonStreamParser: JsonStreamParser(java.lang.String)
com.google.gson.JsonStreamParser: JsonStreamParser(java.io.Reader)
com.google.gson.JsonStreamParser: com.google.gson.JsonElement next()
com.google.gson.JsonStreamParser: boolean hasNext()
com.google.gson.JsonStreamParser: void remove()
com.google.gson.JsonStreamParser: java.lang.Object next()
com.google.gson.JsonSyntaxException
com.google.gson.JsonSyntaxException: JsonSyntaxException(java.lang.String)
com.google.gson.JsonSyntaxException: JsonSyntaxException(java.lang.String,java.lang.Throwable)
com.google.gson.JsonSyntaxException: JsonSyntaxException(java.lang.Throwable)
com.google.gson.LongSerializationPolicy
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy DEFAULT
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy STRING
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy[] values()
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy valueOf(java.lang.String)
com.google.gson.LongSerializationPolicy: com.google.gson.JsonElement serialize(java.lang.Long)
com.google.gson.ReflectionAccessFilter
com.google.gson.ReflectionAccessFilter: com.google.gson.ReflectionAccessFilter BLOCK_INACCESSIBLE_JAVA
com.google.gson.ReflectionAccessFilter: com.google.gson.ReflectionAccessFilter BLOCK_ALL_JAVA
com.google.gson.ReflectionAccessFilter: com.google.gson.ReflectionAccessFilter BLOCK_ALL_ANDROID
com.google.gson.ReflectionAccessFilter: com.google.gson.ReflectionAccessFilter BLOCK_ALL_PLATFORM
com.google.gson.ReflectionAccessFilter: com.google.gson.ReflectionAccessFilter$FilterResult check(java.lang.Class)
com.google.gson.ReflectionAccessFilter$FilterResult
com.google.gson.ReflectionAccessFilter$FilterResult: com.google.gson.ReflectionAccessFilter$FilterResult ALLOW
com.google.gson.ReflectionAccessFilter$FilterResult: com.google.gson.ReflectionAccessFilter$FilterResult INDECISIVE
com.google.gson.ReflectionAccessFilter$FilterResult: com.google.gson.ReflectionAccessFilter$FilterResult BLOCK_INACCESSIBLE
com.google.gson.ReflectionAccessFilter$FilterResult: com.google.gson.ReflectionAccessFilter$FilterResult BLOCK_ALL
com.google.gson.ReflectionAccessFilter$FilterResult: com.google.gson.ReflectionAccessFilter$FilterResult[] values()
com.google.gson.ReflectionAccessFilter$FilterResult: com.google.gson.ReflectionAccessFilter$FilterResult valueOf(java.lang.String)
com.google.gson.ToNumberPolicy
com.google.gson.ToNumberPolicy: com.google.gson.ToNumberPolicy DOUBLE
com.google.gson.ToNumberPolicy: com.google.gson.ToNumberPolicy LAZILY_PARSED_NUMBER
com.google.gson.ToNumberPolicy: com.google.gson.ToNumberPolicy LONG_OR_DOUBLE
com.google.gson.ToNumberPolicy: com.google.gson.ToNumberPolicy BIG_DECIMAL
com.google.gson.ToNumberPolicy: com.google.gson.ToNumberPolicy[] values()
com.google.gson.ToNumberPolicy: com.google.gson.ToNumberPolicy valueOf(java.lang.String)
com.google.gson.ToNumberStrategy
com.google.gson.ToNumberStrategy: java.lang.Number readNumber(com.google.gson.stream.JsonReader)
com.google.gson.TypeAdapter
com.google.gson.TypeAdapter: TypeAdapter()
com.google.gson.TypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.gson.TypeAdapter: void toJson(java.io.Writer,java.lang.Object)
com.google.gson.TypeAdapter: com.google.gson.TypeAdapter nullSafe()
com.google.gson.TypeAdapter: java.lang.String toJson(java.lang.Object)
com.google.gson.TypeAdapter: com.google.gson.JsonElement toJsonTree(java.lang.Object)
com.google.gson.TypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.TypeAdapter: java.lang.Object fromJson(java.io.Reader)
com.google.gson.TypeAdapter: java.lang.Object fromJson(java.lang.String)
com.google.gson.TypeAdapter: java.lang.Object fromJsonTree(com.google.gson.JsonElement)
com.google.gson.TypeAdapterFactory
com.google.gson.TypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
com.google.gson.annotations.Expose
com.google.gson.annotations.Expose: boolean serialize()
com.google.gson.annotations.Expose: boolean deserialize()
com.google.gson.annotations.JsonAdapter
com.google.gson.annotations.JsonAdapter: java.lang.Class value()
com.google.gson.annotations.JsonAdapter: boolean nullSafe()
com.google.gson.annotations.SerializedName
com.google.gson.annotations.SerializedName: java.lang.String value()
com.google.gson.annotations.SerializedName: java.lang.String[] alternate()
com.google.gson.annotations.Since
com.google.gson.annotations.Since: double value()
com.google.gson.annotations.Until
com.google.gson.annotations.Until: double value()
com.google.gson.internal.$Gson$Preconditions
com.google.gson.internal.$Gson$Preconditions: java.lang.Object checkNotNull(java.lang.Object)
com.google.gson.internal.$Gson$Preconditions: void checkArgument(boolean)
com.google.gson.internal.$Gson$Types
com.google.gson.internal.$Gson$Types: java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])
com.google.gson.internal.$Gson$Types: java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type)
com.google.gson.internal.$Gson$Types: java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type)
com.google.gson.internal.$Gson$Types: java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type)
com.google.gson.internal.$Gson$Types: java.lang.reflect.Type canonicalize(java.lang.reflect.Type)
com.google.gson.internal.$Gson$Types: java.lang.Class getRawType(java.lang.reflect.Type)
com.google.gson.internal.$Gson$Types: boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)
com.google.gson.internal.$Gson$Types: java.lang.String typeToString(java.lang.reflect.Type)
com.google.gson.internal.$Gson$Types: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)
com.google.gson.internal.$Gson$Types: java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type,java.lang.Class)
com.google.gson.internal.$Gson$Types: java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type,java.lang.Class)
com.google.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)
com.google.gson.internal.ConstructorConstructor
com.google.gson.internal.ConstructorConstructor: ConstructorConstructor(java.util.Map,boolean,java.util.List)
com.google.gson.internal.ConstructorConstructor: com.google.gson.internal.ObjectConstructor get(com.google.gson.reflect.TypeToken)
com.google.gson.internal.ConstructorConstructor: java.lang.String toString()
com.google.gson.internal.Excluder
com.google.gson.internal.Excluder: com.google.gson.internal.Excluder DEFAULT
com.google.gson.internal.Excluder: Excluder()
com.google.gson.internal.Excluder: com.google.gson.internal.Excluder withVersion(double)
com.google.gson.internal.Excluder: com.google.gson.internal.Excluder withModifiers(int[])
com.google.gson.internal.Excluder: com.google.gson.internal.Excluder disableInnerClassSerialization()
com.google.gson.internal.Excluder: com.google.gson.internal.Excluder excludeFieldsWithoutExposeAnnotation()
com.google.gson.internal.Excluder: com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy,boolean,boolean)
com.google.gson.internal.Excluder: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
com.google.gson.internal.Excluder: boolean excludeField(java.lang.reflect.Field,boolean)
com.google.gson.internal.Excluder: boolean excludeClass(java.lang.Class,boolean)
com.google.gson.internal.GsonBuildConfig
com.google.gson.internal.GsonBuildConfig: java.lang.String VERSION
com.google.gson.internal.JavaVersion
com.google.gson.internal.JavaVersion: int getMajorJavaVersion()
com.google.gson.internal.JavaVersion: boolean isJava9OrLater()
com.google.gson.internal.JsonReaderInternalAccess
com.google.gson.internal.JsonReaderInternalAccess: com.google.gson.internal.JsonReaderInternalAccess INSTANCE
com.google.gson.internal.JsonReaderInternalAccess: JsonReaderInternalAccess()
com.google.gson.internal.JsonReaderInternalAccess: void promoteNameToValue(com.google.gson.stream.JsonReader)
com.google.gson.internal.LazilyParsedNumber
com.google.gson.internal.LazilyParsedNumber: LazilyParsedNumber(java.lang.String)
com.google.gson.internal.LazilyParsedNumber: int intValue()
com.google.gson.internal.LazilyParsedNumber: long longValue()
com.google.gson.internal.LazilyParsedNumber: float floatValue()
com.google.gson.internal.LazilyParsedNumber: double doubleValue()
com.google.gson.internal.LazilyParsedNumber: java.lang.String toString()
com.google.gson.internal.LazilyParsedNumber: int hashCode()
com.google.gson.internal.LazilyParsedNumber: boolean equals(java.lang.Object)
com.google.gson.internal.LinkedTreeMap
com.google.gson.internal.LinkedTreeMap: LinkedTreeMap()
com.google.gson.internal.LinkedTreeMap: LinkedTreeMap(boolean)
com.google.gson.internal.LinkedTreeMap: LinkedTreeMap(java.util.Comparator,boolean)
com.google.gson.internal.LinkedTreeMap: int size()
com.google.gson.internal.LinkedTreeMap: java.lang.Object get(java.lang.Object)
com.google.gson.internal.LinkedTreeMap: boolean containsKey(java.lang.Object)
com.google.gson.internal.LinkedTreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)
com.google.gson.internal.LinkedTreeMap: void clear()
com.google.gson.internal.LinkedTreeMap: java.lang.Object remove(java.lang.Object)
com.google.gson.internal.LinkedTreeMap: java.util.Set entrySet()
com.google.gson.internal.LinkedTreeMap: java.util.Set keySet()
com.google.gson.internal.NonNullElementWrapperList
com.google.gson.internal.NonNullElementWrapperList: NonNullElementWrapperList(java.util.ArrayList)
com.google.gson.internal.NonNullElementWrapperList: java.lang.Object get(int)
com.google.gson.internal.NonNullElementWrapperList: int size()
com.google.gson.internal.NonNullElementWrapperList: java.lang.Object set(int,java.lang.Object)
com.google.gson.internal.NonNullElementWrapperList: void add(int,java.lang.Object)
com.google.gson.internal.NonNullElementWrapperList: java.lang.Object remove(int)
com.google.gson.internal.NonNullElementWrapperList: void clear()
com.google.gson.internal.NonNullElementWrapperList: boolean remove(java.lang.Object)
com.google.gson.internal.NonNullElementWrapperList: boolean removeAll(java.util.Collection)
com.google.gson.internal.NonNullElementWrapperList: boolean retainAll(java.util.Collection)
com.google.gson.internal.NonNullElementWrapperList: boolean contains(java.lang.Object)
com.google.gson.internal.NonNullElementWrapperList: int indexOf(java.lang.Object)
com.google.gson.internal.NonNullElementWrapperList: int lastIndexOf(java.lang.Object)
com.google.gson.internal.NonNullElementWrapperList: java.lang.Object[] toArray()
com.google.gson.internal.NonNullElementWrapperList: java.lang.Object[] toArray(java.lang.Object[])
com.google.gson.internal.NonNullElementWrapperList: boolean equals(java.lang.Object)
com.google.gson.internal.NonNullElementWrapperList: int hashCode()
com.google.gson.internal.ObjectConstructor
com.google.gson.internal.ObjectConstructor: java.lang.Object construct()
com.google.gson.internal.PreJava9DateFormatProvider
com.google.gson.internal.PreJava9DateFormatProvider: PreJava9DateFormatProvider()
com.google.gson.internal.PreJava9DateFormatProvider: java.text.DateFormat getUSDateFormat(int)
com.google.gson.internal.PreJava9DateFormatProvider: java.text.DateFormat getUSDateTimeFormat(int,int)
com.google.gson.internal.Primitives
com.google.gson.internal.Primitives: boolean isPrimitive(java.lang.reflect.Type)
com.google.gson.internal.Primitives: boolean isWrapperType(java.lang.reflect.Type)
com.google.gson.internal.Primitives: java.lang.Class wrap(java.lang.Class)
com.google.gson.internal.Primitives: java.lang.Class unwrap(java.lang.Class)
com.google.gson.internal.ReflectionAccessFilterHelper
com.google.gson.internal.ReflectionAccessFilterHelper: boolean isJavaType(java.lang.Class)
com.google.gson.internal.ReflectionAccessFilterHelper: boolean isAndroidType(java.lang.Class)
com.google.gson.internal.ReflectionAccessFilterHelper: boolean isAnyPlatformType(java.lang.Class)
com.google.gson.internal.ReflectionAccessFilterHelper: com.google.gson.ReflectionAccessFilter$FilterResult getFilterResult(java.util.List,java.lang.Class)
com.google.gson.internal.ReflectionAccessFilterHelper: boolean canAccess(java.lang.reflect.AccessibleObject,java.lang.Object)
com.google.gson.internal.Streams
com.google.gson.internal.Streams: com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader)
com.google.gson.internal.Streams: void write(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter)
com.google.gson.internal.Streams: java.io.Writer writerForAppendable(java.lang.Appendable)
com.google.gson.internal.UnsafeAllocator
com.google.gson.internal.UnsafeAllocator: com.google.gson.internal.UnsafeAllocator INSTANCE
com.google.gson.internal.UnsafeAllocator: UnsafeAllocator()
com.google.gson.internal.UnsafeAllocator: java.lang.Object newInstance(java.lang.Class)
com.google.gson.internal.bind.ArrayTypeAdapter
com.google.gson.internal.bind.ArrayTypeAdapter: com.google.gson.TypeAdapterFactory FACTORY
com.google.gson.internal.bind.ArrayTypeAdapter: ArrayTypeAdapter(com.google.gson.Gson,com.google.gson.TypeAdapter,java.lang.Class)
com.google.gson.internal.bind.ArrayTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.internal.bind.ArrayTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.gson.internal.bind.CollectionTypeAdapterFactory
com.google.gson.internal.bind.CollectionTypeAdapterFactory: CollectionTypeAdapterFactory(com.google.gson.internal.ConstructorConstructor)
com.google.gson.internal.bind.CollectionTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
com.google.gson.internal.bind.DateTypeAdapter
com.google.gson.internal.bind.DateTypeAdapter: com.google.gson.TypeAdapterFactory FACTORY
com.google.gson.internal.bind.DateTypeAdapter: DateTypeAdapter()
com.google.gson.internal.bind.DateTypeAdapter: java.util.Date read(com.google.gson.stream.JsonReader)
com.google.gson.internal.bind.DateTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.util.Date)
com.google.gson.internal.bind.DateTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.internal.bind.DateTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.gson.internal.bind.DefaultDateTypeAdapter
com.google.gson.internal.bind.DefaultDateTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.util.Date)
com.google.gson.internal.bind.DefaultDateTypeAdapter: java.util.Date read(com.google.gson.stream.JsonReader)
com.google.gson.internal.bind.DefaultDateTypeAdapter: java.lang.String toString()
com.google.gson.internal.bind.DefaultDateTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.internal.bind.DefaultDateTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType
com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType: com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType DATE
com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType: com.google.gson.TypeAdapterFactory createAdapterFactory(java.lang.String)
com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType: com.google.gson.TypeAdapterFactory createAdapterFactory(int)
com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType: com.google.gson.TypeAdapterFactory createAdapterFactory(int,int)
com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType: com.google.gson.TypeAdapterFactory createDefaultsAdapterFactory()
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory: JsonAdapterAnnotationTypeAdapterFactory(com.google.gson.internal.ConstructorConstructor)
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
com.google.gson.internal.bind.JsonTreeReader
com.google.gson.internal.bind.JsonTreeReader: JsonTreeReader(com.google.gson.JsonElement)
com.google.gson.internal.bind.JsonTreeReader: void beginArray()
com.google.gson.internal.bind.JsonTreeReader: void endArray()
com.google.gson.internal.bind.JsonTreeReader: void beginObject()
com.google.gson.internal.bind.JsonTreeReader: void endObject()
com.google.gson.internal.bind.JsonTreeReader: boolean hasNext()
com.google.gson.internal.bind.JsonTreeReader: com.google.gson.stream.JsonToken peek()
com.google.gson.internal.bind.JsonTreeReader: java.lang.String nextName()
com.google.gson.internal.bind.JsonTreeReader: java.lang.String nextString()
com.google.gson.internal.bind.JsonTreeReader: boolean nextBoolean()
com.google.gson.internal.bind.JsonTreeReader: void nextNull()
com.google.gson.internal.bind.JsonTreeReader: double nextDouble()
com.google.gson.internal.bind.JsonTreeReader: long nextLong()
com.google.gson.internal.bind.JsonTreeReader: int nextInt()
com.google.gson.internal.bind.JsonTreeReader: void close()
com.google.gson.internal.bind.JsonTreeReader: void skipValue()
com.google.gson.internal.bind.JsonTreeReader: java.lang.String toString()
com.google.gson.internal.bind.JsonTreeReader: void promoteNameToValue()
com.google.gson.internal.bind.JsonTreeReader: java.lang.String getPreviousPath()
com.google.gson.internal.bind.JsonTreeReader: java.lang.String getPath()
com.google.gson.internal.bind.JsonTreeWriter
com.google.gson.internal.bind.JsonTreeWriter: JsonTreeWriter()
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.JsonElement get()
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter beginArray()
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter endArray()
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter beginObject()
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter endObject()
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter name(java.lang.String)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter value(java.lang.String)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter jsonValue(java.lang.String)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter nullValue()
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter value(boolean)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter value(java.lang.Boolean)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter value(float)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter value(double)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter value(long)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter value(java.lang.Number)
com.google.gson.internal.bind.JsonTreeWriter: void flush()
com.google.gson.internal.bind.JsonTreeWriter: void close()
com.google.gson.internal.bind.MapTypeAdapterFactory
com.google.gson.internal.bind.MapTypeAdapterFactory: MapTypeAdapterFactory(com.google.gson.internal.ConstructorConstructor,boolean)
com.google.gson.internal.bind.MapTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
com.google.gson.internal.bind.NumberTypeAdapter
com.google.gson.internal.bind.NumberTypeAdapter: com.google.gson.TypeAdapterFactory getFactory(com.google.gson.ToNumberStrategy)
com.google.gson.internal.bind.NumberTypeAdapter: java.lang.Number read(com.google.gson.stream.JsonReader)
com.google.gson.internal.bind.NumberTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Number)
com.google.gson.internal.bind.NumberTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.internal.bind.NumberTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.gson.internal.bind.ObjectTypeAdapter
com.google.gson.internal.bind.ObjectTypeAdapter: com.google.gson.TypeAdapterFactory getFactory(com.google.gson.ToNumberStrategy)
com.google.gson.internal.bind.ObjectTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.internal.bind.ObjectTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory: ReflectiveTypeAdapterFactory(com.google.gson.internal.ConstructorConstructor,com.google.gson.FieldNamingStrategy,com.google.gson.internal.Excluder,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,java.util.List)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.internal.bind.SerializationDelegatingTypeAdapter
com.google.gson.internal.bind.SerializationDelegatingTypeAdapter: SerializationDelegatingTypeAdapter()
com.google.gson.internal.bind.SerializationDelegatingTypeAdapter: com.google.gson.TypeAdapter getSerializationDelegate()
com.google.gson.internal.bind.TreeTypeAdapter
com.google.gson.internal.bind.TreeTypeAdapter: TreeTypeAdapter(com.google.gson.JsonSerializer,com.google.gson.JsonDeserializer,com.google.gson.Gson,com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapterFactory,boolean)
com.google.gson.internal.bind.TreeTypeAdapter: TreeTypeAdapter(com.google.gson.JsonSerializer,com.google.gson.JsonDeserializer,com.google.gson.Gson,com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapterFactory)
com.google.gson.internal.bind.TreeTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.internal.bind.TreeTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.gson.internal.bind.TreeTypeAdapter: com.google.gson.TypeAdapter getSerializationDelegate()
com.google.gson.internal.bind.TreeTypeAdapter: com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken,java.lang.Object)
com.google.gson.internal.bind.TreeTypeAdapter: com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken,java.lang.Object)
com.google.gson.internal.bind.TreeTypeAdapter: com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class,java.lang.Object)
com.google.gson.internal.bind.TypeAdapters
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter CLASS
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory CLASS_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter BIT_SET
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory BIT_SET_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter BOOLEAN
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter BOOLEAN_AS_STRING
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory BOOLEAN_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter BYTE
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory BYTE_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter SHORT
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory SHORT_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter INTEGER
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory INTEGER_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter ATOMIC_INTEGER
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory ATOMIC_INTEGER_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter ATOMIC_BOOLEAN
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory ATOMIC_BOOLEAN_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter ATOMIC_INTEGER_ARRAY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory ATOMIC_INTEGER_ARRAY_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter LONG
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter FLOAT
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter DOUBLE
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter CHARACTER
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory CHARACTER_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter STRING
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter BIG_DECIMAL
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter BIG_INTEGER
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter LAZILY_PARSED_NUMBER
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory STRING_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter STRING_BUILDER
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory STRING_BUILDER_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter STRING_BUFFER
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory STRING_BUFFER_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter URL
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory URL_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter URI
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory URI_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter INET_ADDRESS
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory INET_ADDRESS_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter UUID
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory UUID_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter CURRENCY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory CURRENCY_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter CALENDAR
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory CALENDAR_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter LOCALE
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory LOCALE_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter JSON_ELEMENT
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory JSON_ELEMENT_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory ENUM_FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapter)
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,com.google.gson.TypeAdapter)
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory newFactoryForMultipleTypes(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class,com.google.gson.TypeAdapter)
com.google.gson.internal.bind.util.ISO8601Utils
com.google.gson.internal.bind.util.ISO8601Utils: ISO8601Utils()
com.google.gson.internal.bind.util.ISO8601Utils: java.lang.String format(java.util.Date)
com.google.gson.internal.bind.util.ISO8601Utils: java.lang.String format(java.util.Date,boolean)
com.google.gson.internal.bind.util.ISO8601Utils: java.lang.String format(java.util.Date,boolean,java.util.TimeZone)
com.google.gson.internal.bind.util.ISO8601Utils: java.util.Date parse(java.lang.String,java.text.ParsePosition)
com.google.gson.internal.reflect.ReflectionHelper
com.google.gson.internal.reflect.ReflectionHelper: void makeAccessible(java.lang.reflect.AccessibleObject)
com.google.gson.internal.reflect.ReflectionHelper: java.lang.String getAccessibleObjectDescription(java.lang.reflect.AccessibleObject,boolean)
com.google.gson.internal.reflect.ReflectionHelper: java.lang.String fieldToString(java.lang.reflect.Field)
com.google.gson.internal.reflect.ReflectionHelper: java.lang.String constructorToString(java.lang.reflect.Constructor)
com.google.gson.internal.reflect.ReflectionHelper: java.lang.String tryMakeAccessible(java.lang.reflect.Constructor)
com.google.gson.internal.reflect.ReflectionHelper: boolean isRecord(java.lang.Class)
com.google.gson.internal.reflect.ReflectionHelper: java.lang.String[] getRecordComponentNames(java.lang.Class)
com.google.gson.internal.reflect.ReflectionHelper: java.lang.reflect.Method getAccessor(java.lang.Class,java.lang.reflect.Field)
com.google.gson.internal.reflect.ReflectionHelper: java.lang.reflect.Constructor getCanonicalRecordConstructor(java.lang.Class)
com.google.gson.internal.reflect.ReflectionHelper: java.lang.RuntimeException createExceptionForUnexpectedIllegalAccess(java.lang.IllegalAccessException)
com.google.gson.internal.sql.SqlTypesSupport
com.google.gson.internal.sql.SqlTypesSupport: boolean SUPPORTS_SQL_TYPES
com.google.gson.internal.sql.SqlTypesSupport: com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType DATE_DATE_TYPE
com.google.gson.internal.sql.SqlTypesSupport: com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType TIMESTAMP_DATE_TYPE
com.google.gson.internal.sql.SqlTypesSupport: com.google.gson.TypeAdapterFactory DATE_FACTORY
com.google.gson.internal.sql.SqlTypesSupport: com.google.gson.TypeAdapterFactory TIME_FACTORY
com.google.gson.internal.sql.SqlTypesSupport: com.google.gson.TypeAdapterFactory TIMESTAMP_FACTORY
com.google.gson.reflect.TypeToken
com.google.gson.reflect.TypeToken: java.lang.Class getRawType()
com.google.gson.reflect.TypeToken: java.lang.reflect.Type getType()
com.google.gson.reflect.TypeToken: boolean isAssignableFrom(java.lang.Class)
com.google.gson.reflect.TypeToken: boolean isAssignableFrom(java.lang.reflect.Type)
com.google.gson.reflect.TypeToken: boolean isAssignableFrom(com.google.gson.reflect.TypeToken)
com.google.gson.reflect.TypeToken: int hashCode()
com.google.gson.reflect.TypeToken: boolean equals(java.lang.Object)
com.google.gson.reflect.TypeToken: java.lang.String toString()
com.google.gson.reflect.TypeToken: com.google.gson.reflect.TypeToken get(java.lang.reflect.Type)
com.google.gson.reflect.TypeToken: com.google.gson.reflect.TypeToken get(java.lang.Class)
com.google.gson.reflect.TypeToken: com.google.gson.reflect.TypeToken getParameterized(java.lang.reflect.Type,java.lang.reflect.Type[])
com.google.gson.reflect.TypeToken: com.google.gson.reflect.TypeToken getArray(java.lang.reflect.Type)
com.google.gson.stream.JsonReader
com.google.gson.stream.JsonReader: JsonReader(java.io.Reader)
com.google.gson.stream.JsonReader: void setLenient(boolean)
com.google.gson.stream.JsonReader: boolean isLenient()
com.google.gson.stream.JsonReader: void beginArray()
com.google.gson.stream.JsonReader: void endArray()
com.google.gson.stream.JsonReader: void beginObject()
com.google.gson.stream.JsonReader: void endObject()
com.google.gson.stream.JsonReader: boolean hasNext()
com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()
com.google.gson.stream.JsonReader: java.lang.String nextName()
com.google.gson.stream.JsonReader: java.lang.String nextString()
com.google.gson.stream.JsonReader: boolean nextBoolean()
com.google.gson.stream.JsonReader: void nextNull()
com.google.gson.stream.JsonReader: double nextDouble()
com.google.gson.stream.JsonReader: long nextLong()
com.google.gson.stream.JsonReader: int nextInt()
com.google.gson.stream.JsonReader: void close()
com.google.gson.stream.JsonReader: void skipValue()
com.google.gson.stream.JsonReader: java.lang.String toString()
com.google.gson.stream.JsonReader: java.lang.String getPreviousPath()
com.google.gson.stream.JsonReader: java.lang.String getPath()
com.google.gson.stream.JsonToken
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken BEGIN_ARRAY
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken END_ARRAY
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken BEGIN_OBJECT
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken END_OBJECT
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken NAME
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken STRING
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken NUMBER
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken BOOLEAN
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken NULL
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken END_DOCUMENT
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken[] values()
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken valueOf(java.lang.String)
com.google.gson.stream.JsonWriter
com.google.gson.stream.JsonWriter: JsonWriter(java.io.Writer)
com.google.gson.stream.JsonWriter: void setIndent(java.lang.String)
com.google.gson.stream.JsonWriter: void setLenient(boolean)
com.google.gson.stream.JsonWriter: boolean isLenient()
com.google.gson.stream.JsonWriter: void setHtmlSafe(boolean)
com.google.gson.stream.JsonWriter: boolean isHtmlSafe()
com.google.gson.stream.JsonWriter: void setSerializeNulls(boolean)
com.google.gson.stream.JsonWriter: boolean getSerializeNulls()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginArray()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endArray()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginObject()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endObject()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter name(java.lang.String)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.String)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter jsonValue(java.lang.String)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(boolean)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.Boolean)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(float)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(double)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(long)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.Number)
com.google.gson.stream.JsonWriter: void flush()
com.google.gson.stream.JsonWriter: void close()
com.google.gson.stream.MalformedJsonException
com.google.gson.stream.MalformedJsonException: MalformedJsonException(java.lang.String)
com.google.gson.stream.MalformedJsonException: MalformedJsonException(java.lang.String,java.lang.Throwable)
com.google.gson.stream.MalformedJsonException: MalformedJsonException(java.lang.Throwable)
com.mongodb.AuthenticationMechanism: com.mongodb.AuthenticationMechanism[] values()
com.mongodb.AuthenticationMechanism: com.mongodb.AuthenticationMechanism valueOf(java.lang.String)
com.mongodb.CursorType: com.mongodb.CursorType[] values()
com.mongodb.CursorType: com.mongodb.CursorType valueOf(java.lang.String)
com.mongodb.ErrorCategory: com.mongodb.ErrorCategory[] values()
com.mongodb.ErrorCategory: com.mongodb.ErrorCategory valueOf(java.lang.String)
com.mongodb.ExplainVerbosity: com.mongodb.ExplainVerbosity[] values()
com.mongodb.ExplainVerbosity: com.mongodb.ExplainVerbosity valueOf(java.lang.String)
com.mongodb.ReadConcernLevel: com.mongodb.ReadConcernLevel[] values()
com.mongodb.ReadConcernLevel: com.mongodb.ReadConcernLevel valueOf(java.lang.String)
com.mongodb.ServerApiVersion: com.mongodb.ServerApiVersion[] values()
com.mongodb.ServerApiVersion: com.mongodb.ServerApiVersion valueOf(java.lang.String)
com.mongodb.annotations.Beta$Reason: com.mongodb.annotations.Beta$Reason[] values()
com.mongodb.annotations.Beta$Reason: com.mongodb.annotations.Beta$Reason valueOf(java.lang.String)
com.mongodb.client.internal.ClientSessionImpl$TransactionState: com.mongodb.client.internal.ClientSessionImpl$TransactionState[] values()
com.mongodb.client.internal.ClientSessionImpl$TransactionState: com.mongodb.client.internal.ClientSessionImpl$TransactionState valueOf(java.lang.String)
com.mongodb.client.model.BucketGranularity: com.mongodb.client.model.BucketGranularity[] values()
com.mongodb.client.model.BucketGranularity: com.mongodb.client.model.BucketGranularity valueOf(java.lang.String)
com.mongodb.client.model.CollationAlternate: com.mongodb.client.model.CollationAlternate[] values()
com.mongodb.client.model.CollationAlternate: com.mongodb.client.model.CollationAlternate valueOf(java.lang.String)
com.mongodb.client.model.CollationCaseFirst: com.mongodb.client.model.CollationCaseFirst[] values()
com.mongodb.client.model.CollationCaseFirst: com.mongodb.client.model.CollationCaseFirst valueOf(java.lang.String)
com.mongodb.client.model.CollationMaxVariable: com.mongodb.client.model.CollationMaxVariable[] values()
com.mongodb.client.model.CollationMaxVariable: com.mongodb.client.model.CollationMaxVariable valueOf(java.lang.String)
com.mongodb.client.model.CollationStrength: com.mongodb.client.model.CollationStrength[] values()
com.mongodb.client.model.CollationStrength: com.mongodb.client.model.CollationStrength valueOf(java.lang.String)
com.mongodb.client.model.Filters$OrNorFilter$Operator: com.mongodb.client.model.Filters$OrNorFilter$Operator[] values()
com.mongodb.client.model.Filters$OrNorFilter$Operator: com.mongodb.client.model.Filters$OrNorFilter$Operator valueOf(java.lang.String)
com.mongodb.client.model.MapReduceAction: com.mongodb.client.model.MapReduceAction[] values()
com.mongodb.client.model.MapReduceAction: com.mongodb.client.model.MapReduceAction valueOf(java.lang.String)
com.mongodb.client.model.MergeOptions$WhenMatched: com.mongodb.client.model.MergeOptions$WhenMatched[] values()
com.mongodb.client.model.MergeOptions$WhenMatched: com.mongodb.client.model.MergeOptions$WhenMatched valueOf(java.lang.String)
com.mongodb.client.model.MergeOptions$WhenNotMatched: com.mongodb.client.model.MergeOptions$WhenNotMatched[] values()
com.mongodb.client.model.MergeOptions$WhenNotMatched: com.mongodb.client.model.MergeOptions$WhenNotMatched valueOf(java.lang.String)
com.mongodb.client.model.MongoTimeUnit: com.mongodb.client.model.MongoTimeUnit[] values()
com.mongodb.client.model.MongoTimeUnit: com.mongodb.client.model.MongoTimeUnit valueOf(java.lang.String)
com.mongodb.client.model.ReturnDocument: com.mongodb.client.model.ReturnDocument[] values()
com.mongodb.client.model.ReturnDocument: com.mongodb.client.model.ReturnDocument valueOf(java.lang.String)
com.mongodb.client.model.TimeSeriesGranularity: com.mongodb.client.model.TimeSeriesGranularity[] values()
com.mongodb.client.model.TimeSeriesGranularity: com.mongodb.client.model.TimeSeriesGranularity valueOf(java.lang.String)
com.mongodb.client.model.ValidationAction: com.mongodb.client.model.ValidationAction[] values()
com.mongodb.client.model.ValidationAction: com.mongodb.client.model.ValidationAction valueOf(java.lang.String)
com.mongodb.client.model.ValidationLevel: com.mongodb.client.model.ValidationLevel[] values()
com.mongodb.client.model.ValidationLevel: com.mongodb.client.model.ValidationLevel valueOf(java.lang.String)
com.mongodb.client.model.WindowOutputFields$ParamName: com.mongodb.client.model.WindowOutputFields$ParamName[] values()
com.mongodb.client.model.WindowOutputFields$ParamName: com.mongodb.client.model.WindowOutputFields$ParamName valueOf(java.lang.String)
com.mongodb.client.model.Windows$Bound: com.mongodb.client.model.Windows$Bound[] values()
com.mongodb.client.model.Windows$Bound: com.mongodb.client.model.Windows$Bound valueOf(java.lang.String)
com.mongodb.client.model.changestream.FullDocument: com.mongodb.client.model.changestream.FullDocument[] values()
com.mongodb.client.model.changestream.FullDocument: com.mongodb.client.model.changestream.FullDocument valueOf(java.lang.String)
com.mongodb.client.model.changestream.FullDocumentBeforeChange: com.mongodb.client.model.changestream.FullDocumentBeforeChange[] values()
com.mongodb.client.model.changestream.FullDocumentBeforeChange: com.mongodb.client.model.changestream.FullDocumentBeforeChange valueOf(java.lang.String)
com.mongodb.client.model.changestream.OperationType: com.mongodb.client.model.changestream.OperationType[] values()
com.mongodb.client.model.changestream.OperationType: com.mongodb.client.model.changestream.OperationType valueOf(java.lang.String)
com.mongodb.client.model.geojson.CoordinateReferenceSystemType: com.mongodb.client.model.geojson.CoordinateReferenceSystemType[] values()
com.mongodb.client.model.geojson.CoordinateReferenceSystemType: com.mongodb.client.model.geojson.CoordinateReferenceSystemType valueOf(java.lang.String)
com.mongodb.client.model.geojson.GeoJsonObjectType: com.mongodb.client.model.geojson.GeoJsonObjectType[] values()
com.mongodb.client.model.geojson.GeoJsonObjectType: com.mongodb.client.model.geojson.GeoJsonObjectType valueOf(java.lang.String)
com.mongodb.client.model.mql.MqlUnchecked$Unchecked: com.mongodb.client.model.mql.MqlUnchecked$Unchecked[] values()
com.mongodb.client.model.mql.MqlUnchecked$Unchecked: com.mongodb.client.model.mql.MqlUnchecked$Unchecked valueOf(java.lang.String)
com.mongodb.connection.ClusterConnectionMode: com.mongodb.connection.ClusterConnectionMode[] values()
com.mongodb.connection.ClusterConnectionMode: com.mongodb.connection.ClusterConnectionMode valueOf(java.lang.String)
com.mongodb.connection.ClusterType: com.mongodb.connection.ClusterType[] values()
com.mongodb.connection.ClusterType: com.mongodb.connection.ClusterType valueOf(java.lang.String)
com.mongodb.connection.ServerConnectionState: com.mongodb.connection.ServerConnectionState[] values()
com.mongodb.connection.ServerConnectionState: com.mongodb.connection.ServerConnectionState valueOf(java.lang.String)
com.mongodb.connection.ServerType: com.mongodb.connection.ServerType[] values()
com.mongodb.connection.ServerType: com.mongodb.connection.ServerType valueOf(java.lang.String)
com.mongodb.event.ConnectionCheckOutFailedEvent$Reason: com.mongodb.event.ConnectionCheckOutFailedEvent$Reason[] values()
com.mongodb.event.ConnectionCheckOutFailedEvent$Reason: com.mongodb.event.ConnectionCheckOutFailedEvent$Reason valueOf(java.lang.String)
com.mongodb.event.ConnectionClosedEvent$Reason: com.mongodb.event.ConnectionClosedEvent$Reason[] values()
com.mongodb.event.ConnectionClosedEvent$Reason: com.mongodb.event.ConnectionClosedEvent$Reason valueOf(java.lang.String)
com.mongodb.event.ConnectionRemovedEvent$Reason: com.mongodb.event.ConnectionRemovedEvent$Reason[] values()
com.mongodb.event.ConnectionRemovedEvent$Reason: com.mongodb.event.ConnectionRemovedEvent$Reason valueOf(java.lang.String)
com.mongodb.internal.VisibleForTesting$AccessModifier: com.mongodb.internal.VisibleForTesting$AccessModifier[] values()
com.mongodb.internal.VisibleForTesting$AccessModifier: com.mongodb.internal.VisibleForTesting$AccessModifier valueOf(java.lang.String)
com.mongodb.internal.bulk.WriteRequest$Type: com.mongodb.internal.bulk.WriteRequest$Type[] values()
com.mongodb.internal.bulk.WriteRequest$Type: com.mongodb.internal.bulk.WriteRequest$Type valueOf(java.lang.String)
com.mongodb.internal.client.model.AggregationLevel: com.mongodb.internal.client.model.AggregationLevel[] values()
com.mongodb.internal.client.model.AggregationLevel: com.mongodb.internal.client.model.AggregationLevel valueOf(java.lang.String)
com.mongodb.internal.client.model.CountStrategy: com.mongodb.internal.client.model.CountStrategy[] values()
com.mongodb.internal.client.model.CountStrategy: com.mongodb.internal.client.model.CountStrategy valueOf(java.lang.String)
com.mongodb.internal.client.model.changestream.ChangeStreamLevel: com.mongodb.internal.client.model.changestream.ChangeStreamLevel[] values()
com.mongodb.internal.client.model.changestream.ChangeStreamLevel: com.mongodb.internal.client.model.changestream.ChangeStreamLevel valueOf(java.lang.String)
com.mongodb.internal.connection.Connection$PinningMode: com.mongodb.internal.connection.Connection$PinningMode[] values()
com.mongodb.internal.connection.Connection$PinningMode: com.mongodb.internal.connection.Connection$PinningMode valueOf(java.lang.String)
com.mongodb.internal.connection.DefaultConnectionPool$AsyncWorkManager$State: com.mongodb.internal.connection.DefaultConnectionPool$AsyncWorkManager$State[] values()
com.mongodb.internal.connection.DefaultConnectionPool$AsyncWorkManager$State: com.mongodb.internal.connection.DefaultConnectionPool$AsyncWorkManager$State valueOf(java.lang.String)
com.mongodb.internal.connection.DefaultConnectionPool$OpenWithConcurrencyLimitMode: com.mongodb.internal.connection.DefaultConnectionPool$OpenWithConcurrencyLimitMode[] values()
com.mongodb.internal.connection.DefaultConnectionPool$OpenWithConcurrencyLimitMode: com.mongodb.internal.connection.DefaultConnectionPool$OpenWithConcurrencyLimitMode valueOf(java.lang.String)
com.mongodb.internal.connection.OpCode: com.mongodb.internal.connection.OpCode[] values()
com.mongodb.internal.connection.OpCode: com.mongodb.internal.connection.OpCode valueOf(java.lang.String)
com.mongodb.internal.connection.SplittablePayload$Type: com.mongodb.internal.connection.SplittablePayload$Type[] values()
com.mongodb.internal.connection.SplittablePayload$Type: com.mongodb.internal.connection.SplittablePayload$Type valueOf(java.lang.String)
com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$Shutdown: com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$Shutdown[] values()
com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$Shutdown: com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$Shutdown valueOf(java.lang.String)
com.mongodb.internal.logging.StructuredLogMessage$Component: com.mongodb.internal.logging.StructuredLogMessage$Component[] values()
com.mongodb.internal.logging.StructuredLogMessage$Component: com.mongodb.internal.logging.StructuredLogMessage$Component valueOf(java.lang.String)
com.mongodb.internal.logging.StructuredLogMessage$Level: com.mongodb.internal.logging.StructuredLogMessage$Level[] values()
com.mongodb.internal.logging.StructuredLogMessage$Level: com.mongodb.internal.logging.StructuredLogMessage$Level valueOf(java.lang.String)
com.mongodb.internal.operation.QueryBatchCursor$State: com.mongodb.internal.operation.QueryBatchCursor$State[] values()
com.mongodb.internal.operation.QueryBatchCursor$State: com.mongodb.internal.operation.QueryBatchCursor$State valueOf(java.lang.String)
de.themoep.inventorygui.GuiElementGroup$Alignment: de.themoep.inventorygui.GuiElementGroup$Alignment[] values()
de.themoep.inventorygui.GuiElementGroup$Alignment: de.themoep.inventorygui.GuiElementGroup$Alignment valueOf(java.lang.String)
de.themoep.inventorygui.GuiPageElement$PageAction: de.themoep.inventorygui.GuiPageElement$PageAction[] values()
de.themoep.inventorygui.GuiPageElement$PageAction: de.themoep.inventorygui.GuiPageElement$PageAction valueOf(java.lang.String)
de.themoep.inventorygui.InventoryGui
de.themoep.inventorygui.InventoryGui$GuiListener
de.themoep.inventorygui.InventoryGui$GuiListener: void onInventoryClick(org.bukkit.event.inventory.InventoryClickEvent)
de.themoep.inventorygui.InventoryGui$GuiListener: void onInventoryDrag(org.bukkit.event.inventory.InventoryDragEvent)
de.themoep.inventorygui.InventoryGui$GuiListener: void onInventoryClose(org.bukkit.event.inventory.InventoryCloseEvent)
de.themoep.inventorygui.InventoryGui$GuiListener: void onInventoryMoveItem(org.bukkit.event.inventory.InventoryMoveItemEvent)
de.themoep.inventorygui.InventoryGui$GuiListener: void onDispense(org.bukkit.event.block.BlockDispenseEvent)
de.themoep.inventorygui.InventoryGui$GuiListener: void onBlockBreak(org.bukkit.event.block.BlockBreakEvent)
de.themoep.inventorygui.InventoryGui$GuiListener: void onEntityDeath(org.bukkit.event.entity.EntityDeathEvent)
de.themoep.inventorygui.InventoryGui$GuiListener: void onPluginDisable(org.bukkit.event.server.PluginDisableEvent)
de.themoep.inventorygui.InventoryGui$GuiListener$ItemSwapGuiListener
de.themoep.inventorygui.InventoryGui$GuiListener$ItemSwapGuiListener: void onInventoryMoveItem(org.bukkit.event.player.PlayerSwapHandItemsEvent)
de.themoep.inventorygui.InventoryGui$OptionalListener
de.themoep.inventorygui.InventoryGui$UnregisterableListener
it.mikeslab.Main
it.mikeslab.Main: it.mikeslab.Main instance
it.mikeslab.Main: org.bukkit.scheduler.BukkitTask limitTask
it.mikeslab.Main: it.mikeslab.util.GSONUtil transactionGson
it.mikeslab.Main: it.mikeslab.util.GSONUtil playerDataGson
it.mikeslab.Main: it.mikeslab.util.transactions.EconomyManager economyManager
it.mikeslab.Main: it.mikeslab.util.creditcard.CardTypeUtil cardTypeUtil
it.mikeslab.Main: it.mikeslab.util.transactions.TransactionUtil transactionUtil
it.mikeslab.Main: it.mikeslab.util.creditcard.CreditCardUtil creditCardUtil
it.mikeslab.Main: co.aikar.commands.BukkitCommandManager commandManager
it.mikeslab.Main: it.mikeslab.util.database.MongoDBHandler transactionHandler
it.mikeslab.Main: it.mikeslab.vault.EconomyCore economyCore
it.mikeslab.Main: Main()
it.mikeslab.Main: void onEnable()
it.mikeslab.Main: void onDisable()
it.mikeslab.Main: boolean setupEconomy(it.mikeslab.vault.EconomyCore)
it.mikeslab.Main: void setupCommandFramework()
it.mikeslab.Main: boolean useMongo()
it.mikeslab.Main: org.bukkit.scheduler.BukkitTask getLimitTask()
it.mikeslab.Main: it.mikeslab.util.GSONUtil getTransactionGson()
it.mikeslab.Main: it.mikeslab.util.GSONUtil getPlayerDataGson()
it.mikeslab.Main: it.mikeslab.util.transactions.EconomyManager getEconomyManager()
it.mikeslab.Main: it.mikeslab.util.creditcard.CardTypeUtil getCardTypeUtil()
it.mikeslab.Main: it.mikeslab.util.transactions.TransactionUtil getTransactionUtil()
it.mikeslab.Main: it.mikeslab.util.creditcard.CreditCardUtil getCreditCardUtil()
it.mikeslab.Main: co.aikar.commands.BukkitCommandManager getCommandManager()
it.mikeslab.Main: it.mikeslab.util.database.MongoDBHandler getTransactionHandler()
it.mikeslab.Main: it.mikeslab.vault.EconomyCore getEconomyCore()
it.mikeslab.Main: it.mikeslab.Main getInstance()
it.mikeslab.Main: java.util.Collection lambda$setupCommandFramework$0(co.aikar.commands.BukkitCommandCompletionContext)
it.mikeslab.Perms
it.mikeslab.Perms: java.lang.String ATM_CMD
it.mikeslab.Perms: java.lang.String ATM_USE
it.mikeslab.Perms: java.lang.String ATM_REMOVE
it.mikeslab.Perms: java.lang.String ATM_PLACE
it.mikeslab.Perms: java.lang.String ATM_ADMIN
it.mikeslab.Perms: java.lang.String CREDITCARD_CMD
it.mikeslab.Perms: java.lang.String CREDITCARD_CREATE
it.mikeslab.Perms: java.lang.String CREDITCARD_DELETE
it.mikeslab.Perms: java.lang.String CREDITCARD_BALANCE
it.mikeslab.Perms: java.lang.String CREDITCARD_TRANSACTIONS
it.mikeslab.Perms: java.lang.String CREDITCARD_TRANSACTIONS_OTHERS
it.mikeslab.Perms: java.lang.String CREDITCARD_TYPES_PREVIEW
it.mikeslab.Perms: java.lang.String WIRE_TRANSFER_CMD
it.mikeslab.Perms: java.lang.String WIRE_TRANSFER_SEND
it.mikeslab.Perms: java.lang.String BANK_CMD
it.mikeslab.Perms: java.lang.String BANK_GIVE
it.mikeslab.Perms: java.lang.String BANK_TAKE
it.mikeslab.Perms: java.lang.String BANK_RESET
it.mikeslab.Perms: java.lang.String BANK_SET
it.mikeslab.Perms: Perms()
it.mikeslab.anvilgui.AnvilGUI
it.mikeslab.anvilgui.AnvilGUI: it.mikeslab.anvilgui.version.VersionWrapper WRAPPER
it.mikeslab.anvilgui.AnvilGUI: org.bukkit.inventory.ItemStack AIR
it.mikeslab.anvilgui.AnvilGUI: org.bukkit.plugin.Plugin plugin
it.mikeslab.anvilgui.AnvilGUI: org.bukkit.entity.Player player
it.mikeslab.anvilgui.AnvilGUI: java.lang.String inventoryTitle
it.mikeslab.anvilgui.AnvilGUI: org.bukkit.inventory.ItemStack[] initialContents
it.mikeslab.anvilgui.AnvilGUI: boolean preventClose
it.mikeslab.anvilgui.AnvilGUI: java.util.Set interactableSlots
it.mikeslab.anvilgui.AnvilGUI: java.util.function.Consumer closeListener
it.mikeslab.anvilgui.AnvilGUI: java.util.function.Function completeFunction
it.mikeslab.anvilgui.AnvilGUI: java.util.function.Consumer inputLeftClickListener
it.mikeslab.anvilgui.AnvilGUI: java.util.function.Consumer inputRightClickListener
it.mikeslab.anvilgui.AnvilGUI: int containerId
it.mikeslab.anvilgui.AnvilGUI: org.bukkit.inventory.Inventory inventory
it.mikeslab.anvilgui.AnvilGUI: it.mikeslab.anvilgui.AnvilGUI$ListenUp listener
it.mikeslab.anvilgui.AnvilGUI: boolean open
it.mikeslab.anvilgui.AnvilGUI: AnvilGUI(org.bukkit.plugin.Plugin,org.bukkit.entity.Player,java.lang.String,org.bukkit.inventory.ItemStack[],boolean,java.util.Set,java.util.function.Consumer,java.util.function.Consumer,java.util.function.Consumer,java.util.function.Function)
it.mikeslab.anvilgui.AnvilGUI: void openInventory()
it.mikeslab.anvilgui.AnvilGUI: void closeInventory()
it.mikeslab.anvilgui.AnvilGUI: void closeInventory(boolean)
it.mikeslab.anvilgui.AnvilGUI: org.bukkit.inventory.Inventory getInventory()
it.mikeslab.anvilgui.AnvilGUI: org.bukkit.inventory.ItemStack notNull(org.bukkit.inventory.ItemStack)
it.mikeslab.anvilgui.AnvilGUI: org.bukkit.inventory.Inventory access$100(it.mikeslab.anvilgui.AnvilGUI)
it.mikeslab.anvilgui.AnvilGUI: java.util.Set access$200(it.mikeslab.anvilgui.AnvilGUI)
it.mikeslab.anvilgui.AnvilGUI: org.bukkit.inventory.ItemStack access$300(it.mikeslab.anvilgui.AnvilGUI,org.bukkit.inventory.ItemStack)
it.mikeslab.anvilgui.AnvilGUI: org.bukkit.entity.Player access$400(it.mikeslab.anvilgui.AnvilGUI)
it.mikeslab.anvilgui.AnvilGUI: java.util.function.Function access$500(it.mikeslab.anvilgui.AnvilGUI)
it.mikeslab.anvilgui.AnvilGUI: java.util.function.Consumer access$600(it.mikeslab.anvilgui.AnvilGUI)
it.mikeslab.anvilgui.AnvilGUI: java.util.function.Consumer access$700(it.mikeslab.anvilgui.AnvilGUI)
it.mikeslab.anvilgui.AnvilGUI: boolean access$800(it.mikeslab.anvilgui.AnvilGUI)
it.mikeslab.anvilgui.AnvilGUI: void access$900(it.mikeslab.anvilgui.AnvilGUI,boolean)
it.mikeslab.anvilgui.AnvilGUI: boolean access$1000(it.mikeslab.anvilgui.AnvilGUI)
it.mikeslab.anvilgui.AnvilGUI: org.bukkit.plugin.Plugin access$1100(it.mikeslab.anvilgui.AnvilGUI)
it.mikeslab.anvilgui.AnvilGUI: void access$1200(it.mikeslab.anvilgui.AnvilGUI)
it.mikeslab.anvilgui.AnvilGUI: AnvilGUI(org.bukkit.plugin.Plugin,org.bukkit.entity.Player,java.lang.String,org.bukkit.inventory.ItemStack[],boolean,java.util.Set,java.util.function.Consumer,java.util.function.Consumer,java.util.function.Consumer,java.util.function.Function,it.mikeslab.anvilgui.AnvilGUI$1)
it.mikeslab.anvilgui.AnvilGUI: void <clinit>()
it.mikeslab.anvilgui.AnvilGUI$1
it.mikeslab.anvilgui.AnvilGUI$Builder
it.mikeslab.anvilgui.AnvilGUI$Builder: java.util.function.Consumer closeListener
it.mikeslab.anvilgui.AnvilGUI$Builder: boolean preventClose
it.mikeslab.anvilgui.AnvilGUI$Builder: java.util.Set interactableSlots
it.mikeslab.anvilgui.AnvilGUI$Builder: java.util.function.Consumer inputLeftClickListener
it.mikeslab.anvilgui.AnvilGUI$Builder: java.util.function.Consumer inputRightClickListener
it.mikeslab.anvilgui.AnvilGUI$Builder: java.util.function.Function completeFunction
it.mikeslab.anvilgui.AnvilGUI$Builder: org.bukkit.plugin.Plugin plugin
it.mikeslab.anvilgui.AnvilGUI$Builder: java.lang.String title
it.mikeslab.anvilgui.AnvilGUI$Builder: java.lang.String itemText
it.mikeslab.anvilgui.AnvilGUI$Builder: org.bukkit.inventory.ItemStack itemLeft
it.mikeslab.anvilgui.AnvilGUI$Builder: org.bukkit.inventory.ItemStack itemRight
it.mikeslab.anvilgui.AnvilGUI$Builder: org.bukkit.inventory.ItemStack itemOutput
it.mikeslab.anvilgui.AnvilGUI$Builder: AnvilGUI$Builder()
it.mikeslab.anvilgui.AnvilGUI$Builder: it.mikeslab.anvilgui.AnvilGUI$Builder preventClose()
it.mikeslab.anvilgui.AnvilGUI$Builder: it.mikeslab.anvilgui.AnvilGUI$Builder interactableSlots(int[])
it.mikeslab.anvilgui.AnvilGUI$Builder: it.mikeslab.anvilgui.AnvilGUI$Builder onClose(java.util.function.Consumer)
it.mikeslab.anvilgui.AnvilGUI$Builder: it.mikeslab.anvilgui.AnvilGUI$Builder onLeftInputClick(java.util.function.Consumer)
it.mikeslab.anvilgui.AnvilGUI$Builder: it.mikeslab.anvilgui.AnvilGUI$Builder onRightInputClick(java.util.function.Consumer)
it.mikeslab.anvilgui.AnvilGUI$Builder: it.mikeslab.anvilgui.AnvilGUI$Builder onComplete(java.util.function.BiFunction)
it.mikeslab.anvilgui.AnvilGUI$Builder: it.mikeslab.anvilgui.AnvilGUI$Builder onComplete(java.util.function.Function)
it.mikeslab.anvilgui.AnvilGUI$Builder: it.mikeslab.anvilgui.AnvilGUI$Builder plugin(org.bukkit.plugin.Plugin)
it.mikeslab.anvilgui.AnvilGUI$Builder: it.mikeslab.anvilgui.AnvilGUI$Builder text(java.lang.String)
it.mikeslab.anvilgui.AnvilGUI$Builder: it.mikeslab.anvilgui.AnvilGUI$Builder title(java.lang.String)
it.mikeslab.anvilgui.AnvilGUI$Builder: it.mikeslab.anvilgui.AnvilGUI$Builder item(org.bukkit.inventory.ItemStack)
it.mikeslab.anvilgui.AnvilGUI$Builder: it.mikeslab.anvilgui.AnvilGUI$Builder itemLeft(org.bukkit.inventory.ItemStack)
it.mikeslab.anvilgui.AnvilGUI$Builder: it.mikeslab.anvilgui.AnvilGUI$Builder itemRight(org.bukkit.inventory.ItemStack)
it.mikeslab.anvilgui.AnvilGUI$Builder: it.mikeslab.anvilgui.AnvilGUI$Builder itemOutput(org.bukkit.inventory.ItemStack)
it.mikeslab.anvilgui.AnvilGUI$Builder: it.mikeslab.anvilgui.AnvilGUI open(org.bukkit.entity.Player)
it.mikeslab.anvilgui.AnvilGUI$Builder: java.util.List lambda$onComplete$0(java.util.function.BiFunction,it.mikeslab.anvilgui.AnvilGUI$Completion)
it.mikeslab.anvilgui.AnvilGUI$Completion
it.mikeslab.anvilgui.AnvilGUI$Completion: org.bukkit.inventory.ItemStack leftItem
it.mikeslab.anvilgui.AnvilGUI$Completion: org.bukkit.inventory.ItemStack rightItem
it.mikeslab.anvilgui.AnvilGUI$Completion: org.bukkit.inventory.ItemStack outputItem
it.mikeslab.anvilgui.AnvilGUI$Completion: org.bukkit.entity.Player player
it.mikeslab.anvilgui.AnvilGUI$Completion: java.lang.String text
it.mikeslab.anvilgui.AnvilGUI$Completion: AnvilGUI$Completion(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack,org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.AnvilGUI$Completion: org.bukkit.inventory.ItemStack getLeftItem()
it.mikeslab.anvilgui.AnvilGUI$Completion: org.bukkit.inventory.ItemStack getRightItem()
it.mikeslab.anvilgui.AnvilGUI$Completion: org.bukkit.inventory.ItemStack getOutputItem()
it.mikeslab.anvilgui.AnvilGUI$Completion: org.bukkit.entity.Player getPlayer()
it.mikeslab.anvilgui.AnvilGUI$Completion: java.lang.String getText()
it.mikeslab.anvilgui.AnvilGUI$Completion: org.bukkit.entity.Player access$1400(it.mikeslab.anvilgui.AnvilGUI$Completion)
it.mikeslab.anvilgui.AnvilGUI$Completion: java.lang.String access$1500(it.mikeslab.anvilgui.AnvilGUI$Completion)
it.mikeslab.anvilgui.AnvilGUI$ListenUp
it.mikeslab.anvilgui.AnvilGUI$ListenUp: it.mikeslab.anvilgui.AnvilGUI this$0
it.mikeslab.anvilgui.AnvilGUI$ListenUp: AnvilGUI$ListenUp(it.mikeslab.anvilgui.AnvilGUI)
it.mikeslab.anvilgui.AnvilGUI$ListenUp: void onInventoryClick(org.bukkit.event.inventory.InventoryClickEvent)
it.mikeslab.anvilgui.AnvilGUI$ListenUp: void onInventoryDrag(org.bukkit.event.inventory.InventoryDragEvent)
it.mikeslab.anvilgui.AnvilGUI$ListenUp: void onInventoryClose(org.bukkit.event.inventory.InventoryCloseEvent)
it.mikeslab.anvilgui.AnvilGUI$ListenUp: void lambda$onInventoryClose$0(it.mikeslab.anvilgui.AnvilGUI)
it.mikeslab.anvilgui.AnvilGUI$ListenUp: AnvilGUI$ListenUp(it.mikeslab.anvilgui.AnvilGUI,it.mikeslab.anvilgui.AnvilGUI$1)
it.mikeslab.anvilgui.AnvilGUI$Response
it.mikeslab.anvilgui.AnvilGUI$Response: AnvilGUI$Response()
it.mikeslab.anvilgui.AnvilGUI$Response: java.util.List close()
it.mikeslab.anvilgui.AnvilGUI$Response: java.util.List text(java.lang.String)
it.mikeslab.anvilgui.AnvilGUI$Response: java.util.List openInventory(org.bukkit.inventory.Inventory)
it.mikeslab.anvilgui.AnvilGUI$ResponseAction
it.mikeslab.anvilgui.AnvilGUI$ResponseAction: it.mikeslab.anvilgui.AnvilGUI$ResponseAction replaceInputText(java.lang.String)
it.mikeslab.anvilgui.AnvilGUI$ResponseAction: it.mikeslab.anvilgui.AnvilGUI$ResponseAction openInventory(org.bukkit.inventory.Inventory)
it.mikeslab.anvilgui.AnvilGUI$ResponseAction: it.mikeslab.anvilgui.AnvilGUI$ResponseAction close()
it.mikeslab.anvilgui.AnvilGUI$ResponseAction: it.mikeslab.anvilgui.AnvilGUI$ResponseAction run(java.lang.Runnable)
it.mikeslab.anvilgui.AnvilGUI$ResponseAction: void lambda$run$3(java.lang.Runnable,it.mikeslab.anvilgui.AnvilGUI,org.bukkit.entity.Player)
it.mikeslab.anvilgui.AnvilGUI$ResponseAction: void lambda$close$2(it.mikeslab.anvilgui.AnvilGUI,org.bukkit.entity.Player)
it.mikeslab.anvilgui.AnvilGUI$ResponseAction: void lambda$openInventory$1(org.bukkit.inventory.Inventory,it.mikeslab.anvilgui.AnvilGUI,org.bukkit.entity.Player)
it.mikeslab.anvilgui.AnvilGUI$ResponseAction: void lambda$replaceInputText$0(java.lang.String,it.mikeslab.anvilgui.AnvilGUI,org.bukkit.entity.Player)
it.mikeslab.anvilgui.AnvilGUI$Slot
it.mikeslab.anvilgui.AnvilGUI$Slot: int[] values
it.mikeslab.anvilgui.AnvilGUI$Slot: int INPUT_LEFT
it.mikeslab.anvilgui.AnvilGUI$Slot: int INPUT_RIGHT
it.mikeslab.anvilgui.AnvilGUI$Slot: int OUTPUT
it.mikeslab.anvilgui.AnvilGUI$Slot: AnvilGUI$Slot()
it.mikeslab.anvilgui.AnvilGUI$Slot: int[] values()
it.mikeslab.anvilgui.AnvilGUI$Slot: void <clinit>()
it.mikeslab.anvilgui.version.VersionMatcher
it.mikeslab.anvilgui.version.VersionMatcher: VersionMatcher()
it.mikeslab.anvilgui.version.VersionMatcher: it.mikeslab.anvilgui.version.VersionWrapper match()
it.mikeslab.anvilgui.version.VersionWrapper
it.mikeslab.anvilgui.version.VersionWrapper: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.VersionWrapper: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.VersionWrapper: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.VersionWrapper: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.VersionWrapper: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.VersionWrapper: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.VersionWrapper: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.VersionWrapper: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.VersionWrapper: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.VersionWrapper: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_10_R1
it.mikeslab.anvilgui.version.Wrapper1_10_R1: Wrapper1_10_R1()
it.mikeslab.anvilgui.version.Wrapper1_10_R1: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_10_R1: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_10_R1: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_10_R1: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_10_R1: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_10_R1: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_10_R1: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_10_R1: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_10_R1: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_10_R1: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_10_R1: net.minecraft.server.v1_10_R1.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_10_R1$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_10_R1$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_10_R1 this$0
it.mikeslab.anvilgui.version.Wrapper1_10_R1$AnvilContainer: Wrapper1_10_R1$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_10_R1,net.minecraft.server.v1_10_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_10_R1$AnvilContainer: boolean a(net.minecraft.server.v1_10_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_10_R1$AnvilContainer: void b(net.minecraft.server.v1_10_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_11_R1
it.mikeslab.anvilgui.version.Wrapper1_11_R1: Wrapper1_11_R1()
it.mikeslab.anvilgui.version.Wrapper1_11_R1: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_11_R1: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_11_R1: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_11_R1: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_11_R1: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_11_R1: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_11_R1: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_11_R1: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_11_R1: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_11_R1: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_11_R1: net.minecraft.server.v1_11_R1.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_11_R1$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_11_R1$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_11_R1 this$0
it.mikeslab.anvilgui.version.Wrapper1_11_R1$AnvilContainer: Wrapper1_11_R1$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_11_R1,net.minecraft.server.v1_11_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_11_R1$AnvilContainer: boolean a(net.minecraft.server.v1_11_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_11_R1$AnvilContainer: void b(net.minecraft.server.v1_11_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_12_R1
it.mikeslab.anvilgui.version.Wrapper1_12_R1: Wrapper1_12_R1()
it.mikeslab.anvilgui.version.Wrapper1_12_R1: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_12_R1: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_12_R1: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_12_R1: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_12_R1: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_12_R1: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_12_R1: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_12_R1: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_12_R1: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_12_R1: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_12_R1: net.minecraft.server.v1_12_R1.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_12_R1$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_12_R1$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_12_R1 this$0
it.mikeslab.anvilgui.version.Wrapper1_12_R1$AnvilContainer: Wrapper1_12_R1$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_12_R1,net.minecraft.server.v1_12_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_12_R1$AnvilContainer: void e()
it.mikeslab.anvilgui.version.Wrapper1_12_R1$AnvilContainer: void b(net.minecraft.server.v1_12_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_12_R1$AnvilContainer: void a(net.minecraft.server.v1_12_R1.EntityHuman,net.minecraft.server.v1_12_R1.World,net.minecraft.server.v1_12_R1.IInventory)
it.mikeslab.anvilgui.version.Wrapper1_13_R1
it.mikeslab.anvilgui.version.Wrapper1_13_R1: Wrapper1_13_R1()
it.mikeslab.anvilgui.version.Wrapper1_13_R1: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_13_R1: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_13_R1: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_13_R1: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_13_R1: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_13_R1: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_13_R1: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_13_R1: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_13_R1: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_13_R1: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_13_R1: net.minecraft.server.v1_13_R1.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_13_R1$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_13_R1$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_13_R1 this$0
it.mikeslab.anvilgui.version.Wrapper1_13_R1$AnvilContainer: Wrapper1_13_R1$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_13_R1,net.minecraft.server.v1_13_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_13_R1$AnvilContainer: void d()
it.mikeslab.anvilgui.version.Wrapper1_13_R1$AnvilContainer: void b(net.minecraft.server.v1_13_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_13_R1$AnvilContainer: void a(net.minecraft.server.v1_13_R1.EntityHuman,net.minecraft.server.v1_13_R1.World,net.minecraft.server.v1_13_R1.IInventory)
it.mikeslab.anvilgui.version.Wrapper1_13_R2
it.mikeslab.anvilgui.version.Wrapper1_13_R2: Wrapper1_13_R2()
it.mikeslab.anvilgui.version.Wrapper1_13_R2: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_13_R2: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_13_R2: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_13_R2: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_13_R2: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_13_R2: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_13_R2: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_13_R2: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_13_R2: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_13_R2: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_13_R2: net.minecraft.server.v1_13_R2.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_13_R2$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_13_R2$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_13_R2 this$0
it.mikeslab.anvilgui.version.Wrapper1_13_R2$AnvilContainer: Wrapper1_13_R2$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_13_R2,net.minecraft.server.v1_13_R2.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_13_R2$AnvilContainer: void d()
it.mikeslab.anvilgui.version.Wrapper1_13_R2$AnvilContainer: void b(net.minecraft.server.v1_13_R2.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_13_R2$AnvilContainer: void a(net.minecraft.server.v1_13_R2.EntityHuman,net.minecraft.server.v1_13_R2.World,net.minecraft.server.v1_13_R2.IInventory)
it.mikeslab.anvilgui.version.Wrapper1_14_R1
it.mikeslab.anvilgui.version.Wrapper1_14_R1: boolean IS_ONE_FOURTEEN
it.mikeslab.anvilgui.version.Wrapper1_14_R1: Wrapper1_14_R1()
it.mikeslab.anvilgui.version.Wrapper1_14_R1: int getRealNextContainerId(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_14_R1: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_14_R1: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_14_R1: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_14_R1: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_14_R1: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_14_R1: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_14_R1: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_14_R1: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_14_R1: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_14_R1: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_14_R1: net.minecraft.server.v1_14_R1.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_14_R1: int access$000(it.mikeslab.anvilgui.version.Wrapper1_14_R1,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_14_R1$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_14_R1$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_14_R1 this$0
it.mikeslab.anvilgui.version.Wrapper1_14_R1$AnvilContainer: Wrapper1_14_R1$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_14_R1,org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_14_R1$AnvilContainer: void e()
it.mikeslab.anvilgui.version.Wrapper1_14_R1$AnvilContainer: void b(net.minecraft.server.v1_14_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_14_R1$AnvilContainer: void a(net.minecraft.server.v1_14_R1.EntityHuman,net.minecraft.server.v1_14_R1.World,net.minecraft.server.v1_14_R1.IInventory)
it.mikeslab.anvilgui.version.Wrapper1_14_R1$AnvilContainer: int getContainerId()
it.mikeslab.anvilgui.version.Wrapper1_15_R1
it.mikeslab.anvilgui.version.Wrapper1_15_R1: Wrapper1_15_R1()
it.mikeslab.anvilgui.version.Wrapper1_15_R1: int getRealNextContainerId(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_15_R1: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_15_R1: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_15_R1: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_15_R1: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_15_R1: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_15_R1: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_15_R1: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_15_R1: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_15_R1: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_15_R1: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_15_R1: net.minecraft.server.v1_15_R1.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_15_R1: int access$000(it.mikeslab.anvilgui.version.Wrapper1_15_R1,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_15_R1$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_15_R1$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_15_R1 this$0
it.mikeslab.anvilgui.version.Wrapper1_15_R1$AnvilContainer: Wrapper1_15_R1$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_15_R1,org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_15_R1$AnvilContainer: void e()
it.mikeslab.anvilgui.version.Wrapper1_15_R1$AnvilContainer: void b(net.minecraft.server.v1_15_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_15_R1$AnvilContainer: void a(net.minecraft.server.v1_15_R1.EntityHuman,net.minecraft.server.v1_15_R1.World,net.minecraft.server.v1_15_R1.IInventory)
it.mikeslab.anvilgui.version.Wrapper1_15_R1$AnvilContainer: int getContainerId()
it.mikeslab.anvilgui.version.Wrapper1_16_R1
it.mikeslab.anvilgui.version.Wrapper1_16_R1: Wrapper1_16_R1()
it.mikeslab.anvilgui.version.Wrapper1_16_R1: int getRealNextContainerId(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R1: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_16_R1: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R1: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_16_R1: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_16_R1: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R1: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_16_R1: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_16_R1: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R1: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_16_R1: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_16_R1: net.minecraft.server.v1_16_R1.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R1: int access$000(it.mikeslab.anvilgui.version.Wrapper1_16_R1,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R1$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_16_R1$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_16_R1 this$0
it.mikeslab.anvilgui.version.Wrapper1_16_R1$AnvilContainer: Wrapper1_16_R1$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_16_R1,org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_16_R1$AnvilContainer: void e()
it.mikeslab.anvilgui.version.Wrapper1_16_R1$AnvilContainer: void b(net.minecraft.server.v1_16_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_16_R1$AnvilContainer: void a(net.minecraft.server.v1_16_R1.EntityHuman,net.minecraft.server.v1_16_R1.World,net.minecraft.server.v1_16_R1.IInventory)
it.mikeslab.anvilgui.version.Wrapper1_16_R1$AnvilContainer: int getContainerId()
it.mikeslab.anvilgui.version.Wrapper1_16_R2
it.mikeslab.anvilgui.version.Wrapper1_16_R2: Wrapper1_16_R2()
it.mikeslab.anvilgui.version.Wrapper1_16_R2: int getRealNextContainerId(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R2: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_16_R2: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R2: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_16_R2: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_16_R2: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R2: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_16_R2: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_16_R2: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R2: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_16_R2: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_16_R2: net.minecraft.server.v1_16_R2.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R2: int access$000(it.mikeslab.anvilgui.version.Wrapper1_16_R2,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R2$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_16_R2$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_16_R2 this$0
it.mikeslab.anvilgui.version.Wrapper1_16_R2$AnvilContainer: Wrapper1_16_R2$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_16_R2,org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_16_R2$AnvilContainer: void e()
it.mikeslab.anvilgui.version.Wrapper1_16_R2$AnvilContainer: void b(net.minecraft.server.v1_16_R2.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_16_R2$AnvilContainer: void a(net.minecraft.server.v1_16_R2.EntityHuman,net.minecraft.server.v1_16_R2.World,net.minecraft.server.v1_16_R2.IInventory)
it.mikeslab.anvilgui.version.Wrapper1_16_R2$AnvilContainer: int getContainerId()
it.mikeslab.anvilgui.version.Wrapper1_16_R3
it.mikeslab.anvilgui.version.Wrapper1_16_R3: Wrapper1_16_R3()
it.mikeslab.anvilgui.version.Wrapper1_16_R3: int getRealNextContainerId(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R3: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_16_R3: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R3: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_16_R3: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_16_R3: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R3: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_16_R3: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_16_R3: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R3: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_16_R3: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_16_R3: net.minecraft.server.v1_16_R3.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R3: int access$000(it.mikeslab.anvilgui.version.Wrapper1_16_R3,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_16_R3$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_16_R3$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_16_R3 this$0
it.mikeslab.anvilgui.version.Wrapper1_16_R3$AnvilContainer: Wrapper1_16_R3$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_16_R3,org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_16_R3$AnvilContainer: void e()
it.mikeslab.anvilgui.version.Wrapper1_16_R3$AnvilContainer: void b(net.minecraft.server.v1_16_R3.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_16_R3$AnvilContainer: void a(net.minecraft.server.v1_16_R3.EntityHuman,net.minecraft.server.v1_16_R3.World,net.minecraft.server.v1_16_R3.IInventory)
it.mikeslab.anvilgui.version.Wrapper1_16_R3$AnvilContainer: int getContainerId()
it.mikeslab.anvilgui.version.Wrapper1_17_R1
it.mikeslab.anvilgui.version.Wrapper1_17_R1: boolean IS_ONE_SEVENTEEN_ONE
it.mikeslab.anvilgui.version.Wrapper1_17_R1: Wrapper1_17_R1()
it.mikeslab.anvilgui.version.Wrapper1_17_R1: int getRealNextContainerId(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_17_R1: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_17_R1: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_17_R1: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_17_R1: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_17_R1: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_17_R1: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_17_R1: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_17_R1: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_17_R1: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_17_R1: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_17_R1: net.minecraft.server.level.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_17_R1$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_17_R1$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_17_R1 this$0
it.mikeslab.anvilgui.version.Wrapper1_17_R1$AnvilContainer: Wrapper1_17_R1$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_17_R1,org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_17_R1$AnvilContainer: void i()
it.mikeslab.anvilgui.version.Wrapper1_17_R1$AnvilContainer: void b(net.minecraft.world.entity.player.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_17_R1$AnvilContainer: void a(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.IInventory)
it.mikeslab.anvilgui.version.Wrapper1_17_R1$AnvilContainer: int getContainerId()
it.mikeslab.anvilgui.version.Wrapper1_18_R1
it.mikeslab.anvilgui.version.Wrapper1_18_R1: Wrapper1_18_R1()
it.mikeslab.anvilgui.version.Wrapper1_18_R1: int getRealNextContainerId(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_18_R1: net.minecraft.server.level.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_18_R1: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_18_R1: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_18_R1: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_18_R1: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_18_R1: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_18_R1: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_18_R1: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_18_R1: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_18_R1: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_18_R1: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_18_R1$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_18_R1$AnvilContainer: Wrapper1_18_R1$AnvilContainer(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_18_R1$AnvilContainer: void l()
it.mikeslab.anvilgui.version.Wrapper1_18_R1$AnvilContainer: void b(net.minecraft.world.entity.player.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_18_R1$AnvilContainer: void a(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.IInventory)
it.mikeslab.anvilgui.version.Wrapper1_18_R1$AnvilContainer: int getContainerId()
it.mikeslab.anvilgui.version.Wrapper1_18_R2
it.mikeslab.anvilgui.version.Wrapper1_18_R2: Wrapper1_18_R2()
it.mikeslab.anvilgui.version.Wrapper1_18_R2: int getRealNextContainerId(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_18_R2: net.minecraft.server.level.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_18_R2: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_18_R2: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_18_R2: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_18_R2: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_18_R2: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_18_R2: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_18_R2: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_18_R2: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_18_R2: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_18_R2: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_18_R2$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_18_R2$AnvilContainer: Wrapper1_18_R2$AnvilContainer(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_18_R2$AnvilContainer: void l()
it.mikeslab.anvilgui.version.Wrapper1_18_R2$AnvilContainer: void b(net.minecraft.world.entity.player.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_18_R2$AnvilContainer: void a(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.IInventory)
it.mikeslab.anvilgui.version.Wrapper1_18_R2$AnvilContainer: int getContainerId()
it.mikeslab.anvilgui.version.Wrapper1_19_R1
it.mikeslab.anvilgui.version.Wrapper1_19_R1: boolean IS_ONE_NINETEEN_ONE
it.mikeslab.anvilgui.version.Wrapper1_19_R1: Wrapper1_19_R1()
it.mikeslab.anvilgui.version.Wrapper1_19_R1: int getRealNextContainerId(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_19_R1: net.minecraft.server.level.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_19_R1: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_19_R1: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_19_R1: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_19_R1: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_19_R1: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_19_R1: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_19_R1: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_19_R1: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_19_R1: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_19_R1: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_19_R1$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_19_R1$AnvilContainer: Wrapper1_19_R1$AnvilContainer(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_19_R1$AnvilContainer: void l()
it.mikeslab.anvilgui.version.Wrapper1_19_R1$AnvilContainer: void b(net.minecraft.world.entity.player.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_19_R1$AnvilContainer: void a(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.IInventory)
it.mikeslab.anvilgui.version.Wrapper1_19_R1$AnvilContainer: int getContainerId()
it.mikeslab.anvilgui.version.Wrapper1_19_R2
it.mikeslab.anvilgui.version.Wrapper1_19_R2: Wrapper1_19_R2()
it.mikeslab.anvilgui.version.Wrapper1_19_R2: int getRealNextContainerId(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_19_R2: net.minecraft.server.level.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_19_R2: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_19_R2: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_19_R2: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_19_R2: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_19_R2: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_19_R2: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_19_R2: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_19_R2: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_19_R2: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_19_R2: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_19_R2$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_19_R2$AnvilContainer: Wrapper1_19_R2$AnvilContainer(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_19_R2$AnvilContainer: void l()
it.mikeslab.anvilgui.version.Wrapper1_19_R2$AnvilContainer: void b(net.minecraft.world.entity.player.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_19_R2$AnvilContainer: void a(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.IInventory)
it.mikeslab.anvilgui.version.Wrapper1_19_R2$AnvilContainer: int getContainerId()
it.mikeslab.anvilgui.version.Wrapper1_19_R3
it.mikeslab.anvilgui.version.Wrapper1_19_R3: Wrapper1_19_R3()
it.mikeslab.anvilgui.version.Wrapper1_19_R3: int getRealNextContainerId(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_19_R3: net.minecraft.server.level.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_19_R3: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_19_R3: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_19_R3: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_19_R3: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_19_R3: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_19_R3: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_19_R3: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_19_R3: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_19_R3: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_19_R3: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_19_R3$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_19_R3$AnvilContainer: Wrapper1_19_R3$AnvilContainer(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_19_R3$AnvilContainer: void m()
it.mikeslab.anvilgui.version.Wrapper1_19_R3$AnvilContainer: void b(net.minecraft.world.entity.player.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_19_R3$AnvilContainer: void a(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.IInventory)
it.mikeslab.anvilgui.version.Wrapper1_19_R3$AnvilContainer: int getContainerId()
it.mikeslab.anvilgui.version.Wrapper1_7_R4
it.mikeslab.anvilgui.version.Wrapper1_7_R4: Wrapper1_7_R4()
it.mikeslab.anvilgui.version.Wrapper1_7_R4: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_7_R4: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_7_R4: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_7_R4: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_7_R4: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_7_R4: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_7_R4: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_7_R4: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_7_R4: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_7_R4: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_7_R4: net.minecraft.server.v1_7_R4.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_7_R4$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_7_R4$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_7_R4 this$0
it.mikeslab.anvilgui.version.Wrapper1_7_R4$AnvilContainer: Wrapper1_7_R4$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_7_R4,net.minecraft.server.v1_7_R4.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_7_R4$AnvilContainer: boolean a(net.minecraft.server.v1_7_R4.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_7_R4$AnvilContainer: void b(net.minecraft.server.v1_7_R4.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_8_R1
it.mikeslab.anvilgui.version.Wrapper1_8_R1: Wrapper1_8_R1()
it.mikeslab.anvilgui.version.Wrapper1_8_R1: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_8_R1: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_8_R1: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_8_R1: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_8_R1: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_8_R1: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_8_R1: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_8_R1: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_8_R1: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_8_R1: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_8_R1: net.minecraft.server.v1_8_R1.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_8_R1$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_8_R1$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_8_R1 this$0
it.mikeslab.anvilgui.version.Wrapper1_8_R1$AnvilContainer: Wrapper1_8_R1$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_8_R1,net.minecraft.server.v1_8_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_8_R1$AnvilContainer: boolean a(net.minecraft.server.v1_8_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_8_R1$AnvilContainer: void b(net.minecraft.server.v1_8_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_8_R2
it.mikeslab.anvilgui.version.Wrapper1_8_R2: Wrapper1_8_R2()
it.mikeslab.anvilgui.version.Wrapper1_8_R2: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_8_R2: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_8_R2: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_8_R2: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_8_R2: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_8_R2: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_8_R2: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_8_R2: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_8_R2: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_8_R2: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_8_R2: net.minecraft.server.v1_8_R2.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_8_R2$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_8_R2$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_8_R2 this$0
it.mikeslab.anvilgui.version.Wrapper1_8_R2$AnvilContainer: Wrapper1_8_R2$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_8_R2,net.minecraft.server.v1_8_R2.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_8_R2$AnvilContainer: boolean a(net.minecraft.server.v1_8_R2.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_8_R2$AnvilContainer: void b(net.minecraft.server.v1_8_R2.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_8_R3
it.mikeslab.anvilgui.version.Wrapper1_8_R3: Wrapper1_8_R3()
it.mikeslab.anvilgui.version.Wrapper1_8_R3: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_8_R3: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_8_R3: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_8_R3: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_8_R3: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_8_R3: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_8_R3: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_8_R3: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_8_R3: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_8_R3: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_8_R3: net.minecraft.server.v1_8_R3.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_8_R3$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_8_R3$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_8_R3 this$0
it.mikeslab.anvilgui.version.Wrapper1_8_R3$AnvilContainer: Wrapper1_8_R3$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_8_R3,net.minecraft.server.v1_8_R3.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_8_R3$AnvilContainer: boolean a(net.minecraft.server.v1_8_R3.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_8_R3$AnvilContainer: void b(net.minecraft.server.v1_8_R3.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_9_R1
it.mikeslab.anvilgui.version.Wrapper1_9_R1: Wrapper1_9_R1()
it.mikeslab.anvilgui.version.Wrapper1_9_R1: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_9_R1: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_9_R1: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_9_R1: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_9_R1: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_9_R1: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_9_R1: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_9_R1: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_9_R1: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_9_R1: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_9_R1: net.minecraft.server.v1_9_R1.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_9_R1$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_9_R1$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_9_R1 this$0
it.mikeslab.anvilgui.version.Wrapper1_9_R1$AnvilContainer: Wrapper1_9_R1$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_9_R1,net.minecraft.server.v1_9_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_9_R1$AnvilContainer: boolean a(net.minecraft.server.v1_9_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_9_R1$AnvilContainer: void b(net.minecraft.server.v1_9_R1.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_9_R2
it.mikeslab.anvilgui.version.Wrapper1_9_R2: Wrapper1_9_R2()
it.mikeslab.anvilgui.version.Wrapper1_9_R2: int getNextContainerId(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_9_R2: void handleInventoryCloseEvent(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_9_R2: void sendPacketOpenWindow(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_9_R2: void sendPacketCloseWindow(org.bukkit.entity.Player,int)
it.mikeslab.anvilgui.version.Wrapper1_9_R2: void setActiveContainerDefault(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_9_R2: void setActiveContainer(org.bukkit.entity.Player,java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_9_R2: void setActiveContainerId(java.lang.Object,int)
it.mikeslab.anvilgui.version.Wrapper1_9_R2: void addActiveContainerSlotListener(java.lang.Object,org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_9_R2: org.bukkit.inventory.Inventory toBukkitInventory(java.lang.Object)
it.mikeslab.anvilgui.version.Wrapper1_9_R2: java.lang.Object newContainerAnvil(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.anvilgui.version.Wrapper1_9_R2: net.minecraft.server.v1_9_R2.EntityPlayer toNMS(org.bukkit.entity.Player)
it.mikeslab.anvilgui.version.Wrapper1_9_R2$AnvilContainer
it.mikeslab.anvilgui.version.Wrapper1_9_R2$AnvilContainer: it.mikeslab.anvilgui.version.Wrapper1_9_R2 this$0
it.mikeslab.anvilgui.version.Wrapper1_9_R2$AnvilContainer: Wrapper1_9_R2$AnvilContainer(it.mikeslab.anvilgui.version.Wrapper1_9_R2,net.minecraft.server.v1_9_R2.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_9_R2$AnvilContainer: boolean a(net.minecraft.server.v1_9_R2.EntityHuman)
it.mikeslab.anvilgui.version.Wrapper1_9_R2$AnvilContainer: void b(net.minecraft.server.v1_9_R2.EntityHuman)
it.mikeslab.anvilgui.version.special.AnvilContainer1_14_4_R1
it.mikeslab.anvilgui.version.special.AnvilContainer1_14_4_R1: AnvilContainer1_14_4_R1(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.special.AnvilContainer1_14_4_R1: void e()
it.mikeslab.anvilgui.version.special.AnvilContainer1_14_4_R1: void b(net.minecraft.server.v1_14_R1.EntityHuman)
it.mikeslab.anvilgui.version.special.AnvilContainer1_14_4_R1: void a(net.minecraft.server.v1_14_R1.EntityHuman,net.minecraft.server.v1_14_R1.World,net.minecraft.server.v1_14_R1.IInventory)
it.mikeslab.anvilgui.version.special.AnvilContainer1_14_4_R1: int getContainerId()
it.mikeslab.anvilgui.version.special.AnvilContainer1_17_1_R1
it.mikeslab.anvilgui.version.special.AnvilContainer1_17_1_R1: AnvilContainer1_17_1_R1(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.special.AnvilContainer1_17_1_R1: void l()
it.mikeslab.anvilgui.version.special.AnvilContainer1_17_1_R1: void b(net.minecraft.world.entity.player.EntityHuman)
it.mikeslab.anvilgui.version.special.AnvilContainer1_17_1_R1: void a(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.IInventory)
it.mikeslab.anvilgui.version.special.AnvilContainer1_17_1_R1: int getContainerId()
it.mikeslab.anvilgui.version.special.AnvilContainer1_19_1_R1
it.mikeslab.anvilgui.version.special.AnvilContainer1_19_1_R1: AnvilContainer1_19_1_R1(org.bukkit.entity.Player,int,java.lang.String)
it.mikeslab.anvilgui.version.special.AnvilContainer1_19_1_R1: void l()
it.mikeslab.anvilgui.version.special.AnvilContainer1_19_1_R1: void b(net.minecraft.world.entity.player.EntityHuman)
it.mikeslab.anvilgui.version.special.AnvilContainer1_19_1_R1: void a(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.IInventory)
it.mikeslab.anvilgui.version.special.AnvilContainer1_19_1_R1: int getContainerId()
it.mikeslab.command.CmdATM
it.mikeslab.command.CmdATM: CmdATM()
it.mikeslab.command.CmdATM: void onHelp(co.aikar.commands.CommandHelp)
it.mikeslab.command.CmdATM: void onAtm(org.bukkit.entity.Player)
it.mikeslab.command.CmdBank
it.mikeslab.command.CmdBank: CmdBank()
it.mikeslab.command.CmdBank: void giveMoney(org.bukkit.command.CommandSender,co.aikar.commands.bukkit.contexts.OnlinePlayer,double,java.lang.String)
it.mikeslab.command.CmdBank: void takeMoney(org.bukkit.command.CommandSender,co.aikar.commands.bukkit.contexts.OnlinePlayer,double,java.lang.String)
it.mikeslab.command.CmdBank: void setMoney(org.bukkit.command.CommandSender,co.aikar.commands.bukkit.contexts.OnlinePlayer,double,java.lang.String)
it.mikeslab.command.CmdBank: void resetMoney(org.bukkit.command.CommandSender,co.aikar.commands.bukkit.contexts.OnlinePlayer,java.lang.String)
it.mikeslab.command.CmdCreditCard
it.mikeslab.command.CmdCreditCard: CmdCreditCard()
it.mikeslab.command.CmdCreditCard: void onHelp(co.aikar.commands.CommandHelp)
it.mikeslab.command.CmdCreditCard: void onCreate(org.bukkit.command.CommandSender,co.aikar.commands.bukkit.contexts.OnlinePlayer)
it.mikeslab.command.CmdCreditCard: void onDelete(org.bukkit.command.CommandSender,org.bukkit.OfflinePlayer)
it.mikeslab.command.CmdCreditCard: void onBalance(org.bukkit.command.CommandSender,org.bukkit.OfflinePlayer)
it.mikeslab.command.CmdCreditCard: void onTransactions(org.bukkit.command.CommandSender,org.bukkit.OfflinePlayer)
it.mikeslab.command.CmdCreditCard: void lambda$onCreate$0(co.aikar.commands.bukkit.contexts.OnlinePlayer,it.mikeslab.util.creditcard.CreditCardUtil,it.mikeslab.util.creditcard.CardType)
it.mikeslab.command.CmdWireTransfer
it.mikeslab.command.CmdWireTransfer: CmdWireTransfer()
it.mikeslab.command.CmdWireTransfer: void onHelp(co.aikar.commands.CommandHelp)
it.mikeslab.command.CmdWireTransfer: void onSend(org.bukkit.entity.Player,co.aikar.commands.bukkit.contexts.OnlinePlayer,double,java.lang.String,java.lang.String[])
it.mikeslab.command.CmdWireTransfer: void lambda$onSend$0(org.bukkit.entity.Player,co.aikar.commands.bukkit.contexts.OnlinePlayer,double,java.lang.String[],java.lang.String,java.lang.Boolean)
it.mikeslab.command.inventory.AnvilPinGUI
it.mikeslab.command.inventory.AnvilPinGUI: java.util.Map completableFutures
it.mikeslab.command.inventory.AnvilPinGUI: AnvilPinGUI()
it.mikeslab.command.inventory.AnvilPinGUI: java.util.concurrent.CompletableFuture openPinGui(org.bukkit.entity.Player,int)
it.mikeslab.command.inventory.AnvilPinGUI: java.util.List lambda$openPinGui$1(int,it.mikeslab.anvilgui.AnvilGUI$Completion)
it.mikeslab.command.inventory.AnvilPinGUI: void lambda$openPinGui$0(org.bukkit.entity.Player)
it.mikeslab.command.inventory.InventoryBanknotes
it.mikeslab.command.inventory.InventoryBanknotes: InventoryBanknotes()
it.mikeslab.command.inventory.InventoryBanknotes: void openATM(org.bukkit.entity.Player,java.util.UUID,java.lang.String,java.lang.String)
it.mikeslab.command.inventory.InventoryBanknotes: boolean lambda$openATM$5(org.bukkit.entity.Player,org.bukkit.OfflinePlayer,java.lang.String,de.themoep.inventorygui.GuiElement$Click)
it.mikeslab.command.inventory.InventoryBanknotes: de.themoep.inventorygui.GuiElement lambda$openATM$4(it.mikeslab.util.transactions.EconomyManager,org.bukkit.OfflinePlayer,java.lang.String,de.themoep.inventorygui.InventoryGui,org.bukkit.entity.HumanEntity)
it.mikeslab.command.inventory.InventoryBanknotes: boolean lambda$openATM$3(de.themoep.inventorygui.InventoryGui,de.themoep.inventorygui.GuiElement$Click)
it.mikeslab.command.inventory.InventoryBanknotes: boolean lambda$openATM$2(org.bukkit.entity.Player,java.util.UUID,java.lang.String,de.themoep.inventorygui.GuiElement$Click)
it.mikeslab.command.inventory.InventoryBanknotes: void lambda$openATM$1(org.bukkit.entity.Player,java.util.UUID,java.lang.String,java.lang.String)
it.mikeslab.command.inventory.InventoryBanknotes: boolean lambda$openATM$0(it.mikeslab.util.transactions.EconomyManager,java.util.UUID,it.mikeslab.object.Banknote,java.lang.String,org.bukkit.entity.Player,de.themoep.inventorygui.InventoryGui,de.themoep.inventorygui.GuiElement$Click)
it.mikeslab.command.inventory.InventoryCardType
it.mikeslab.command.inventory.InventoryCardType: InventoryCardType()
it.mikeslab.command.inventory.InventoryCardType: java.util.concurrent.CompletableFuture openCardTypeSelector(org.bukkit.entity.Player)
it.mikeslab.command.inventory.InventoryCardType: boolean lambda$openCardTypeSelector$1(de.themoep.inventorygui.InventoryGui$Close)
it.mikeslab.command.inventory.InventoryCardType: boolean lambda$openCardTypeSelector$0(de.themoep.inventorygui.InventoryGui,java.util.concurrent.CompletableFuture,it.mikeslab.util.creditcard.CardType,de.themoep.inventorygui.GuiElement$Click)
it.mikeslab.command.inventory.InventoryConfirm
it.mikeslab.command.inventory.InventoryConfirm: InventoryConfirm()
it.mikeslab.command.inventory.InventoryConfirm: java.util.concurrent.CompletableFuture openConfirmInventory(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.command.inventory.InventoryConfirm: boolean lambda$openConfirmInventory$2(de.themoep.inventorygui.InventoryGui$Close)
it.mikeslab.command.inventory.InventoryConfirm: boolean lambda$openConfirmInventory$1(java.util.concurrent.CompletableFuture,de.themoep.inventorygui.GuiElement$Click)
it.mikeslab.command.inventory.InventoryConfirm: boolean lambda$openConfirmInventory$0(java.util.concurrent.CompletableFuture,de.themoep.inventorygui.GuiElement$Click)
it.mikeslab.command.inventory.InventoryCurrencySelector
it.mikeslab.command.inventory.InventoryCurrencySelector: InventoryCurrencySelector()
it.mikeslab.command.inventory.InventoryCurrencySelector: java.util.concurrent.CompletableFuture openCurrencySelector(org.bukkit.entity.Player)
it.mikeslab.command.inventory.InventoryCurrencySelector: boolean lambda$openCurrencySelector$1(de.themoep.inventorygui.InventoryGui$Close)
it.mikeslab.command.inventory.InventoryCurrencySelector: boolean lambda$openCurrencySelector$0(de.themoep.inventorygui.InventoryGui,java.util.concurrent.CompletableFuture,java.lang.String,de.themoep.inventorygui.GuiElement$Click)
it.mikeslab.command.inventory.InventoryExchange
it.mikeslab.command.inventory.InventoryExchange: InventoryExchange()
it.mikeslab.command.inventory.InventoryExchange: void openExchangeInventory(org.bukkit.entity.Player,org.bukkit.OfflinePlayer,java.lang.String,java.lang.String,java.lang.String,double)
it.mikeslab.command.inventory.InventoryExchange: java.util.concurrent.CompletableFuture openInputAnvil(org.bukkit.entity.Player,java.lang.String,java.lang.String)
it.mikeslab.command.inventory.InventoryExchange: java.util.List lambda$openInputAnvil$10(java.util.concurrent.CompletableFuture,it.mikeslab.anvilgui.AnvilGUI$Completion)
it.mikeslab.command.inventory.InventoryExchange: void lambda$openInputAnvil$9(java.util.concurrent.CompletableFuture,org.bukkit.entity.Player)
it.mikeslab.command.inventory.InventoryExchange: boolean lambda$openExchangeInventory$8(de.themoep.inventorygui.InventoryGui$Close)
it.mikeslab.command.inventory.InventoryExchange: boolean lambda$openExchangeInventory$7(de.themoep.inventorygui.InventoryGui,de.themoep.inventorygui.GuiElement$Click)
it.mikeslab.command.inventory.InventoryExchange: boolean lambda$openExchangeInventory$6(boolean,it.mikeslab.util.transactions.EconomyManager,org.bukkit.OfflinePlayer,java.lang.String,java.lang.String,double,org.bukkit.entity.Player,double,de.themoep.inventorygui.InventoryGui,de.themoep.inventorygui.GuiElement$Click)
it.mikeslab.command.inventory.InventoryExchange: boolean lambda$openExchangeInventory$5(org.bukkit.entity.Player,org.bukkit.OfflinePlayer,java.lang.String,java.lang.String,de.themoep.inventorygui.GuiElement$Click)
it.mikeslab.command.inventory.InventoryExchange: void lambda$openExchangeInventory$4(org.bukkit.entity.Player,org.bukkit.OfflinePlayer,java.lang.String,java.lang.String,java.lang.String)
it.mikeslab.command.inventory.InventoryExchange: boolean lambda$openExchangeInventory$3(org.bukkit.entity.Player,org.bukkit.OfflinePlayer,java.lang.String,java.lang.String,double,de.themoep.inventorygui.GuiElement$Click)
it.mikeslab.command.inventory.InventoryExchange: void lambda$openExchangeInventory$2(org.bukkit.entity.Player,org.bukkit.OfflinePlayer,java.lang.String,java.lang.String,double,java.lang.String)
it.mikeslab.command.inventory.InventoryExchange: de.themoep.inventorygui.GuiElement lambda$openExchangeInventory$1(java.util.List,de.themoep.inventorygui.InventoryGui,org.bukkit.entity.HumanEntity)
it.mikeslab.command.inventory.InventoryExchange: boolean lambda$openExchangeInventory$0(de.themoep.inventorygui.InventoryGui,de.themoep.inventorygui.GuiElement$Click)
it.mikeslab.command.inventory.InventoryTransactions
it.mikeslab.command.inventory.InventoryTransactions: InventoryTransactions()
it.mikeslab.command.inventory.InventoryTransactions: de.themoep.inventorygui.InventoryGui getTransactionsInventory(org.bukkit.entity.Player,java.util.UUID,java.lang.String)
it.mikeslab.command.inventory.InventoryTransactions: void openFilterInput(org.bukkit.entity.Player,java.util.UUID)
it.mikeslab.command.inventory.InventoryTransactions: java.lang.String formatDate(long)
it.mikeslab.command.inventory.InventoryTransactions: java.lang.String cutString(java.lang.String,int)
it.mikeslab.command.inventory.InventoryTransactions: java.util.List lambda$openFilterInput$6(java.util.UUID,org.bukkit.entity.Player,it.mikeslab.anvilgui.AnvilGUI$Completion)
it.mikeslab.command.inventory.InventoryTransactions: void lambda$openFilterInput$5(java.util.UUID,org.bukkit.entity.Player)
it.mikeslab.command.inventory.InventoryTransactions: boolean lambda$getTransactionsInventory$4(de.themoep.inventorygui.InventoryGui$Close)
it.mikeslab.command.inventory.InventoryTransactions: boolean lambda$getTransactionsInventory$3(org.bukkit.entity.Player,java.util.UUID,de.themoep.inventorygui.GuiElement$Click)
it.mikeslab.command.inventory.InventoryTransactions: boolean lambda$getTransactionsInventory$2(org.bukkit.entity.Player,java.util.UUID,de.themoep.inventorygui.GuiElement$Click)
it.mikeslab.command.inventory.InventoryTransactions: boolean lambda$getTransactionsInventory$1(java.lang.String,it.mikeslab.util.transactions.Transaction)
it.mikeslab.command.inventory.InventoryTransactions: int lambda$getTransactionsInventory$0(it.mikeslab.util.transactions.Transaction,it.mikeslab.util.transactions.Transaction)
it.mikeslab.listener.PlayerEventListener
it.mikeslab.listener.PlayerEventListener: PlayerEventListener()
it.mikeslab.listener.PlayerEventListener: void onATMBlockPlace(org.bukkit.event.block.BlockPlaceEvent)
it.mikeslab.listener.PlayerEventListener: void onATMBlockBreak(org.bukkit.event.block.BlockBreakEvent)
it.mikeslab.listener.PlayerEventListener: void onATMUse(org.bukkit.event.player.PlayerInteractEvent)
it.mikeslab.listener.PlayerEventListener: boolean hasPermissionToPlaceATM(org.bukkit.entity.Player)
it.mikeslab.listener.PlayerEventListener: boolean hasPermissionToRemoveATM(org.bukkit.entity.Player)
it.mikeslab.listener.PlayerEventListener: boolean hasPermissionToUseATM(org.bukkit.entity.Player)
it.mikeslab.listener.PlayerEventListener: void cancelEventAndSendNoPermissionMessage(org.bukkit.event.Cancellable,org.bukkit.entity.Player)
it.mikeslab.listener.PlayerEventListener: boolean isPlacingATMBlock(org.bukkit.event.block.BlockPlaceEvent)
it.mikeslab.listener.PlayerEventListener: void addATMAndSendPlaceMessage(org.bukkit.entity.Player,org.bukkit.block.Block)
it.mikeslab.listener.PlayerEventListener: boolean isBreakingATMBlock(org.bukkit.event.block.BlockBreakEvent)
it.mikeslab.listener.PlayerEventListener: void removeATMAndSendRemoveMessage(org.bukkit.entity.Player,org.bukkit.block.Block)
it.mikeslab.listener.PlayerEventListener: boolean isInteractingWithATMBlock(org.bukkit.event.player.PlayerInteractEvent)
it.mikeslab.listener.PlayerEventListener: void cancelEvent(org.bukkit.event.player.PlayerInteractEvent)
it.mikeslab.listener.PlayerEventListener: void sendNoPermissionMessage(org.bukkit.entity.Player)
it.mikeslab.listener.PlayerEventListener: void handleATMInteraction(org.bukkit.event.player.PlayerInteractEvent,org.bukkit.entity.Player)
it.mikeslab.listener.PlayerEventListener: void handleBanknoteDeposit(org.bukkit.entity.Player,it.mikeslab.util.transactions.EconomyManager,it.mikeslab.object.Banknote)
it.mikeslab.listener.PlayerEventListener: void sendNoCreditCardMessage(org.bukkit.entity.Player)
it.mikeslab.listener.PlayerEventListener: void handleCreditCardInteraction(org.bukkit.event.player.PlayerInteractEvent,org.bukkit.entity.Player,org.bukkit.inventory.ItemStack)
it.mikeslab.listener.PlayerEventListener: void openBanknoteInventory(org.bukkit.event.player.PlayerInteractEvent,org.bukkit.entity.Player,java.util.UUID,java.lang.String)
it.mikeslab.listener.PlayerEventListener: void lambda$openBanknoteInventory$1(org.bukkit.entity.Player,java.util.UUID,java.lang.String,java.lang.String)
it.mikeslab.listener.PlayerEventListener: void lambda$handleCreditCardInteraction$0(org.bukkit.event.player.PlayerInteractEvent,org.bukkit.entity.Player,java.util.UUID,java.lang.String,java.lang.Boolean)
it.mikeslab.object.Banknote
it.mikeslab.object.Banknote: double value
it.mikeslab.object.Banknote: org.bukkit.inventory.ItemStack itemStack
it.mikeslab.object.Banknote: java.lang.String currency
it.mikeslab.object.Banknote: org.bukkit.inventory.ItemStack createDefaultItemStack(org.bukkit.Material,java.lang.String,java.util.List,int,double,java.lang.String)
it.mikeslab.object.Banknote: Banknote(double,org.bukkit.inventory.ItemStack)
it.mikeslab.object.Banknote: double getValue()
it.mikeslab.object.Banknote: org.bukkit.inventory.ItemStack getItemStack()
it.mikeslab.object.Banknote: java.lang.String getCurrency()
it.mikeslab.object.Banknote: void setCurrency(java.lang.String)
it.mikeslab.object.Check
it.mikeslab.object.Check: java.lang.String id
it.mikeslab.object.Check: java.lang.String from
it.mikeslab.object.Check: java.lang.String to
it.mikeslab.object.Check: java.lang.String reason
it.mikeslab.object.Check: java.lang.String currency
it.mikeslab.object.Check: double amount
it.mikeslab.object.Check: long timestamp
it.mikeslab.object.Check: java.lang.String getId()
it.mikeslab.object.Check: java.lang.String getFrom()
it.mikeslab.object.Check: java.lang.String getTo()
it.mikeslab.object.Check: java.lang.String getReason()
it.mikeslab.object.Check: java.lang.String getCurrency()
it.mikeslab.object.Check: double getAmount()
it.mikeslab.object.Check: long getTimestamp()
it.mikeslab.object.Check: Check(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,double,long)
it.mikeslab.task.LimitTask
it.mikeslab.task.LimitTask: java.time.Clock clock
it.mikeslab.task.LimitTask: java.time.LocalDate lastResetDate
it.mikeslab.task.LimitTask: it.mikeslab.Main plugin
it.mikeslab.task.LimitTask: LimitTask(it.mikeslab.Main)
it.mikeslab.task.LimitTask: void run()
it.mikeslab.util.GSONUtil
it.mikeslab.util.GSONUtil: com.google.gson.Gson gson
it.mikeslab.util.GSONUtil: java.io.File dataFolder
it.mikeslab.util.GSONUtil: java.io.File configFile
it.mikeslab.util.GSONUtil: java.util.Map data
it.mikeslab.util.GSONUtil: GSONUtil(java.io.File,java.lang.String)
it.mikeslab.util.GSONUtil: java.util.Optional getJson(java.lang.String)
it.mikeslab.util.GSONUtil: java.util.Optional getJson(java.util.UUID)
it.mikeslab.util.GSONUtil: void setJson(java.lang.String,com.google.gson.JsonObject)
it.mikeslab.util.GSONUtil: void saveConfig()
it.mikeslab.util.GSONUtil: void loadConfig()
it.mikeslab.util.GSONUtil: void deleteObject(java.lang.String)
it.mikeslab.util.GSONUtil: void deleteObject(java.util.UUID)
it.mikeslab.util.GSONUtil: void createConfigIfNotExists()
it.mikeslab.util.GSONUtil: java.lang.String[] keySet()
it.mikeslab.util.GSONUtil: java.util.Optional getUUIDByCreditCardNumber(java.lang.String)
it.mikeslab.util.ItemStackUtil
it.mikeslab.util.ItemStackUtil: java.util.Map namespacedKeys
it.mikeslab.util.ItemStackUtil: ItemStackUtil()
it.mikeslab.util.ItemStackUtil: void loadNamespacedKeys()
it.mikeslab.util.ItemStackUtil: org.bukkit.inventory.ItemStack createStack(org.bukkit.Material,java.lang.String)
it.mikeslab.util.ItemStackUtil: org.bukkit.inventory.ItemStack createStack(org.bukkit.Material,java.lang.String,java.util.List)
it.mikeslab.util.ItemStackUtil: org.bukkit.inventory.ItemStack createStack(org.bukkit.Material,java.lang.String,java.util.List,int,java.util.Map)
it.mikeslab.util.ItemStackUtil: org.bukkit.NamespacedKey getNamespaceKey(java.lang.String)
it.mikeslab.util.ItemStackUtil: org.bukkit.inventory.ItemStack getFiller()
it.mikeslab.util.ItemStackUtil: void <clinit>()
it.mikeslab.util.LocationUtil
it.mikeslab.util.LocationUtil: LocationUtil()
it.mikeslab.util.LocationUtil: org.bukkit.Location getRawLocation(org.bukkit.Location)
it.mikeslab.util.LocationUtil: java.lang.String getLocationString(org.bukkit.Location)
it.mikeslab.util.PlayerUtils
it.mikeslab.util.PlayerUtils: PlayerUtils()
it.mikeslab.util.PlayerUtils: void giveItem(org.bukkit.entity.Player,org.bukkit.inventory.ItemStack)
it.mikeslab.util.PlayerUtils: void playSound(org.bukkit.entity.Player,java.lang.String)
it.mikeslab.util.PlayerUtils: boolean isInventoryFull(org.bukkit.entity.Player)
it.mikeslab.util.Translator
it.mikeslab.util.Translator: Translator()
it.mikeslab.util.Translator: java.util.Collection translate(java.util.List,java.util.Map)
it.mikeslab.util.Translator: net.kyori.adventure.text.Component translate(java.lang.String)
it.mikeslab.util.Translator: java.lang.String translate(net.kyori.adventure.text.Component)
it.mikeslab.util.Translator: java.lang.String legacyTranslate(java.lang.String)
it.mikeslab.util.Translator: java.lang.String legacyTranslate(java.lang.String,java.util.Map)
it.mikeslab.util.Translator: java.util.List legacyListTranslate(java.util.List)
it.mikeslab.util.atm.ATMUtil
it.mikeslab.util.atm.ATMUtil: com.github.benmanes.caffeine.cache.Cache atmLocations
it.mikeslab.util.atm.ATMUtil: org.bukkit.inventory.ItemStack atmItem
it.mikeslab.util.atm.ATMUtil: boolean isATM(org.bukkit.block.Block)
it.mikeslab.util.atm.ATMUtil: void addATM(org.bukkit.block.Block)
it.mikeslab.util.atm.ATMUtil: void removeATM(org.bukkit.block.Block)
it.mikeslab.util.atm.ATMUtil: void saveATMs(org.bukkit.configuration.file.FileConfiguration)
it.mikeslab.util.atm.ATMUtil: void loadATMs(org.bukkit.configuration.file.FileConfiguration)
it.mikeslab.util.atm.ATMUtil: org.bukkit.inventory.ItemStack getATMPlaceableItem()
it.mikeslab.util.atm.ATMUtil: boolean isATM(org.bukkit.inventory.ItemStack)
it.mikeslab.util.atm.ATMUtil: ATMUtil()
it.mikeslab.util.atm.ATMUtil: void <clinit>()
it.mikeslab.util.banknote.BanknoteUtil
it.mikeslab.util.banknote.BanknoteUtil: java.util.Map banknotes
it.mikeslab.util.banknote.BanknoteUtil: BanknoteUtil()
it.mikeslab.util.banknote.BanknoteUtil: java.util.LinkedList getOrderedMap(java.lang.String)
it.mikeslab.util.banknote.BanknoteUtil: void loadBanknotes(org.bukkit.configuration.file.FileConfiguration)
it.mikeslab.util.banknote.BanknoteUtil: boolean isBanknote(org.bukkit.inventory.ItemStack)
it.mikeslab.util.banknote.BanknoteUtil: it.mikeslab.object.Banknote fromItemStack(org.bukkit.inventory.ItemStack)
it.mikeslab.util.banknote.BanknoteUtil: boolean deposit(org.bukkit.entity.Player,it.mikeslab.object.Banknote)
it.mikeslab.util.banknote.BanknoteUtil: boolean removeBanknoteFromHand(it.mikeslab.object.Banknote,org.bukkit.entity.Player)
it.mikeslab.util.banknote.BanknoteUtil: java.util.Map getBanknotes()
it.mikeslab.util.banknote.BanknoteUtil: void <clinit>()
it.mikeslab.util.book.CustomBook
it.mikeslab.util.book.CustomBook: CustomBook()
it.mikeslab.util.book.CustomBook: void pinBook(org.bukkit.entity.Player,int)
it.mikeslab.util.creditcard.CardType
it.mikeslab.util.creditcard.CardType: java.lang.String name
it.mikeslab.util.creditcard.CardType: java.lang.String displayName
it.mikeslab.util.creditcard.CardType: double depositLimit
it.mikeslab.util.creditcard.CardType: double withdrawLimit
it.mikeslab.util.creditcard.CardType: double transferLimit
it.mikeslab.util.creditcard.CardType: double perDayWithdrawLimit
it.mikeslab.util.creditcard.CardType: org.bukkit.Material material
it.mikeslab.util.creditcard.CardType: CardType(java.lang.String,java.lang.String,double,double,double,double,org.bukkit.Material)
it.mikeslab.util.creditcard.CardType: java.lang.String getName()
it.mikeslab.util.creditcard.CardType: java.lang.String getDisplayName()
it.mikeslab.util.creditcard.CardType: double getDepositLimit()
it.mikeslab.util.creditcard.CardType: double getWithdrawLimit()
it.mikeslab.util.creditcard.CardType: double getTransferLimit()
it.mikeslab.util.creditcard.CardType: double getPerDayWithdrawLimit()
it.mikeslab.util.creditcard.CardType: org.bukkit.Material getMaterial()
it.mikeslab.util.creditcard.CardTypeUtil
it.mikeslab.util.creditcard.CardTypeUtil: java.util.Map cardTypes
it.mikeslab.util.creditcard.CardTypeUtil: org.bukkit.configuration.file.FileConfiguration config
it.mikeslab.util.creditcard.CardTypeUtil: it.mikeslab.util.GSONUtil playerDataGsonUtil
it.mikeslab.util.creditcard.CardTypeUtil: CardTypeUtil(org.bukkit.configuration.file.FileConfiguration)
it.mikeslab.util.creditcard.CardTypeUtil: java.util.List getList()
it.mikeslab.util.creditcard.CardTypeUtil: void loadCardTypes()
it.mikeslab.util.creditcard.CardTypeUtil: it.mikeslab.util.creditcard.CardType getCardType(java.lang.String)
it.mikeslab.util.creditcard.CardTypeUtil: it.mikeslab.util.creditcard.CardType getCardTypeForPlayer(java.util.UUID)
it.mikeslab.util.creditcard.CreditCardUtil
it.mikeslab.util.creditcard.CreditCardUtil: org.bukkit.configuration.file.FileConfiguration config
it.mikeslab.util.creditcard.CreditCardUtil: it.mikeslab.util.GSONUtil gsonUtil
it.mikeslab.util.creditcard.CreditCardUtil: CreditCardUtil()
it.mikeslab.util.creditcard.CreditCardUtil: org.bukkit.inventory.ItemStack createCreditCard(java.util.UUID,java.lang.String)
it.mikeslab.util.creditcard.CreditCardUtil: org.bukkit.inventory.ItemStack createCreditCard(java.util.UUID,it.mikeslab.util.creditcard.CardType)
it.mikeslab.util.creditcard.CreditCardUtil: void deleteCreditCard(java.util.UUID)
it.mikeslab.util.creditcard.CreditCardUtil: boolean isCreditCard(org.bukkit.inventory.ItemStack)
it.mikeslab.util.creditcard.CreditCardUtil: java.util.UUID getOwnerUUID(org.bukkit.inventory.ItemStack)
it.mikeslab.util.creditcard.CreditCardUtil: java.lang.String getCardNumberFromUUID(java.util.UUID)
it.mikeslab.util.creditcard.CreditCardUtil: int getPin(java.util.UUID)
it.mikeslab.util.creditcard.CreditCardUtil: void saveData(java.util.UUID,java.lang.String,java.lang.String,int,it.mikeslab.util.creditcard.CardType)
it.mikeslab.util.creditcard.CreditCardUtil: void eraseData(java.util.UUID)
it.mikeslab.util.currency.CurrencyUtil
it.mikeslab.util.currency.CurrencyUtil: java.text.DecimalFormat CURRENCY_FORMAT
it.mikeslab.util.currency.CurrencyUtil: java.util.Map exchangeRates
it.mikeslab.util.currency.CurrencyUtil: double mainCurrencyExchangeRate
it.mikeslab.util.currency.CurrencyUtil: java.lang.String mainCurrency
it.mikeslab.util.currency.CurrencyUtil: boolean CURRENCY_ENABLED
it.mikeslab.util.currency.CurrencyUtil: org.bukkit.configuration.file.FileConfiguration config
it.mikeslab.util.currency.CurrencyUtil: CurrencyUtil()
it.mikeslab.util.currency.CurrencyUtil: void initializeExchangeRates(org.bukkit.configuration.file.FileConfiguration)
it.mikeslab.util.currency.CurrencyUtil: double convertToMainCurrency(double,java.lang.String)
it.mikeslab.util.currency.CurrencyUtil: double convertFromMainCurrency(double,java.lang.String)
it.mikeslab.util.currency.CurrencyUtil: java.lang.String formatCurrency(double)
it.mikeslab.util.currency.CurrencyUtil: boolean isCurrencyEnabled()
it.mikeslab.util.currency.CurrencyUtil: boolean isCurrency(java.lang.String)
it.mikeslab.util.currency.CurrencyUtil: java.lang.String getSymbol(java.lang.String)
it.mikeslab.util.currency.CurrencyUtil: java.lang.String getCurrency(java.lang.String)
it.mikeslab.util.currency.CurrencyUtil: java.util.List getCurrencies()
it.mikeslab.util.currency.CurrencyUtil: java.lang.String getMainCurrency()
it.mikeslab.util.currency.CurrencyUtil: java.lang.String format(double)
it.mikeslab.util.currency.CurrencyUtil: java.util.Map getExchangeRates()
it.mikeslab.util.currency.CurrencyUtil: void <clinit>()
it.mikeslab.util.database.DatabaseType
it.mikeslab.util.database.DatabaseType: it.mikeslab.util.database.DatabaseType TRANSACTIONS
it.mikeslab.util.database.DatabaseType: it.mikeslab.util.database.DatabaseType PLAYER_DATA
it.mikeslab.util.database.DatabaseType: it.mikeslab.util.database.DatabaseType[] $VALUES
it.mikeslab.util.database.DatabaseType: it.mikeslab.util.database.DatabaseType[] values()
it.mikeslab.util.database.DatabaseType: it.mikeslab.util.database.DatabaseType valueOf(java.lang.String)
it.mikeslab.util.database.DatabaseType: DatabaseType(java.lang.String,int)
it.mikeslab.util.database.DatabaseType: it.mikeslab.util.database.DatabaseType[] $values()
it.mikeslab.util.database.DatabaseType: void <clinit>()
it.mikeslab.util.database.MongoDBHandler
it.mikeslab.util.database.MongoDBHandler: com.mongodb.client.MongoClient mongoClient
it.mikeslab.util.database.MongoDBHandler: com.mongodb.client.MongoDatabase database
it.mikeslab.util.database.MongoDBHandler: com.google.gson.Gson gson
it.mikeslab.util.database.MongoDBHandler: MongoDBHandler(java.lang.String,java.lang.String)
it.mikeslab.util.database.MongoDBHandler: void insertDocument(java.lang.String,org.bson.Document)
it.mikeslab.util.database.MongoDBHandler: void deleteDocument(java.lang.String,java.lang.String)
it.mikeslab.util.database.MongoDBHandler: void createCollectionIfNotExists(java.lang.String)
it.mikeslab.util.database.MongoDBHandler: void close()
it.mikeslab.util.database.MongoDBHandler: com.mongodb.client.MongoClient getMongoClient()
it.mikeslab.util.database.MongoDBHandler: com.mongodb.client.MongoDatabase getDatabase()
it.mikeslab.util.database.MongoDBHandler: com.google.gson.Gson getGson()
it.mikeslab.util.language.LangKey
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey ALREADY_REGISTERED
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey INSUFFICIENT_FUNDS
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey DAILY_WITHDRAW_LIMIT_REACHED
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey INVENTORY_FULL_DROPPED
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey INVENTORY_FULL
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey ATM_RECEIVED
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey ATM_PLACED
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey ATM_REMOVED
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey NO_PERMISSION
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey NO_CREDIT_CARD
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey WRONG_PIN
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey NOT_REGISTERED
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey NO_BANK_ACCOUNT
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey TRANSFER_LIMIT_REACHED
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey ERROR_OCCURRED
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey SUBJECT_CANNOT_RECEIVE
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey TRANSFER_SUCCESS
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey DEPOSITED
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey DEPOSIT_FAILED
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey CURRENCY_NOT_FOUND
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey AMOUNT_MUST_BE_POSITIVE
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey AMOUNT_TOO_HIGH
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey PLAYER_ONLY
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey NOT_VALID_PLAYER
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey CREDIT_CARD_DELETED
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey CREDIT_CARD_BEING_CREATED
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey BANK_GIVEN
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey BANK_TAKEN
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey BANK_SET
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey BANK_RESET
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey REASON_TOO_LONG
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey OPERATION_CANCELLED
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey CANNOT_PERFORM_EXCHANGE
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey EXCHANGE_PERFORMED
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey EXCHANGE_TRANSACTION_REASON
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey INVALID_CURRENCY
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey INVALID_VALUE
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey INVALID_NUMBER
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey ANVIL_INSERT_PIN
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey ANVIL_PIN_TEXT
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey ATM_TITLE
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey ATM_WITHDRAWAL_REASON
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey RETURN_CURRENCIES_SELECTOR
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey PREVIOUS_PAGE
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey NEXT_PAGE
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey EXCHANGE_ITEM_NAME
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey BALANCE_ITEM_NAME
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey SELECT_CARD_TYPE_TITLE
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey CARD_TYPE
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey CARD_DAILY_WITHDRAW_LIMIT
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey CARD_DEPOSIT_LIMIT
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey CARD_TRANSFER_LIMIT
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey CARD_WITHDRAW_LIMIT
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey CONFIRM
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey CANCEL
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey SELECT_CURRENCY_TITLE
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey SELECT_CURRENCY_ITEM_NAME
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey EXCHANGE_RATES
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey EXCHANGE_TO
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey EXCHANGE_FROM
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey EXCHANGE
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey BALANCE
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey CLOSE
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey TRANSACTION_HISTORY
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey FILTER_BY_DATE
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey REMOVE_DATE_FILTER
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey TRANSACTION
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey TRANSACTION_AMOUNT
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey TRANSACTION_SENDER
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey TRANSACTION_RECEIVER
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey TRANSACTION_REASON
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey TRANSACTION_CURRENCY
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey TRANSACTION_ID
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey INVALID_DATE_FORMAT
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey ENTER_DATE
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey COMMAND_SPECIFY_SUBJECT
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey OPEN_TRANSACTION_MENU
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey WIRE_TRANSFER_REASON
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey WIRE_TRANSFER_TO
it.mikeslab.util.language.LangKey: java.lang.String defaultValue
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey[] $VALUES
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey[] values()
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey valueOf(java.lang.String)
it.mikeslab.util.language.LangKey: java.lang.String getDefaultValue()
it.mikeslab.util.language.LangKey: LangKey(java.lang.String,int,java.lang.String)
it.mikeslab.util.language.LangKey: it.mikeslab.util.language.LangKey[] $values()
it.mikeslab.util.language.LangKey: void <clinit>()
it.mikeslab.util.language.Language
it.mikeslab.util.language.Language: java.lang.String subFolder
it.mikeslab.util.language.Language: java.lang.String defaultLanguage
it.mikeslab.util.language.Language: org.bukkit.configuration.file.FileConfiguration languageFile
it.mikeslab.util.language.Language: java.io.File dataFolder
it.mikeslab.util.language.Language: org.bukkit.plugin.java.JavaPlugin plugin
it.mikeslab.util.language.Language: com.github.benmanes.caffeine.cache.Cache cache
it.mikeslab.util.language.Language: Language()
it.mikeslab.util.language.Language: void initialize(org.bukkit.plugin.java.JavaPlugin,java.lang.String)
it.mikeslab.util.language.Language: void reload(java.lang.String)
it.mikeslab.util.language.Language: java.lang.String getString(it.mikeslab.util.language.LangKey)
it.mikeslab.util.language.Language: java.lang.String getComponentString(it.mikeslab.util.language.LangKey)
it.mikeslab.util.language.Language: java.lang.String getComponentString(it.mikeslab.util.language.LangKey,java.util.Map)
it.mikeslab.util.language.Language: java.lang.String loadString(it.mikeslab.util.language.LangKey)
it.mikeslab.util.language.Language: void close()
it.mikeslab.util.language.Language: boolean isLanguageFile(java.lang.String)
it.mikeslab.util.language.Language: void generate()
it.mikeslab.util.language.Language: void generateSubFolder()
it.mikeslab.util.language.Language: void generateLanguageFile(it.mikeslab.util.language.RecognizedLanguages)
it.mikeslab.util.language.Language: void loadLanguage(java.lang.String)
it.mikeslab.util.language.Language: org.bukkit.configuration.file.FileConfiguration getLanguageFile()
it.mikeslab.util.language.Language: java.lang.String lambda$getComponentString$2(it.mikeslab.util.language.LangKey,it.mikeslab.util.language.LangKey)
it.mikeslab.util.language.Language: java.lang.String lambda$getComponentString$1(it.mikeslab.util.language.LangKey,it.mikeslab.util.language.LangKey)
it.mikeslab.util.language.Language: java.lang.String lambda$getString$0(it.mikeslab.util.language.LangKey,it.mikeslab.util.language.LangKey)
it.mikeslab.util.language.RecognizedLanguages
it.mikeslab.util.language.RecognizedLanguages: it.mikeslab.util.language.RecognizedLanguages en_US
it.mikeslab.util.language.RecognizedLanguages: it.mikeslab.util.language.RecognizedLanguages it_IT
it.mikeslab.util.language.RecognizedLanguages: it.mikeslab.util.language.RecognizedLanguages es_ES
it.mikeslab.util.language.RecognizedLanguages: it.mikeslab.util.language.RecognizedLanguages fr_FR
it.mikeslab.util.language.RecognizedLanguages: it.mikeslab.util.language.RecognizedLanguages[] $VALUES
it.mikeslab.util.language.RecognizedLanguages: it.mikeslab.util.language.RecognizedLanguages[] values()
it.mikeslab.util.language.RecognizedLanguages: it.mikeslab.util.language.RecognizedLanguages valueOf(java.lang.String)
it.mikeslab.util.language.RecognizedLanguages: RecognizedLanguages(java.lang.String,int)
it.mikeslab.util.language.RecognizedLanguages: java.lang.String[] getLanguages()
it.mikeslab.util.language.RecognizedLanguages: boolean isRecognizedLanguage(java.lang.String)
it.mikeslab.util.language.RecognizedLanguages: java.lang.String[] lambda$getLanguages$0(int)
it.mikeslab.util.language.RecognizedLanguages: it.mikeslab.util.language.RecognizedLanguages[] $values()
it.mikeslab.util.language.RecognizedLanguages: void <clinit>()
it.mikeslab.util.math.MathUtil
it.mikeslab.util.math.MathUtil: MathUtil()
it.mikeslab.util.math.MathUtil: double round(double)
it.mikeslab.util.math.RandomUtils
it.mikeslab.util.math.RandomUtils: int CREDIT_CARD_LENGTH
it.mikeslab.util.math.RandomUtils: int PIN_LENGTH
it.mikeslab.util.math.RandomUtils: int CARD_ID_LENGTH
it.mikeslab.util.math.RandomUtils: RandomUtils()
it.mikeslab.util.math.RandomUtils: int generateRandomInt(int,int)
it.mikeslab.util.math.RandomUtils: int generateRandomInt(int,int,int)
it.mikeslab.util.math.RandomUtils: long generateRandomLong(int,int,int)
it.mikeslab.util.transactions.EconomyManager
it.mikeslab.util.transactions.EconomyManager: it.mikeslab.util.GSONUtil gsonUtil
it.mikeslab.util.transactions.EconomyManager: net.milkbowl.vault.economy.Economy econ
it.mikeslab.util.transactions.EconomyManager: java.util.Map dailyWithdraws
it.mikeslab.util.transactions.EconomyManager: EconomyManager(it.mikeslab.vault.EconomyCore)
it.mikeslab.util.transactions.EconomyManager: boolean withdraw(java.util.UUID,java.lang.String,double)
it.mikeslab.util.transactions.EconomyManager: void deposit(java.util.UUID,java.lang.String,double)
it.mikeslab.util.transactions.EconomyManager: boolean transfer(java.util.UUID,java.util.UUID,java.lang.String,double,java.lang.String)
it.mikeslab.util.transactions.EconomyManager: it.mikeslab.util.transactions.TransferResult canWithdraw(java.util.UUID,double,java.lang.String,boolean)
it.mikeslab.util.transactions.EconomyManager: boolean withdrawWithCurrencySystem(java.util.UUID,double,java.lang.String)
it.mikeslab.util.transactions.EconomyManager: void depositWithCurrencySystem(java.util.UUID,double,java.lang.String)
it.mikeslab.util.transactions.EconomyManager: double getBalance(org.bukkit.OfflinePlayer,java.lang.String)
it.mikeslab.util.transactions.EconomyManager: void setBalance(java.util.UUID,java.lang.String,double)
it.mikeslab.util.transactions.EconomyManager: boolean hasBankAccount(java.util.UUID)
it.mikeslab.util.transactions.EconomyManager: boolean compareCardID(java.lang.String,java.util.UUID)
it.mikeslab.util.transactions.EconomyManager: java.util.List getBalanceMessages(java.lang.String,org.bukkit.OfflinePlayer)
it.mikeslab.util.transactions.EconomyManager: it.mikeslab.util.transactions.TransferResult exchange(java.util.UUID,java.lang.String,java.lang.String,double)
it.mikeslab.util.transactions.EconomyManager: EconomyManager(it.mikeslab.util.GSONUtil,net.milkbowl.vault.economy.Economy,java.util.Map)
it.mikeslab.util.transactions.EconomyManager: java.util.Map getDailyWithdraws()
it.mikeslab.util.transactions.EconomyManager: java.lang.Boolean lambda$compareCardID$0(java.lang.String,com.google.gson.JsonObject)
it.mikeslab.util.transactions.Transaction
it.mikeslab.util.transactions.Transaction: java.lang.String id
it.mikeslab.util.transactions.Transaction: java.util.UUID from
it.mikeslab.util.transactions.Transaction: java.util.UUID to
it.mikeslab.util.transactions.Transaction: java.lang.String currency
it.mikeslab.util.transactions.Transaction: java.lang.String reason
it.mikeslab.util.transactions.Transaction: double amount
it.mikeslab.util.transactions.Transaction: long timestamp
it.mikeslab.util.transactions.Transaction: it.mikeslab.util.transactions.Transaction empty()
it.mikeslab.util.transactions.Transaction: java.lang.String randomId()
it.mikeslab.util.transactions.Transaction: java.lang.String getId()
it.mikeslab.util.transactions.Transaction: java.util.UUID getFrom()
it.mikeslab.util.transactions.Transaction: java.util.UUID getTo()
it.mikeslab.util.transactions.Transaction: java.lang.String getCurrency()
it.mikeslab.util.transactions.Transaction: java.lang.String getReason()
it.mikeslab.util.transactions.Transaction: double getAmount()
it.mikeslab.util.transactions.Transaction: long getTimestamp()
it.mikeslab.util.transactions.Transaction: void setId(java.lang.String)
it.mikeslab.util.transactions.Transaction: void setFrom(java.util.UUID)
it.mikeslab.util.transactions.Transaction: void setTo(java.util.UUID)
it.mikeslab.util.transactions.Transaction: void setCurrency(java.lang.String)
it.mikeslab.util.transactions.Transaction: void setReason(java.lang.String)
it.mikeslab.util.transactions.Transaction: void setAmount(double)
it.mikeslab.util.transactions.Transaction: void setTimestamp(long)
it.mikeslab.util.transactions.Transaction: Transaction(java.lang.String,java.util.UUID,java.util.UUID,java.lang.String,java.lang.String,double,long)
it.mikeslab.util.transactions.TransactionResult
it.mikeslab.util.transactions.TransactionResult: it.mikeslab.util.transactions.TransactionResult ACCOUNT_NOT_FOUND
it.mikeslab.util.transactions.TransactionResult: it.mikeslab.util.transactions.TransactionResult SUCCESS
it.mikeslab.util.transactions.TransactionResult: it.mikeslab.util.transactions.TransactionResult[] $VALUES
it.mikeslab.util.transactions.TransactionResult: it.mikeslab.util.transactions.TransactionResult[] values()
it.mikeslab.util.transactions.TransactionResult: it.mikeslab.util.transactions.TransactionResult valueOf(java.lang.String)
it.mikeslab.util.transactions.TransactionResult: TransactionResult(java.lang.String,int)
it.mikeslab.util.transactions.TransactionResult: it.mikeslab.util.transactions.TransactionResult[] $values()
it.mikeslab.util.transactions.TransactionResult: void <clinit>()
it.mikeslab.util.transactions.TransactionUtil
it.mikeslab.util.transactions.TransactionUtil: it.mikeslab.util.GSONUtil gsonUtil
it.mikeslab.util.transactions.TransactionUtil: boolean useMongo
it.mikeslab.util.transactions.TransactionUtil: it.mikeslab.util.database.MongoDBHandler mongoHandler
it.mikeslab.util.transactions.TransactionUtil: java.lang.String transactionsCollectionName
it.mikeslab.util.transactions.TransactionUtil: boolean wireTransferTransactionEnabled
it.mikeslab.util.transactions.TransactionUtil: boolean bankNoteTransactionEnabled
it.mikeslab.util.transactions.TransactionUtil: boolean exchangeTransactionEnabled
it.mikeslab.util.transactions.TransactionUtil: void init()
it.mikeslab.util.transactions.TransactionUtil: void addTransaction(it.mikeslab.util.transactions.Transaction)
it.mikeslab.util.transactions.TransactionUtil: boolean removeTransaction(java.lang.String)
it.mikeslab.util.transactions.TransactionUtil: it.mikeslab.util.transactions.Transaction getTransaction(java.lang.String)
it.mikeslab.util.transactions.TransactionUtil: java.util.List getTransactionsForAccount(java.util.UUID,int,int)
it.mikeslab.util.transactions.TransactionUtil: TransactionUtil(boolean,it.mikeslab.util.database.MongoDBHandler,java.lang.String)
it.mikeslab.util.transactions.TransactionUtil: boolean isWireTransferTransactionEnabled()
it.mikeslab.util.transactions.TransactionUtil: boolean isBankNoteTransactionEnabled()
it.mikeslab.util.transactions.TransactionUtil: boolean isExchangeTransactionEnabled()
it.mikeslab.util.transactions.TransferResult
it.mikeslab.util.transactions.TransferResult: it.mikeslab.util.transactions.TransferResult INSUFFICIENT_FUNDS
it.mikeslab.util.transactions.TransferResult: it.mikeslab.util.transactions.TransferResult INVALID_TRANSFER_AMOUNT
it.mikeslab.util.transactions.TransferResult: it.mikeslab.util.transactions.TransferResult CANNOT_TRANSFER_TO_SELF
it.mikeslab.util.transactions.TransferResult: it.mikeslab.util.transactions.TransferResult ACCOUNT_NOT_FOUND
it.mikeslab.util.transactions.TransferResult: it.mikeslab.util.transactions.TransferResult DAILY_WITHDRAW_LIMIT_REACHED
it.mikeslab.util.transactions.TransferResult: it.mikeslab.util.transactions.TransferResult TRANSFER_LIMIT_REACHED
it.mikeslab.util.transactions.TransferResult: it.mikeslab.util.transactions.TransferResult SUCCESS
it.mikeslab.util.transactions.TransferResult: it.mikeslab.util.transactions.TransferResult[] $VALUES
it.mikeslab.util.transactions.TransferResult: it.mikeslab.util.transactions.TransferResult[] values()
it.mikeslab.util.transactions.TransferResult: it.mikeslab.util.transactions.TransferResult valueOf(java.lang.String)
it.mikeslab.util.transactions.TransferResult: TransferResult(java.lang.String,int)
it.mikeslab.util.transactions.TransferResult: it.mikeslab.util.transactions.TransferResult[] $values()
it.mikeslab.util.transactions.TransferResult: void <clinit>()
it.mikeslab.util.transactions.WireTransferUtil
it.mikeslab.util.transactions.WireTransferUtil: WireTransferUtil()
it.mikeslab.util.transactions.WireTransferUtil: void sendWireTransfer(org.bukkit.entity.Player,org.bukkit.entity.Player,double,java.lang.String[],java.lang.String)
it.mikeslab.util.transactions.WireTransferUtil$1
it.mikeslab.util.transactions.WireTransferUtil$1: int[] $SwitchMap$it$mikeslab$util$transactions$TransferResult
it.mikeslab.util.transactions.WireTransferUtil$1: void <clinit>()
it.mikeslab.vault.EconomyCore
it.mikeslab.vault.EconomyCore: java.lang.String BALANCES_KEY
it.mikeslab.vault.EconomyCore: java.lang.String CURRENCY_KEY
it.mikeslab.vault.EconomyCore: it.mikeslab.util.GSONUtil playerDataGson
it.mikeslab.vault.EconomyCore: boolean isEnabled()
it.mikeslab.vault.EconomyCore: java.lang.String getName()
it.mikeslab.vault.EconomyCore: boolean hasBankSupport()
it.mikeslab.vault.EconomyCore: int fractionalDigits()
it.mikeslab.vault.EconomyCore: java.lang.String format(double)
it.mikeslab.vault.EconomyCore: java.lang.String currencyNamePlural()
it.mikeslab.vault.EconomyCore: java.lang.String currencyNameSingular()
it.mikeslab.vault.EconomyCore: boolean hasAccount(java.lang.String)
it.mikeslab.vault.EconomyCore: boolean hasAccount(org.bukkit.OfflinePlayer)
it.mikeslab.vault.EconomyCore: boolean hasAccount(java.lang.String,java.lang.String)
it.mikeslab.vault.EconomyCore: boolean hasAccount(org.bukkit.OfflinePlayer,java.lang.String)
it.mikeslab.vault.EconomyCore: double getBalance(java.lang.String)
it.mikeslab.vault.EconomyCore: double getBalance(org.bukkit.OfflinePlayer)
it.mikeslab.vault.EconomyCore: double getBalance(java.lang.String,java.lang.String)
it.mikeslab.vault.EconomyCore: double getBalance(org.bukkit.OfflinePlayer,java.lang.String)
it.mikeslab.vault.EconomyCore: boolean has(java.lang.String,double)
it.mikeslab.vault.EconomyCore: boolean has(org.bukkit.OfflinePlayer,double)
it.mikeslab.vault.EconomyCore: boolean has(java.lang.String,java.lang.String,double)
it.mikeslab.vault.EconomyCore: boolean has(org.bukkit.OfflinePlayer,java.lang.String,double)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse withdrawPlayer(java.lang.String,double)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse withdrawPlayer(org.bukkit.OfflinePlayer,double)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse withdrawPlayer(java.lang.String,java.lang.String,double)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse withdrawPlayer(org.bukkit.OfflinePlayer,java.lang.String,double)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse depositPlayer(java.lang.String,double)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse depositPlayer(org.bukkit.OfflinePlayer,double)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse depositPlayer(java.lang.String,java.lang.String,double)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse depositPlayer(org.bukkit.OfflinePlayer,java.lang.String,double)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse createBank(java.lang.String,java.lang.String)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse createBank(java.lang.String,org.bukkit.OfflinePlayer)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse deleteBank(java.lang.String)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse bankBalance(java.lang.String)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse bankHas(java.lang.String,double)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse bankWithdraw(java.lang.String,double)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse bankDeposit(java.lang.String,double)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse isBankOwner(java.lang.String,java.lang.String)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse isBankOwner(java.lang.String,org.bukkit.OfflinePlayer)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse isBankMember(java.lang.String,java.lang.String)
it.mikeslab.vault.EconomyCore: net.milkbowl.vault.economy.EconomyResponse isBankMember(java.lang.String,org.bukkit.OfflinePlayer)
it.mikeslab.vault.EconomyCore: java.util.List getBanks()
it.mikeslab.vault.EconomyCore: boolean createPlayerAccount(java.lang.String)
it.mikeslab.vault.EconomyCore: boolean createPlayerAccount(org.bukkit.OfflinePlayer)
it.mikeslab.vault.EconomyCore: boolean createPlayerAccount(java.lang.String,java.lang.String)
it.mikeslab.vault.EconomyCore: boolean createPlayerAccount(org.bukkit.OfflinePlayer,java.lang.String)
it.mikeslab.vault.EconomyCore: org.bukkit.OfflinePlayer getOfflinePlayer(java.lang.String)
it.mikeslab.vault.EconomyCore: EconomyCore(it.mikeslab.util.GSONUtil)
it.mikeslab.vault.EconomyCore: void lambda$depositPlayer$1(com.google.gson.JsonObject,com.google.gson.JsonObject)
it.mikeslab.vault.EconomyCore: com.google.gson.JsonObject lambda$depositPlayer$0(com.google.gson.JsonObject)
it.mikeslab.vault.EconomyCore: void <clinit>()
net.kyori.adventure.audience.MessageType: net.kyori.adventure.audience.MessageType[] values()
net.kyori.adventure.audience.MessageType: net.kyori.adventure.audience.MessageType valueOf(java.lang.String)
net.kyori.adventure.bossbar.BossBar$Color: net.kyori.adventure.bossbar.BossBar$Color[] values()
net.kyori.adventure.bossbar.BossBar$Color: net.kyori.adventure.bossbar.BossBar$Color valueOf(java.lang.String)
net.kyori.adventure.bossbar.BossBar$Flag: net.kyori.adventure.bossbar.BossBar$Flag[] values()
net.kyori.adventure.bossbar.BossBar$Flag: net.kyori.adventure.bossbar.BossBar$Flag valueOf(java.lang.String)
net.kyori.adventure.bossbar.BossBar$Overlay: net.kyori.adventure.bossbar.BossBar$Overlay[] values()
net.kyori.adventure.bossbar.BossBar$Overlay: net.kyori.adventure.bossbar.BossBar$Overlay valueOf(java.lang.String)
net.kyori.adventure.platform.bukkit.BukkitAudiences
net.kyori.adventure.platform.bukkit.BukkitAudiences: net.kyori.adventure.platform.bukkit.BukkitAudiences create(org.bukkit.plugin.Plugin)
net.kyori.adventure.platform.bukkit.BukkitAudiences: net.kyori.adventure.platform.bukkit.BukkitAudiences$Builder builder(org.bukkit.plugin.Plugin)
net.kyori.adventure.platform.bukkit.BukkitAudiences: net.kyori.adventure.sound.Sound$Emitter asEmitter(org.bukkit.entity.Entity)
net.kyori.adventure.platform.bukkit.BukkitAudiences: net.kyori.adventure.audience.Audience sender(org.bukkit.command.CommandSender)
net.kyori.adventure.platform.bukkit.BukkitAudiences: net.kyori.adventure.audience.Audience player(org.bukkit.entity.Player)
net.kyori.adventure.platform.bukkit.BukkitAudiences: net.kyori.adventure.audience.Audience filter(java.util.function.Predicate)
net.kyori.adventure.platform.bukkit.BukkitAudiences$Builder
net.kyori.adventure.platform.bukkit.BukkitAudiencesImpl
net.kyori.adventure.platform.bukkit.BukkitComponentSerializer
net.kyori.adventure.platform.bukkit.BukkitComponentSerializer: net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer legacy()
net.kyori.adventure.platform.bukkit.BukkitComponentSerializer: net.kyori.adventure.text.serializer.gson.GsonComponentSerializer gson()
net.kyori.adventure.platform.bukkit.CraftBukkitFacet: boolean isSupported()
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$AbstractBook
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$AbstractBook: boolean isSupported()
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$AbstractBook: java.lang.String createMessage(org.bukkit.entity.Player,net.kyori.adventure.text.Component)
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$AbstractBook: org.bukkit.inventory.ItemStack createBook(java.lang.String,java.lang.String,java.lang.Iterable)
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$AbstractBook: void openBook(org.bukkit.entity.Player,org.bukkit.inventory.ItemStack)
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$AbstractBook: java.lang.Object createMessage(org.bukkit.command.CommandSender,net.kyori.adventure.text.Component)
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$AbstractBook: java.lang.Object createMessage(java.lang.Object,net.kyori.adventure.text.Component)
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$AbstractBook: void openBook(java.lang.Object,java.lang.Object)
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$AbstractBook: java.lang.Object createBook(java.lang.String,java.lang.String,java.lang.Iterable)
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$BossBar$Builder
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$BossBar$Builder: boolean isSupported()
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$BossBar$Builder: net.kyori.adventure.platform.bukkit.CraftBukkitFacet$BossBar createBossBar(java.util.Collection)
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$BossBar$Builder: net.kyori.adventure.platform.facet.Facet$BossBar createBossBar(java.util.Collection)
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$BossBarWither
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$BossBarWither$Builder
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$BossBarWither$Builder: net.kyori.adventure.platform.bukkit.CraftBukkitFacet$BossBarWither createBossBar(java.util.Collection)
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$BossBarWither$Builder: boolean isSupported()
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$BossBarWither$Builder: net.kyori.adventure.platform.facet.Facet$BossBar createBossBar(java.util.Collection)
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$FakeEntity
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$FakeEntity: void onPlayerMove(org.bukkit.event.player.PlayerMoveEvent)
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$PacketFacet: void sendPacket(org.bukkit.entity.Player,java.lang.Object)
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$PacketFacet: void sendMessage(org.bukkit.command.CommandSender,java.lang.Object)
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$PacketFacet: java.lang.Object createMessage(org.bukkit.command.CommandSender,net.kyori.adventure.text.Component)
net.kyori.adventure.platform.bukkit.CraftBukkitFacet$PacketFacet: java.lang.Object createMessage(java.lang.Object,net.kyori.adventure.text.Component)
net.kyori.adventure.platform.bukkit.MinecraftComponentSerializer
net.kyori.adventure.platform.bukkit.MinecraftComponentSerializer: MinecraftComponentSerializer()
net.kyori.adventure.platform.bukkit.MinecraftComponentSerializer: boolean isSupported()
net.kyori.adventure.platform.bukkit.MinecraftComponentSerializer: net.kyori.adventure.platform.bukkit.MinecraftComponentSerializer get()
net.kyori.adventure.platform.bukkit.MinecraftComponentSerializer: net.kyori.adventure.text.Component deserialize(java.lang.Object)
net.kyori.adventure.platform.bukkit.MinecraftComponentSerializer: java.lang.Object serialize(net.kyori.adventure.text.Component)
net.kyori.adventure.platform.facet.FacetBase: boolean isSupported()
net.kyori.adventure.platform.facet.FacetBase: boolean isApplicable(java.lang.Object)
net.kyori.adventure.platform.facet.FacetPointers$Type: net.kyori.adventure.platform.facet.FacetPointers$Type[] values()
net.kyori.adventure.platform.facet.FacetPointers$Type: net.kyori.adventure.platform.facet.FacetPointers$Type valueOf(java.lang.String)
net.kyori.adventure.sound.Sound$Source: net.kyori.adventure.sound.Sound$Source[] values()
net.kyori.adventure.sound.Sound$Source: net.kyori.adventure.sound.Sound$Source valueOf(java.lang.String)
net.kyori.adventure.text.BlockNBTComponent$WorldPos$Coordinate$Type: net.kyori.adventure.text.BlockNBTComponent$WorldPos$Coordinate$Type[] values()
net.kyori.adventure.text.BlockNBTComponent$WorldPos$Coordinate$Type: net.kyori.adventure.text.BlockNBTComponent$WorldPos$Coordinate$Type valueOf(java.lang.String)
net.kyori.adventure.text.ComponentIteratorFlag: net.kyori.adventure.text.ComponentIteratorFlag[] values()
net.kyori.adventure.text.ComponentIteratorFlag: net.kyori.adventure.text.ComponentIteratorFlag valueOf(java.lang.String)
net.kyori.adventure.text.PatternReplacementResult: net.kyori.adventure.text.PatternReplacementResult[] values()
net.kyori.adventure.text.PatternReplacementResult: net.kyori.adventure.text.PatternReplacementResult valueOf(java.lang.String)
net.kyori.adventure.text.event.ClickEvent$Action: net.kyori.adventure.text.event.ClickEvent$Action[] values()
net.kyori.adventure.text.event.ClickEvent$Action: net.kyori.adventure.text.event.ClickEvent$Action valueOf(java.lang.String)
net.kyori.adventure.text.format.Style$Merge: net.kyori.adventure.text.format.Style$Merge[] values()
net.kyori.adventure.text.format.Style$Merge: net.kyori.adventure.text.format.Style$Merge valueOf(java.lang.String)
net.kyori.adventure.text.format.Style$Merge$Strategy: net.kyori.adventure.text.format.Style$Merge$Strategy[] values()
net.kyori.adventure.text.format.Style$Merge$Strategy: net.kyori.adventure.text.format.Style$Merge$Strategy valueOf(java.lang.String)
net.kyori.adventure.text.format.TextDecoration: net.kyori.adventure.text.format.TextDecoration[] values()
net.kyori.adventure.text.format.TextDecoration: net.kyori.adventure.text.format.TextDecoration valueOf(java.lang.String)
net.kyori.adventure.text.format.TextDecoration$State: net.kyori.adventure.text.format.TextDecoration$State[] values()
net.kyori.adventure.text.format.TextDecoration$State: net.kyori.adventure.text.format.TextDecoration$State valueOf(java.lang.String)
net.kyori.adventure.text.minimessage.Context
net.kyori.adventure.text.minimessage.Context: net.kyori.adventure.text.Component deserialize(java.lang.String)
net.kyori.adventure.text.minimessage.Context: net.kyori.adventure.text.Component deserialize(java.lang.String,net.kyori.adventure.text.minimessage.tag.resolver.TagResolver)
net.kyori.adventure.text.minimessage.Context: net.kyori.adventure.text.Component deserialize(java.lang.String,net.kyori.adventure.text.minimessage.tag.resolver.TagResolver[])
net.kyori.adventure.text.minimessage.Context: net.kyori.adventure.text.minimessage.ParsingException newException(java.lang.String,net.kyori.adventure.text.minimessage.tag.resolver.ArgumentQueue)
net.kyori.adventure.text.minimessage.Context: net.kyori.adventure.text.minimessage.ParsingException newException(java.lang.String)
net.kyori.adventure.text.minimessage.Context: net.kyori.adventure.text.minimessage.ParsingException newException(java.lang.String,java.lang.Throwable,net.kyori.adventure.text.minimessage.tag.resolver.ArgumentQueue)
net.kyori.adventure.text.minimessage.MiniMessage
net.kyori.adventure.text.minimessage.MiniMessage: net.kyori.adventure.text.minimessage.MiniMessage miniMessage()
net.kyori.adventure.text.minimessage.MiniMessage: java.lang.String escapeTags(java.lang.String)
net.kyori.adventure.text.minimessage.MiniMessage: java.lang.String escapeTags(java.lang.String,net.kyori.adventure.text.minimessage.tag.resolver.TagResolver)
net.kyori.adventure.text.minimessage.MiniMessage: java.lang.String escapeTags(java.lang.String,net.kyori.adventure.text.minimessage.tag.resolver.TagResolver[])
net.kyori.adventure.text.minimessage.MiniMessage: java.lang.String stripTags(java.lang.String)
net.kyori.adventure.text.minimessage.MiniMessage: java.lang.String stripTags(java.lang.String,net.kyori.adventure.text.minimessage.tag.resolver.TagResolver)
net.kyori.adventure.text.minimessage.MiniMessage: java.lang.String stripTags(java.lang.String,net.kyori.adventure.text.minimessage.tag.resolver.TagResolver[])
net.kyori.adventure.text.minimessage.MiniMessage: net.kyori.adventure.text.Component deserialize(java.lang.String,net.kyori.adventure.text.minimessage.tag.resolver.TagResolver)
net.kyori.adventure.text.minimessage.MiniMessage: net.kyori.adventure.text.Component deserialize(java.lang.String,net.kyori.adventure.text.minimessage.tag.resolver.TagResolver[])
net.kyori.adventure.text.minimessage.MiniMessage: net.kyori.adventure.text.minimessage.tree.Node$Root deserializeToTree(java.lang.String)
net.kyori.adventure.text.minimessage.MiniMessage: net.kyori.adventure.text.minimessage.tree.Node$Root deserializeToTree(java.lang.String,net.kyori.adventure.text.minimessage.tag.resolver.TagResolver)
net.kyori.adventure.text.minimessage.MiniMessage: net.kyori.adventure.text.minimessage.tree.Node$Root deserializeToTree(java.lang.String,net.kyori.adventure.text.minimessage.tag.resolver.TagResolver[])
net.kyori.adventure.text.minimessage.MiniMessage: net.kyori.adventure.text.minimessage.MiniMessage$Builder builder()
net.kyori.adventure.text.minimessage.MiniMessage$Builder
net.kyori.adventure.text.minimessage.MiniMessage$Builder: net.kyori.adventure.text.minimessage.MiniMessage$Builder tags(net.kyori.adventure.text.minimessage.tag.resolver.TagResolver)
net.kyori.adventure.text.minimessage.MiniMessage$Builder: net.kyori.adventure.text.minimessage.MiniMessage$Builder editTags(java.util.function.Consumer)
net.kyori.adventure.text.minimessage.MiniMessage$Builder: net.kyori.adventure.text.minimessage.MiniMessage$Builder strict(boolean)
net.kyori.adventure.text.minimessage.MiniMessage$Builder: net.kyori.adventure.text.minimessage.MiniMessage$Builder debug(java.util.function.Consumer)
net.kyori.adventure.text.minimessage.MiniMessage$Builder: net.kyori.adventure.text.minimessage.MiniMessage$Builder postProcessor(java.util.function.UnaryOperator)
net.kyori.adventure.text.minimessage.MiniMessage$Builder: net.kyori.adventure.text.minimessage.MiniMessage$Builder preProcessor(java.util.function.UnaryOperator)
net.kyori.adventure.text.minimessage.MiniMessage$Builder: net.kyori.adventure.text.minimessage.MiniMessage build()
net.kyori.adventure.text.minimessage.MiniMessage$Builder: java.lang.Object build()
net.kyori.adventure.text.minimessage.MiniMessage$Provider
net.kyori.adventure.text.minimessage.MiniMessage$Provider: net.kyori.adventure.text.minimessage.MiniMessage miniMessage()
net.kyori.adventure.text.minimessage.MiniMessage$Provider: java.util.function.Consumer builder()
net.kyori.adventure.text.minimessage.MiniMessageSerializer$Collector$TagState: net.kyori.adventure.text.minimessage.MiniMessageSerializer$Collector$TagState[] values()
net.kyori.adventure.text.minimessage.MiniMessageSerializer$Collector$TagState: net.kyori.adventure.text.minimessage.MiniMessageSerializer$Collector$TagState valueOf(java.lang.String)
net.kyori.adventure.text.minimessage.ParsingException
net.kyori.adventure.text.minimessage.ParsingException: int LOCATION_UNKNOWN
net.kyori.adventure.text.minimessage.ParsingException: java.lang.String originalText()
net.kyori.adventure.text.minimessage.ParsingException: java.lang.String detailMessage()
net.kyori.adventure.text.minimessage.ParsingException: int startIndex()
net.kyori.adventure.text.minimessage.ParsingException: int endIndex()
net.kyori.adventure.text.minimessage.internal.TagInternals
net.kyori.adventure.text.minimessage.internal.TagInternals: void assertValidTagName(java.lang.String)
net.kyori.adventure.text.minimessage.internal.TagInternals: boolean sanitizeAndCheckValidTagName(java.lang.String)
net.kyori.adventure.text.minimessage.internal.TagInternals: void sanitizeAndAssertValidTagName(java.lang.String)
net.kyori.adventure.text.minimessage.internal.parser.ParsingExceptionImpl
net.kyori.adventure.text.minimessage.internal.parser.ParsingExceptionImpl: ParsingExceptionImpl(java.lang.String,java.lang.String,net.kyori.adventure.text.minimessage.internal.parser.Token[])
net.kyori.adventure.text.minimessage.internal.parser.ParsingExceptionImpl: ParsingExceptionImpl(java.lang.String,java.lang.String,java.lang.Throwable,boolean,net.kyori.adventure.text.minimessage.internal.parser.Token[])
net.kyori.adventure.text.minimessage.internal.parser.ParsingExceptionImpl: java.lang.String getMessage()
net.kyori.adventure.text.minimessage.internal.parser.ParsingExceptionImpl: java.lang.String detailMessage()
net.kyori.adventure.text.minimessage.internal.parser.ParsingExceptionImpl: java.lang.String originalText()
net.kyori.adventure.text.minimessage.internal.parser.ParsingExceptionImpl: net.kyori.adventure.text.minimessage.internal.parser.Token[] tokens()
net.kyori.adventure.text.minimessage.internal.parser.ParsingExceptionImpl: void tokens(net.kyori.adventure.text.minimessage.internal.parser.Token[])
net.kyori.adventure.text.minimessage.internal.parser.ParsingExceptionImpl: int startIndex()
net.kyori.adventure.text.minimessage.internal.parser.ParsingExceptionImpl: int endIndex()
net.kyori.adventure.text.minimessage.internal.parser.Token
net.kyori.adventure.text.minimessage.internal.parser.Token: Token(int,int,net.kyori.adventure.text.minimessage.internal.parser.TokenType)
net.kyori.adventure.text.minimessage.internal.parser.Token: int startIndex()
net.kyori.adventure.text.minimessage.internal.parser.Token: int endIndex()
net.kyori.adventure.text.minimessage.internal.parser.Token: net.kyori.adventure.text.minimessage.internal.parser.TokenType type()
net.kyori.adventure.text.minimessage.internal.parser.Token: java.util.List childTokens()
net.kyori.adventure.text.minimessage.internal.parser.Token: void childTokens(java.util.List)
net.kyori.adventure.text.minimessage.internal.parser.Token: java.lang.CharSequence get(java.lang.CharSequence)
net.kyori.adventure.text.minimessage.internal.parser.Token: java.util.stream.Stream examinableProperties()
net.kyori.adventure.text.minimessage.internal.parser.Token: boolean equals(java.lang.Object)
net.kyori.adventure.text.minimessage.internal.parser.Token: int hashCode()
net.kyori.adventure.text.minimessage.internal.parser.Token: java.lang.String toString()
net.kyori.adventure.text.minimessage.internal.parser.TokenParser
net.kyori.adventure.text.minimessage.internal.parser.TokenParser: char TAG_START
net.kyori.adventure.text.minimessage.internal.parser.TokenParser: char TAG_END
net.kyori.adventure.text.minimessage.internal.parser.TokenParser: char CLOSE_TAG
net.kyori.adventure.text.minimessage.internal.parser.TokenParser: char SEPARATOR
net.kyori.adventure.text.minimessage.internal.parser.TokenParser: char ESCAPE
net.kyori.adventure.text.minimessage.internal.parser.TokenParser: net.kyori.adventure.text.minimessage.internal.parser.node.RootNode parse(net.kyori.adventure.text.minimessage.internal.parser.TokenParser$TagProvider,java.util.function.Predicate,java.lang.String,java.lang.String,boolean)
net.kyori.adventure.text.minimessage.internal.parser.TokenParser: java.lang.String resolvePreProcessTags(java.lang.String,net.kyori.adventure.text.minimessage.internal.parser.TokenParser$TagProvider)
net.kyori.adventure.text.minimessage.internal.parser.TokenParser: java.util.List tokenize(java.lang.String,boolean)
net.kyori.adventure.text.minimessage.internal.parser.TokenParser: void parseString(java.lang.String,boolean,net.kyori.adventure.text.minimessage.internal.parser.match.MatchedTokenConsumer)
net.kyori.adventure.text.minimessage.internal.parser.TokenParser: java.lang.String unescape(java.lang.String,int,int,java.util.function.IntPredicate)
net.kyori.adventure.text.minimessage.internal.parser.TokenParser$FirstPassState: net.kyori.adventure.text.minimessage.internal.parser.TokenParser$FirstPassState[] values()
net.kyori.adventure.text.minimessage.internal.parser.TokenParser$FirstPassState: net.kyori.adventure.text.minimessage.internal.parser.TokenParser$FirstPassState valueOf(java.lang.String)
net.kyori.adventure.text.minimessage.internal.parser.TokenParser$SecondPassState: net.kyori.adventure.text.minimessage.internal.parser.TokenParser$SecondPassState[] values()
net.kyori.adventure.text.minimessage.internal.parser.TokenParser$SecondPassState: net.kyori.adventure.text.minimessage.internal.parser.TokenParser$SecondPassState valueOf(java.lang.String)
net.kyori.adventure.text.minimessage.internal.parser.TokenParser$TagProvider
net.kyori.adventure.text.minimessage.internal.parser.TokenParser$TagProvider: net.kyori.adventure.text.minimessage.tag.Tag resolve(java.lang.String,java.util.List,net.kyori.adventure.text.minimessage.internal.parser.Token)
net.kyori.adventure.text.minimessage.internal.parser.TokenParser$TagProvider: net.kyori.adventure.text.minimessage.tag.Tag resolve(java.lang.String)
net.kyori.adventure.text.minimessage.internal.parser.TokenParser$TagProvider: net.kyori.adventure.text.minimessage.tag.Tag resolve(net.kyori.adventure.text.minimessage.internal.parser.node.TagNode)
net.kyori.adventure.text.minimessage.internal.parser.TokenParser$TagProvider: java.lang.String sanitizePlaceholderName(java.lang.String)
net.kyori.adventure.text.minimessage.internal.parser.TokenType
net.kyori.adventure.text.minimessage.internal.parser.TokenType: net.kyori.adventure.text.minimessage.internal.parser.TokenType TEXT
net.kyori.adventure.text.minimessage.internal.parser.TokenType: net.kyori.adventure.text.minimessage.internal.parser.TokenType OPEN_TAG
net.kyori.adventure.text.minimessage.internal.parser.TokenType: net.kyori.adventure.text.minimessage.internal.parser.TokenType OPEN_CLOSE_TAG
net.kyori.adventure.text.minimessage.internal.parser.TokenType: net.kyori.adventure.text.minimessage.internal.parser.TokenType CLOSE_TAG
net.kyori.adventure.text.minimessage.internal.parser.TokenType: net.kyori.adventure.text.minimessage.internal.parser.TokenType TAG_VALUE
net.kyori.adventure.text.minimessage.internal.parser.TokenType: net.kyori.adventure.text.minimessage.internal.parser.TokenType[] values()
net.kyori.adventure.text.minimessage.internal.parser.TokenType: net.kyori.adventure.text.minimessage.internal.parser.TokenType valueOf(java.lang.String)
net.kyori.adventure.text.minimessage.internal.parser.match.MatchedTokenConsumer
net.kyori.adventure.text.minimessage.internal.parser.match.MatchedTokenConsumer: MatchedTokenConsumer(java.lang.String)
net.kyori.adventure.text.minimessage.internal.parser.match.MatchedTokenConsumer: void accept(int,int,net.kyori.adventure.text.minimessage.internal.parser.TokenType)
net.kyori.adventure.text.minimessage.internal.parser.match.MatchedTokenConsumer: java.lang.Object result()
net.kyori.adventure.text.minimessage.internal.parser.match.MatchedTokenConsumer: int lastEndIndex()
net.kyori.adventure.text.minimessage.internal.parser.match.StringResolvingMatchedTokenConsumer
net.kyori.adventure.text.minimessage.internal.parser.match.StringResolvingMatchedTokenConsumer: StringResolvingMatchedTokenConsumer(java.lang.String,net.kyori.adventure.text.minimessage.internal.parser.TokenParser$TagProvider)
net.kyori.adventure.text.minimessage.internal.parser.match.StringResolvingMatchedTokenConsumer: void accept(int,int,net.kyori.adventure.text.minimessage.internal.parser.TokenType)
net.kyori.adventure.text.minimessage.internal.parser.match.StringResolvingMatchedTokenConsumer: java.lang.String result()
net.kyori.adventure.text.minimessage.internal.parser.match.StringResolvingMatchedTokenConsumer: java.lang.Object result()
net.kyori.adventure.text.minimessage.internal.parser.match.TokenListProducingMatchedTokenConsumer
net.kyori.adventure.text.minimessage.internal.parser.match.TokenListProducingMatchedTokenConsumer: TokenListProducingMatchedTokenConsumer(java.lang.String)
net.kyori.adventure.text.minimessage.internal.parser.match.TokenListProducingMatchedTokenConsumer: void accept(int,int,net.kyori.adventure.text.minimessage.internal.parser.TokenType)
net.kyori.adventure.text.minimessage.internal.parser.match.TokenListProducingMatchedTokenConsumer: java.util.List result()
net.kyori.adventure.text.minimessage.internal.parser.match.TokenListProducingMatchedTokenConsumer: java.lang.Object result()
net.kyori.adventure.text.minimessage.internal.parser.node.ElementNode
net.kyori.adventure.text.minimessage.internal.parser.node.ElementNode: net.kyori.adventure.text.minimessage.internal.parser.node.ElementNode parent()
net.kyori.adventure.text.minimessage.internal.parser.node.ElementNode: net.kyori.adventure.text.minimessage.internal.parser.Token token()
net.kyori.adventure.text.minimessage.internal.parser.node.ElementNode: java.lang.String sourceMessage()
net.kyori.adventure.text.minimessage.internal.parser.node.ElementNode: java.util.List children()
net.kyori.adventure.text.minimessage.internal.parser.node.ElementNode: java.util.List unsafeChildren()
net.kyori.adventure.text.minimessage.internal.parser.node.ElementNode: void addChild(net.kyori.adventure.text.minimessage.internal.parser.node.ElementNode)
net.kyori.adventure.text.minimessage.internal.parser.node.ElementNode: java.lang.StringBuilder buildToString(java.lang.StringBuilder,int)
net.kyori.adventure.text.minimessage.internal.parser.node.ElementNode: java.lang.String toString()
net.kyori.adventure.text.minimessage.internal.parser.node.ElementNode: net.kyori.adventure.text.minimessage.tree.Node parent()
net.kyori.adventure.text.minimessage.internal.parser.node.RootNode
net.kyori.adventure.text.minimessage.internal.parser.node.RootNode: RootNode(java.lang.String,java.lang.String)
net.kyori.adventure.text.minimessage.internal.parser.node.RootNode: java.lang.String input()
net.kyori.adventure.text.minimessage.internal.parser.node.TagNode
net.kyori.adventure.text.minimessage.internal.parser.node.TagNode: TagNode(net.kyori.adventure.text.minimessage.internal.parser.node.ElementNode,net.kyori.adventure.text.minimessage.internal.parser.Token,java.lang.String,net.kyori.adventure.text.minimessage.internal.parser.TokenParser$TagProvider)
net.kyori.adventure.text.minimessage.internal.parser.node.TagNode: java.util.List parts()
net.kyori.adventure.text.minimessage.internal.parser.node.TagNode: java.lang.String name()
net.kyori.adventure.text.minimessage.internal.parser.node.TagNode: net.kyori.adventure.text.minimessage.internal.parser.Token token()
net.kyori.adventure.text.minimessage.internal.parser.node.TagNode: net.kyori.adventure.text.minimessage.tag.Tag tag()
net.kyori.adventure.text.minimessage.internal.parser.node.TagNode: void tag(net.kyori.adventure.text.minimessage.tag.Tag)
net.kyori.adventure.text.minimessage.internal.parser.node.TagNode: java.lang.StringBuilder buildToString(java.lang.StringBuilder,int)
net.kyori.adventure.text.minimessage.internal.parser.node.TagPart
net.kyori.adventure.text.minimessage.internal.parser.node.TagPart: TagPart(java.lang.String,net.kyori.adventure.text.minimessage.internal.parser.Token,net.kyori.adventure.text.minimessage.internal.parser.TokenParser$TagProvider)
net.kyori.adventure.text.minimessage.internal.parser.node.TagPart: java.lang.String value()
net.kyori.adventure.text.minimessage.internal.parser.node.TagPart: net.kyori.adventure.text.minimessage.internal.parser.Token token()
net.kyori.adventure.text.minimessage.internal.parser.node.TagPart: java.lang.String unquoteAndEscape(java.lang.String,int,int)
net.kyori.adventure.text.minimessage.internal.parser.node.TagPart: java.lang.String toString()
net.kyori.adventure.text.minimessage.internal.parser.node.TextNode
net.kyori.adventure.text.minimessage.internal.parser.node.TextNode: TextNode(net.kyori.adventure.text.minimessage.internal.parser.node.ElementNode,net.kyori.adventure.text.minimessage.internal.parser.Token,java.lang.String)
net.kyori.adventure.text.minimessage.internal.parser.node.ValueNode
net.kyori.adventure.text.minimessage.internal.parser.node.ValueNode: java.lang.String value()
net.kyori.adventure.text.minimessage.internal.parser.node.ValueNode: net.kyori.adventure.text.minimessage.internal.parser.Token token()
net.kyori.adventure.text.minimessage.internal.parser.node.ValueNode: java.lang.StringBuilder buildToString(java.lang.StringBuilder,int)
net.kyori.adventure.text.minimessage.internal.serializer.ClaimConsumer
net.kyori.adventure.text.minimessage.internal.serializer.ClaimConsumer: void style(java.lang.String,net.kyori.adventure.text.minimessage.internal.serializer.Emitable)
net.kyori.adventure.text.minimessage.internal.serializer.ClaimConsumer: boolean component(net.kyori.adventure.text.minimessage.internal.serializer.Emitable)
net.kyori.adventure.text.minimessage.internal.serializer.ClaimConsumer: boolean styleClaimed(java.lang.String)
net.kyori.adventure.text.minimessage.internal.serializer.ClaimConsumer: boolean componentClaimed()
net.kyori.adventure.text.minimessage.internal.serializer.Emitable
net.kyori.adventure.text.minimessage.internal.serializer.Emitable: void emit(net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter)
net.kyori.adventure.text.minimessage.internal.serializer.QuotingOverride
net.kyori.adventure.text.minimessage.internal.serializer.QuotingOverride: net.kyori.adventure.text.minimessage.internal.serializer.QuotingOverride UNQUOTED
net.kyori.adventure.text.minimessage.internal.serializer.QuotingOverride: net.kyori.adventure.text.minimessage.internal.serializer.QuotingOverride QUOTED
net.kyori.adventure.text.minimessage.internal.serializer.QuotingOverride: net.kyori.adventure.text.minimessage.internal.serializer.QuotingOverride[] values()
net.kyori.adventure.text.minimessage.internal.serializer.QuotingOverride: net.kyori.adventure.text.minimessage.internal.serializer.QuotingOverride valueOf(java.lang.String)
net.kyori.adventure.text.minimessage.internal.serializer.SerializableResolver
net.kyori.adventure.text.minimessage.internal.serializer.SerializableResolver: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver claimingComponent(java.lang.String,java.util.function.BiFunction,java.util.function.Function)
net.kyori.adventure.text.minimessage.internal.serializer.SerializableResolver: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver claimingComponent(java.util.Set,java.util.function.BiFunction,java.util.function.Function)
net.kyori.adventure.text.minimessage.internal.serializer.SerializableResolver: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver claimingStyle(java.lang.String,java.util.function.BiFunction,net.kyori.adventure.text.minimessage.internal.serializer.StyleClaim)
net.kyori.adventure.text.minimessage.internal.serializer.SerializableResolver: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver claimingStyle(java.util.Set,java.util.function.BiFunction,net.kyori.adventure.text.minimessage.internal.serializer.StyleClaim)
net.kyori.adventure.text.minimessage.internal.serializer.SerializableResolver: void handle(net.kyori.adventure.text.Component,net.kyori.adventure.text.minimessage.internal.serializer.ClaimConsumer)
net.kyori.adventure.text.minimessage.internal.serializer.SerializableResolver$Single
net.kyori.adventure.text.minimessage.internal.serializer.SerializableResolver$Single: void handle(net.kyori.adventure.text.Component,net.kyori.adventure.text.minimessage.internal.serializer.ClaimConsumer)
net.kyori.adventure.text.minimessage.internal.serializer.SerializableResolver$Single: net.kyori.adventure.text.minimessage.internal.serializer.StyleClaim claimStyle()
net.kyori.adventure.text.minimessage.internal.serializer.SerializableResolver$Single: net.kyori.adventure.text.minimessage.internal.serializer.Emitable claimComponent(net.kyori.adventure.text.Component)
net.kyori.adventure.text.minimessage.internal.serializer.StyleClaim
net.kyori.adventure.text.minimessage.internal.serializer.StyleClaim: net.kyori.adventure.text.minimessage.internal.serializer.StyleClaim claim(java.lang.String,java.util.function.Function,java.util.function.BiConsumer)
net.kyori.adventure.text.minimessage.internal.serializer.StyleClaim: net.kyori.adventure.text.minimessage.internal.serializer.StyleClaim claim(java.lang.String,java.util.function.Function,java.util.function.Predicate,java.util.function.BiConsumer)
net.kyori.adventure.text.minimessage.internal.serializer.StyleClaim: java.lang.String claimKey()
net.kyori.adventure.text.minimessage.internal.serializer.StyleClaim: net.kyori.adventure.text.minimessage.internal.serializer.Emitable apply(net.kyori.adventure.text.format.Style)
net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter
net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter: net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter tag(java.lang.String)
net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter: net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter selfClosingTag(java.lang.String)
net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter: net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter arguments(java.lang.String[])
net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter: net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter argument(java.lang.String)
net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter: net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter argument(java.lang.String,net.kyori.adventure.text.minimessage.internal.serializer.QuotingOverride)
net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter: net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter argument(net.kyori.adventure.text.Component)
net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter: net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter text(java.lang.String)
net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter: net.kyori.adventure.text.minimessage.internal.serializer.TokenEmitter pop()
net.kyori.adventure.text.minimessage.tag.Inserting
net.kyori.adventure.text.minimessage.tag.Inserting: net.kyori.adventure.text.Component value()
net.kyori.adventure.text.minimessage.tag.Inserting: boolean allowsChildren()
net.kyori.adventure.text.minimessage.tag.Modifying
net.kyori.adventure.text.minimessage.tag.Modifying: void visit(net.kyori.adventure.text.minimessage.tree.Node,int)
net.kyori.adventure.text.minimessage.tag.Modifying: void postVisit()
net.kyori.adventure.text.minimessage.tag.Modifying: net.kyori.adventure.text.Component apply(net.kyori.adventure.text.Component,int)
net.kyori.adventure.text.minimessage.tag.ParserDirective
net.kyori.adventure.text.minimessage.tag.ParserDirective: net.kyori.adventure.text.minimessage.tag.Tag RESET
net.kyori.adventure.text.minimessage.tag.PreProcess
net.kyori.adventure.text.minimessage.tag.PreProcess: java.lang.String value()
net.kyori.adventure.text.minimessage.tag.Tag
net.kyori.adventure.text.minimessage.tag.Tag: net.kyori.adventure.text.minimessage.tag.PreProcess preProcessParsed(java.lang.String)
net.kyori.adventure.text.minimessage.tag.Tag: net.kyori.adventure.text.minimessage.tag.Tag inserting(net.kyori.adventure.text.Component)
net.kyori.adventure.text.minimessage.tag.Tag: net.kyori.adventure.text.minimessage.tag.Tag inserting(net.kyori.adventure.text.ComponentLike)
net.kyori.adventure.text.minimessage.tag.Tag: net.kyori.adventure.text.minimessage.tag.Tag selfClosingInserting(net.kyori.adventure.text.Component)
net.kyori.adventure.text.minimessage.tag.Tag: net.kyori.adventure.text.minimessage.tag.Tag selfClosingInserting(net.kyori.adventure.text.ComponentLike)
net.kyori.adventure.text.minimessage.tag.Tag: net.kyori.adventure.text.minimessage.tag.Tag styling(java.util.function.Consumer)
net.kyori.adventure.text.minimessage.tag.Tag: net.kyori.adventure.text.minimessage.tag.Tag styling(net.kyori.adventure.text.format.StyleBuilderApplicable[])
net.kyori.adventure.text.minimessage.tag.Tag$Argument
net.kyori.adventure.text.minimessage.tag.Tag$Argument: java.lang.String value()
net.kyori.adventure.text.minimessage.tag.Tag$Argument: java.lang.String lowerValue()
net.kyori.adventure.text.minimessage.tag.Tag$Argument: boolean isTrue()
net.kyori.adventure.text.minimessage.tag.Tag$Argument: boolean isFalse()
net.kyori.adventure.text.minimessage.tag.Tag$Argument: java.util.OptionalInt asInt()
net.kyori.adventure.text.minimessage.tag.Tag$Argument: java.util.OptionalDouble asDouble()
net.kyori.adventure.text.minimessage.tag.resolver.ArgumentQueue
net.kyori.adventure.text.minimessage.tag.resolver.ArgumentQueue: net.kyori.adventure.text.minimessage.tag.Tag$Argument pop()
net.kyori.adventure.text.minimessage.tag.resolver.ArgumentQueue: net.kyori.adventure.text.minimessage.tag.Tag$Argument popOr(java.lang.String)
net.kyori.adventure.text.minimessage.tag.resolver.ArgumentQueue: net.kyori.adventure.text.minimessage.tag.Tag$Argument popOr(java.util.function.Supplier)
net.kyori.adventure.text.minimessage.tag.resolver.ArgumentQueue: net.kyori.adventure.text.minimessage.tag.Tag$Argument peek()
net.kyori.adventure.text.minimessage.tag.resolver.ArgumentQueue: boolean hasNext()
net.kyori.adventure.text.minimessage.tag.resolver.ArgumentQueue: void reset()
net.kyori.adventure.text.minimessage.tag.resolver.Formatter
net.kyori.adventure.text.minimessage.tag.resolver.Formatter: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver number(java.lang.String,java.lang.Number)
net.kyori.adventure.text.minimessage.tag.resolver.Formatter: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver date(java.lang.String,java.time.temporal.TemporalAccessor)
net.kyori.adventure.text.minimessage.tag.resolver.Formatter: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver choice(java.lang.String,java.lang.Number)
net.kyori.adventure.text.minimessage.tag.resolver.Formatter: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver booleanChoice(java.lang.String,boolean)
net.kyori.adventure.text.minimessage.tag.resolver.Placeholder
net.kyori.adventure.text.minimessage.tag.resolver.Placeholder: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Single parsed(java.lang.String,java.lang.String)
net.kyori.adventure.text.minimessage.tag.resolver.Placeholder: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Single unparsed(java.lang.String,java.lang.String)
net.kyori.adventure.text.minimessage.tag.resolver.Placeholder: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Single component(java.lang.String,net.kyori.adventure.text.ComponentLike)
net.kyori.adventure.text.minimessage.tag.resolver.Placeholder: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Single styling(java.lang.String,net.kyori.adventure.text.format.StyleBuilderApplicable[])
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder builder()
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver standard()
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver empty()
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Single resolver(java.lang.String,net.kyori.adventure.text.minimessage.tag.Tag)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver resolver(java.lang.String,java.util.function.BiFunction)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver resolver(java.util.Set,java.util.function.BiFunction)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver resolver(net.kyori.adventure.text.minimessage.tag.resolver.TagResolver[])
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver resolver(java.lang.Iterable)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver caching(net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$WithoutArguments)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver: java.util.stream.Collector toTagResolver()
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver: net.kyori.adventure.text.minimessage.tag.Tag resolve(java.lang.String,net.kyori.adventure.text.minimessage.tag.resolver.ArgumentQueue,net.kyori.adventure.text.minimessage.Context)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver: boolean has(java.lang.String)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder tag(java.lang.String,net.kyori.adventure.text.minimessage.tag.Tag)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder tag(java.lang.String,java.util.function.BiFunction)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder tag(java.util.Set,java.util.function.BiFunction)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder resolver(net.kyori.adventure.text.minimessage.tag.resolver.TagResolver)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder resolvers(net.kyori.adventure.text.minimessage.tag.resolver.TagResolver[])
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder resolvers(java.lang.Iterable)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder caching(net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$WithoutArguments)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Builder: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver build()
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Single
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Single: java.lang.String key()
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Single: net.kyori.adventure.text.minimessage.tag.Tag tag()
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Single: net.kyori.adventure.text.minimessage.tag.Tag resolve(java.lang.String)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$Single: boolean has(java.lang.String)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$WithoutArguments
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$WithoutArguments: net.kyori.adventure.text.minimessage.tag.Tag resolve(java.lang.String)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$WithoutArguments: boolean has(java.lang.String)
net.kyori.adventure.text.minimessage.tag.resolver.TagResolver$WithoutArguments: net.kyori.adventure.text.minimessage.tag.Tag resolve(java.lang.String,net.kyori.adventure.text.minimessage.tag.resolver.ArgumentQueue,net.kyori.adventure.text.minimessage.Context)
net.kyori.adventure.text.minimessage.tag.standard.StandardTags
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver decorations(net.kyori.adventure.text.format.TextDecoration)
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver decorations()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver color()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver hoverEvent()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver clickEvent()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver keybind()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver translatable()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver translatableFallback()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver insertion()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver font()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver gradient()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver rainbow()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver transition()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver reset()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver newline()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver selector()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver score()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver nbt()
net.kyori.adventure.text.minimessage.tag.standard.StandardTags: net.kyori.adventure.text.minimessage.tag.resolver.TagResolver defaults()
net.kyori.adventure.text.minimessage.tag.standard.TransitionTag
net.kyori.adventure.text.minimessage.tag.standard.TransitionTag: java.lang.String TRANSITION
net.kyori.adventure.text.minimessage.tag.standard.TransitionTag: net.kyori.adventure.text.Component value()
net.kyori.adventure.text.minimessage.tag.standard.TransitionTag: java.util.stream.Stream examinableProperties()
net.kyori.adventure.text.minimessage.tag.standard.TransitionTag: boolean equals(java.lang.Object)
net.kyori.adventure.text.minimessage.tag.standard.TransitionTag: int hashCode()
net.kyori.adventure.text.minimessage.tree.Node
net.kyori.adventure.text.minimessage.tree.Node: java.lang.String toString()
net.kyori.adventure.text.minimessage.tree.Node: java.util.List children()
net.kyori.adventure.text.minimessage.tree.Node: net.kyori.adventure.text.minimessage.tree.Node parent()
net.kyori.adventure.text.minimessage.tree.Node$Root
net.kyori.adventure.text.minimessage.tree.Node$Root: java.lang.String input()
net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializerImpl$FormatCodeType: net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializerImpl$FormatCodeType[] values()
net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializerImpl$FormatCodeType: net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializerImpl$FormatCodeType valueOf(java.lang.String)
net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializerImpl$Reset: net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializerImpl$Reset[] values()
net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializerImpl$Reset: net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializerImpl$Reset valueOf(java.lang.String)
net.kyori.adventure.util.TriState: net.kyori.adventure.util.TriState[] values()
net.kyori.adventure.util.TriState: net.kyori.adventure.util.TriState valueOf(java.lang.String)
org.bson.AbstractBsonReader$State: org.bson.AbstractBsonReader$State[] values()
org.bson.AbstractBsonReader$State: org.bson.AbstractBsonReader$State valueOf(java.lang.String)
org.bson.AbstractBsonWriter$State: org.bson.AbstractBsonWriter$State[] values()
org.bson.AbstractBsonWriter$State: org.bson.AbstractBsonWriter$State valueOf(java.lang.String)
org.bson.BsonBinarySubType: org.bson.BsonBinarySubType[] values()
org.bson.BsonBinarySubType: org.bson.BsonBinarySubType valueOf(java.lang.String)
org.bson.BsonContextType: org.bson.BsonContextType[] values()
org.bson.BsonContextType: org.bson.BsonContextType valueOf(java.lang.String)
org.bson.BsonType: org.bson.BsonType[] values()
org.bson.BsonType: org.bson.BsonType valueOf(java.lang.String)
org.bson.UuidRepresentation: org.bson.UuidRepresentation[] values()
org.bson.UuidRepresentation: org.bson.UuidRepresentation valueOf(java.lang.String)
org.bson.codecs.PatternCodec$RegexFlag: org.bson.codecs.PatternCodec$RegexFlag[] values()
org.bson.codecs.PatternCodec$RegexFlag: org.bson.codecs.PatternCodec$RegexFlag valueOf(java.lang.String)
org.bson.json.JsonMode: org.bson.json.JsonMode[] values()
org.bson.json.JsonMode: org.bson.json.JsonMode valueOf(java.lang.String)
org.bson.json.JsonScanner$NumberState: org.bson.json.JsonScanner$NumberState[] values()
org.bson.json.JsonScanner$NumberState: org.bson.json.JsonScanner$NumberState valueOf(java.lang.String)
org.bson.json.JsonScanner$RegularExpressionState: org.bson.json.JsonScanner$RegularExpressionState[] values()
org.bson.json.JsonScanner$RegularExpressionState: org.bson.json.JsonScanner$RegularExpressionState valueOf(java.lang.String)
org.bson.json.JsonTokenType: org.bson.json.JsonTokenType[] values()
org.bson.json.JsonTokenType: org.bson.json.JsonTokenType valueOf(java.lang.String)
org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType: org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType[] values()
org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType: org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType valueOf(java.lang.String)
org.bson.json.StrictCharacterStreamJsonWriter$State: org.bson.json.StrictCharacterStreamJsonWriter$State[] values()
org.bson.json.StrictCharacterStreamJsonWriter$State: org.bson.json.StrictCharacterStreamJsonWriter$State valueOf(java.lang.String)
org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory[] values()
org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory valueOf(java.lang.String)
org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] values()
org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory valueOf(java.lang.String)
org.checkerframework.checker.units.qual.Prefix: org.checkerframework.checker.units.qual.Prefix[] values()
org.checkerframework.checker.units.qual.Prefix: org.checkerframework.checker.units.qual.Prefix valueOf(java.lang.String)
org.checkerframework.dataflow.qual.Pure$Kind: org.checkerframework.dataflow.qual.Pure$Kind[] values()
org.checkerframework.dataflow.qual.Pure$Kind: org.checkerframework.dataflow.qual.Pure$Kind valueOf(java.lang.String)
org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind[] values()
org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind valueOf(java.lang.String)
org.checkerframework.framework.qual.TypeKind: org.checkerframework.framework.qual.TypeKind[] values()
org.checkerframework.framework.qual.TypeKind: org.checkerframework.framework.qual.TypeKind valueOf(java.lang.String)
org.checkerframework.framework.qual.TypeUseLocation: org.checkerframework.framework.qual.TypeUseLocation[] values()
org.checkerframework.framework.qual.TypeUseLocation: org.checkerframework.framework.qual.TypeUseLocation valueOf(java.lang.String)
org.jetbrains.annotations.Nls$Capitalization: org.jetbrains.annotations.Nls$Capitalization[] values()
org.jetbrains.annotations.Nls$Capitalization: org.jetbrains.annotations.Nls$Capitalization valueOf(java.lang.String)
